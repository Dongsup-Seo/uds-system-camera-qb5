////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecflash.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AECFLASH_H
#define AECFLASH_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "globalelements.h"
#include "aecglobalelements.h"

#define AECFLASH_NAMESPACE_BEGIN namespace aecFlash {
#define AECFLASH_NAMESPACE_END }

AECFLASH_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LEDInlineCalibTargetDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LEDInlineCalibTargetDataType
{
    FLOAT distancePCT;
    FLOAT angleShiftPCT;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LEDInlineCalibTargetZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LEDInlineCalibTargetZoneType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType             zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    LEDInlineCalibTargetDataType zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LEDInlineCalibTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LEDInlineCalibTargetType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LEDInlineCalibTargetZone - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                        LEDInlineCalibTargetZoneCount;
    UINT32                        LEDInlineCalibTargetZoneID;
    LEDInlineCalibTargetZoneType* LEDInlineCalibTargetZone;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LEDInlineCalibType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LEDInlineCalibType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// triggerIndex
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Lux index threshold to trigger Inline calibration
    /// Type:          float
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                    triggerIndex;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// refRange
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   range of RG, BG ratio selected as the reference grids to execute inline calibration
    /// Type:          float
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                    refRange;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// refRegionPCT
    ///
    /// Tuning Level:  never_tune
    /// Description:   control the BG stats grid size to use as reference grid of inline calibration
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                    refRegionPCT;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// validRefCount
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   valid grid numbers which are within refRange
    /// Type:          int
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                    validRefCount;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// distanceRatioMin
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   minimum acceptable distance range of flash influenced position to the estimated position
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                    distanceRatioMin;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// distanceRatioMax
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   maximum acceptable distance range of flash influenced position to the estimated position
    /// Type:          float
    /// Range:         [1.0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                    distanceRatioMax;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// angleShiftMax
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   acceptable shift angle range of flash influenced position to the estimated position
    /// Type:          float
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                    angleShiftMax;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minKneeCnt
    ///
    /// Tuning Level:  never_tune
    /// Description:   minimum number of LED1, LED2 powers at each knee that factoring inline calibration data to bin
    /// Type:          int
    /// Range:         [0,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                    minKneeCnt;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxZoneCnt
    ///
    /// Tuning Level:  never_tune
    /// Description:   maximum number of LED1, LED2 powers at each zone that limits the number of accumulated samples at each
    ///                zone
    /// Type:          int
    /// Range:         [0,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                    maxZoneCnt;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// confidencePctThr
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   threshold to determine a knee is confident of not
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                    confidencePctThr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// numOfFactoringRegions
    ///
    /// Tuning Level:  never_tune
    /// Description:   number of regions that devides between min and max for grouping the accumulated samples
    /// Type:          int
    /// Range:         [1,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                    numOfFactoringRegions;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LEDInlineCalibTarget
    ///
    /// Description:   zone tuning: zone is mixed power table: zone data is distancePCT and angleShiftPCT
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    LEDInlineCalibTargetType LEDInlineCalibTarget;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LEDMeasurementType
///
/// Description:   Flash measurement configuration. These parameters apply to both flash tuning and flash calibration
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LEDMeasurementType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// frameErrAllowance
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   For either flash calibration or flash tuning: Frame to frame error allowance when computing average r/g
    ///                and b/g ratios
    /// Type:          float
    /// Range:         [0.001,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT frameErrAllowance;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// numOfFrames
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   For either flash calibration or flash tuning: How many frames to average the average r/g b/g ratios
    /// Type:          int
    /// Range:         [2,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 numOfFrames;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxNumOfFrames
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   For either flash calibration or flash tuning: Maximum number of frames to try averaging r/g and b/g ratio
    ///                when stats are not consistent (cf. error allowance) before stopping measurement
    /// Type:          int
    /// Range:         [1,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 maxNumOfFrames;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxNumOfExtraAttempts
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   For either flash calibration or flash tuning: When a measurement fails we can allow some extra attempts.
    ///                This parameter controls how many extra attempts in total are allowed
    /// Type:          int
    /// Range:         [1,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 maxNumOfExtraAttempts;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LEDRatioOkRangeType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LEDRatioOkRangeType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RGRatioOKRange
    ///
    /// Tuning Level:  often_tune
    /// Description:   Pass range of the r/g deviation percentage from golden device to device under test, for current
    ///                calibration index. Calibration will fail if outside of this range.
    /// Range:         [0.0,10.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType RGRatioOKRange;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// BGRatioOKRange
    ///
    /// Tuning Level:  often_tune
    /// Description:   Pass range of the b/g deviation percentage from golden device to device under test, for current
    ///                calibration index. Calibration will fail if outside of this range.
    /// Range:         [0.0,10.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType BGRatioOKRange;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LEDMixCalibEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LEDMixCalibEntryType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LEDPowerIndex
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Power index of LED point to calibrate
    /// Type:          int
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 LEDPowerIndex;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LEDMixIndex
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Mix index of LED point to calibrate
    /// Type:          int
    /// Range:         [0,15]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 LEDMixIndex;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LEDMixCalibType
///
/// Description:   LED calibration controls. AEC LED calibration is tightly linked to AEC LED CCT table tuning
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LEDMixCalibType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// numOfCalibration
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Number of points to calibrate
    /// Type:          int
    /// Range:         [0,12]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                 numOfCalibration;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableCornerSampleScreen
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable screening calibration point to screen out obvious issues
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                  enableCornerSampleScreen;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// calibEntries - Array
    /// Min Length:    1
    /// Max Length:    12
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                calibEntriesCount;
    UINT32                calibEntriesID;
    LEDMixCalibEntryType* calibEntries;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// statsRatioOKRange - Array
    /// Min Length:    1
    /// Max Length:    12
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                statsRatioOKRangeCount;
    UINT32                statsRatioOKRangeID;
    LEDRatioOkRangeType*  statsRatioOKRange;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fixedExpIndex - Array
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Manual exposure index for given
    /// Type:          float
    /// Range:         [0,500]
    /// Min Length:    1
    /// Max Length:    12
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                fixedExpIndexCount;
    UINT32                fixedExpIndexID;
    FLOAT*                fixedExpIndex;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LEDMixType
///
/// Description:   Tuning of LED parameters for both single and dual LED
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LEDMixType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LED1Setting
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Use LED tuning tool to populate LED tuning table. Power level for LED1 in mA. Max value depends on
    ///                hardware design and driver
    /// Type:          int
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 LED1Setting;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LED2Setting
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Use LED tuning tool to populate LED tuning table. Power level for LED2 in mA. Max value depends on
    ///                hardware design and driver
    /// Type:          int
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 LED2Setting;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RGRatio
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Use LED tuning tool to populate LED tuning table. Red over green ratio for current mix
    /// Type:          float
    /// Range:         [0.0,10.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT RGRatio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// BGRatio
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Use LED tuning tool to populate LED tuning table. Blue over green ratio for current mix
    /// Type:          float
    /// Range:         [0.0,10.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT BGRatio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flux
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Use LED tuning tool to populate LED tuning table. Influence of flash on scene in reference to entry in
    ///                power level mix 0
    /// Type:          float
    /// Range:         [0.0,100.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT flux;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LEDMatchTableType
///
/// Description:   Tuning of LEDs for flash exposure conistency as well as color matching consistency for dual LED solutions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LEDMatchTableType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableDualLED
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Use LED tuning tool to populate this parameter. If project is using single LED set to false, if using
    ///                dual LED set to true.
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL               enableDualLED;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dualLEDIntersectSlope
    ///
    /// Tuning Level:  never_tune
    /// Description:   For dual LED: intersection slope between measured AWB gray point and LED data in the r/g vs. b/g color
    ///                domain
    /// Type:          float
    /// Range:         [0.0,10.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT              dualLEDIntersectSlope;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LEDPowerSize
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Use LED tuning tool to populate this parameter. How many power levels are tuned.
    /// Type:          int
    /// Range:         [2,6]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32              LEDPowerSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LEDMixSize
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Use LED tuning tool to populate this parameter. How many mixes are there for each power level
    /// Type:          int
    /// Range:         [1,16]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32              LEDMixSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CCTTables - Array
    ///
    /// Description:   Tuning of LED parameters for both single and dual LED
    /// Min Length:    1
    /// Max Length:    96
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32             CCTTablesCount;
    UINT32             CCTTablesID;
    LEDMixType*        CCTTables;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CCTTableCalibration
    ///
    /// Description:   LED calibration controls. AEC LED calibration is tightly linked to AEC LED CCT table tuning
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    LEDMixCalibType    CCTTableCalibration;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LEDMeasConfig
    ///
    /// Description:   Flash measurement configuration. These parameters apply to both flash tuning and flash calibration
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    LEDMeasurementType LEDMeasConfig;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableDerating
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enable interpolation between power settings if max allowed power is below CCTTable max power
    /// Type:          bool
    /// Default Value: true
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL               enableDerating;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FlashExtensionType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FlashExtensionType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flashLuxTrigger
    ///
    /// Tuning Level:  often_tune
    /// Description:   Lux hysteresis thresholds to trigger flash.
    /// Range:         [0,unbounded]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType       flashLuxTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flashFDRequestDelayLuxTrigger
    ///
    /// Tuning Level:  often_tune
    /// Description:   Lux hysteresis thresholds to request additional time for face detection to run
    /// Range:         [0,unbounded]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType       flashFDRequestDelayLuxTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LEDTable
    ///
    /// Description:   Tuning of LEDs for flash exposure conistency as well as color matching consistency for dual LED solutions
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    LEDMatchTableType  LEDTable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableForceAFInLEDOnMode
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Set to true to always run LED AF when LED is in force ON mode.
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL               enableForceAFInLEDOnMode;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LEDInlineCalib
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    LEDInlineCalibType LEDInlineCalib;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FlashArbitrationType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FlashArbitrationType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// expTableIDPreFlash
    ///
    /// Tuning Level:  often_tune
    /// Description:   Index of exposure table to use during preflash convergence
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::ExposureTableIDType expTableIDPreFlash;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// expTableIDMainFlash
    ///
    /// Tuning Level:  often_tune
    /// Description:   Index of exposure table to use for flash snapshot
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::ExposureTableIDType expTableIDMainFlash;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// expTableIDFlashMeasurement
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Index of exposure table to use during chromatix flash tuning
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::ExposureTableIDType expTableIDFlashMeasurement;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// TorchConvType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct TorchConvType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableTorchConvergence
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   deprecated
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL              enableTorchConvergence;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tolMultUnitStepSize
    ///
    /// Tuning Level:  often_tune
    /// Description:   deprecated
    /// Type:          int
    /// Range:         [1,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32             tolMultUnitStepSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// frameSkipMethod
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   deprecated
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::ConvFrameSkipType frameSkipMethod;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// aggressiveness
    ///
    /// Tuning Level:  often_tune
    /// Description:   deprecated
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             aggressiveness;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// startupAggressiveness
    ///
    /// Tuning Level:  often_tune
    /// Description:   deprecated
    /// Type:          float
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             startupAggressiveness;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ADRCConvSpeed
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   deprecated
    /// Type:          float
    /// Range:         [0.0,0.5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             ADRCConvSpeed;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DynamicEnterSkip
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DynamicEnterSkip
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableDynamicEnterSkip
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable dynamic calculation of preflash enter frame skip count based on FPS
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL         enableDynamicEnterSkip;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// preflashMinFrameSkip
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Frame skip count corresponding to min fps. Max fps corresponds to parameter preflashFrameCounterEnter.
    ///                Skips for FPS in-between FPSRange start and end are interpolated
    /// Type:          int
    /// Default Value: 2
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32        preflashMinFrameSkip;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FPSRange
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType FPSRange;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// PreFlashConvergenceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct PreFlashConvergenceType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// frameSkipMethod
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specifies which type of frame skip is desired: SmoothNoSkip for smooth convergence, SkipOne if there are
    ///                synchronization concerns, SkipSystemLatency if speed is preferred to smoothness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::ConvFrameSkipType frameSkipMethod;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// aggressiveness
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The larger this value the faster the convergence
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             aggressiveness;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// settledFrameCountThres
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Number of additional frames to wait before declaring settled and computing flash snapshot parameters. Can
    ///                be reduced if sensor sync is reliable
    /// Type:          int
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32             settledFrameCountThres;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// preflashFrameCounterEnter
    ///
    /// Description:   Flash measurement configuration. These parameters apply to both flash tuning and flash calibration
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::SwitchCounterType preflashFrameCounterEnter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// preflashFrameCounterExit
    ///
    /// Description:   Flash measurement configuration. These parameters apply to both flash tuning and flash calibration
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::SwitchCounterType preflashFrameCounterExit;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dynamicEnterSkip
    ///
    /// Description:   Optimize duration of preflash sequence: reduce preflash enter frame skip count if frame rate is low
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicEnterSkip  dynamicEnterSkip;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FlashConvergenceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FlashConvergenceType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flashTuningBreak
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   How many seconds for sensor to cool down after fire during flash tuning
    /// Type:          int
    /// Default Value: 4
    /// Range:         [1,7]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                   flashTuningBreak;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// preflashConv
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Tuning for convergence during preflash phase of flash snapshot
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PreFlashConvergenceType preflashConv;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flashMeasurementConv
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Tuning settings for initial convergence algorithms: FastAEC and AggressiveAEC
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::RapidConvType           flashMeasurementConv;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// torchConv
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   deprecated
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TorchConvType           torchConv;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DynamicTrackerDelayType
///
/// Description:   Shorten preflash sequence: Adds more conditions before adding extra FD frame delay during preflash.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DynamicTrackerDelayType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableTrackerDynamicDelay
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enable additional feature that will not extend preflash sequence if light level is good
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL  enableTrackerDynamicDelay;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minLumaToSkipPreTracker
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   luma threshold before preflash; if luma higher: no additional preflash delay for running tracker
    /// Type:          float
    /// Default Value: 25.0
    /// Range:         [0.0,256.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT minLumaToSkipPreTracker;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECTrackerFlashType
///
/// Description:   This feature runs tracker during preflash sequence and then exposes the snapshot image using track ROI.
///                It can also be tuned to extend the preflash sequence and give more time for face detection to run.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECTrackerFlashType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableTrackerFlash
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable track ROI metering for flash snapshot
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                    enableTrackerFlash;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ledTrackerWeight
    ///
    /// Tuning Level:  often_tune
    /// Description:   Weight range assigned to tracker depending on tracker size (small tracker will use start weight large
    ///                tracker will sue end weight). Leverages tracker AEC
    /// Range:         [0.0,1.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType            ledTrackerWeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ledTrackerSize
    ///
    /// Tuning Level:  often_tune
    /// Description:   Tracker size pct range that controls metering weight. Leverages tracker AEC
    /// Range:         [0.0,1.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType            ledTrackerSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TrackerFlashFrameCount
    ///
    /// Tuning Level:  often_tune
    /// Description:   Threshold on the maximum number of frames the algorithm will wait for tracker detection
    /// Type:          int
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                   TrackerFlashFrameCount;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TrackerFlashLumaTarget
    ///
    /// Tuning Level:  often_tune
    /// Description:   Luma target for track ROIs
    /// Type:          float
    /// Range:         [0,255]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                   TrackerFlashLumaTarget;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// trackerSizeExpEffect
    ///
    /// Tuning Level:  often_tune
    /// Description:   Range of tracker size within which the effect of flash tracker detection phases in and out. Large tracker
    ///                should make full use of tracker metering
    /// Range:         [0,1.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType            trackerSizeExpEffect;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// statsUpdateDelayTimeEnter
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specify the delay in seconds to declare Track ROI officially comes into effect (for detection stability)
    /// Type:          float
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                   statsUpdateDelayTimeEnter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// statsUpdateDelayTimeExit
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specify the delay in seconds to declare Track ROI officially exits (for detection stability)
    /// Type:          float
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                   statsUpdateDelayTimeExit;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dynamicTrackerDelay
    ///
    /// Description:   Shorten preflash sequence: Adds more conditions before adding extra FD frame delay during preflash.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicTrackerDelayType dynamicTrackerDelay;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DynamicDelayType
///
/// Description:   Shorten preflash sequence: Adds more conditions before adding extra FD frame delay during preflash.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DynamicDelayType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableFDDynamicDelay
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enable additional feature that will not extend preflash sequence if light level is good
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL  enableFDDynamicDelay;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minLumaToSkipPreFD
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   luma threshold before preflash; if luma higher: no additional preflash delay for running face detection
    /// Type:          float
    /// Default Value: 25.0
    /// Range:         [0.0,256.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT minLumaToSkipPreFD;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECFaceDetectionFlashType
///
/// Description:   This feature runs face detection during preflash sequence and then exposes the snapshot image using face
///                detection ROI. It can also be tuned to extend the preflash sequence and give more time for face detection
///                to run.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECFaceDetectionFlashType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableFDFlash
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable face detection ROI metering for flash snapshot
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL             enableFDFlash;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ledFaceWeight
    ///
    /// Tuning Level:  often_tune
    /// Description:   Weight range assigned to face depending on face size (small face will use start weight large face will
    ///                sue end weight). Leverages dominant face AEC
    /// Range:         [0.0,1.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType     ledFaceWeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ledFaceSize
    ///
    /// Tuning Level:  often_tune
    /// Description:   Face size pct range that controls metering weight. Leverages dominant face AEC
    /// Range:         [0.0,1.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType     ledFaceSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FDFlashFrameCount
    ///
    /// Tuning Level:  often_tune
    /// Description:   Threshold on the maximum number of frames the algorithm will wait for face detection
    /// Type:          int
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            FDFlashFrameCount;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FDFlashLumaTarget
    ///
    /// Tuning Level:  often_tune
    /// Description:   Luma target for face ROIs
    /// Type:          float
    /// Range:         [0,255]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            FDFlashLumaTarget;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceSizeExpEffect
    ///
    /// Tuning Level:  often_tune
    /// Description:   Range of face size within which the effect of flash face detection phases in and out. Large face should
    ///                make full use of FD metering
    /// Range:         [0,1.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType     faceSizeExpEffect;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// statsUpdateDelayTimeEnter
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specify the delay in seconds to declare Face ROI officially comes into effect (for detection stability)
    /// Type:          float
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            statsUpdateDelayTimeEnter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// statsUpdateDelayTimeExit
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specify the delay in seconds to declare Face ROI officially exits (for detection stability)
    /// Type:          float
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            statsUpdateDelayTimeExit;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dynamicDelay
    ///
    /// Description:   Shorten preflash sequence: Adds more conditions before adding extra FD frame delay during preflash.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicDelayType dynamicDelay;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FlashDynamicMinAdjType
///
/// Description:   Adds flexibility on min adjustment size based on ratio of saturated stats
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FlashDynamicMinAdjType
{
    BOOL         enableDynamicMinAdj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// percThresh
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType percThresh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minLumaAdjEnd
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   largest adjustment if stats exceed preflashSatRegionPercHigh. minimum adjustment is controlled by
    ///                minLumaAdj
    /// Type:          float
    /// Default Value: 0.1
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        minLumaAdjEnd;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FlashStatsPreprocessingType
///
/// Description:   Preflash metering defines which regions are influenced by flash. It also speeds up preflash convergence
///                sequence.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FlashStatsPreprocessingType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresBrightLevelDiff
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   During preflash convergence: Y region is still too bright if larger than thresBrightLevel +
    ///                thresBrightLevelDiff. The lower this value the more likely convergence will adjust after preflash turns
    ///                on
    /// Type:          int
    /// Range:         [5,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                  thresBrightLevelDiff;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresBrightLevel
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Mark Y region as bright when above this threshold
    /// Type:          int
    /// Range:         [0,255]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                  thresBrightLevel;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresBrightSatDiff
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   During preflash convergence: Y region is saturated if sat percentage is larger than thresBrightSat +
    ///                thresBrightSatDiff. The lower this value the more likely convergence will adjust after preflash turns on
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  thresBrightSatDiff;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresBrightSat
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Mark Y region as bright when above this threshold
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  thresBrightSat;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minLuma
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Preflash convergence will stop if luma drops below this threshold
    /// Type:          int
    /// Range:         [1,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                  minLuma;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minLumaAdj
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Minimum adjustment during preflash convergence. The larger this value the more precise convergence but
    ///                also the longer it takes to converge
    /// Type:          float
    /// Range:         [0.001,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  minLumaAdj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minLumaAdjDynamic
    ///
    /// Description:   Adds flexibility on min adjustment size based on ratio of saturated stats
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FlashDynamicMinAdjType minLumaAdjDynamic;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SmartFlashType
///
/// Description:   Smart flash uses a bias table computed by comparing stats before and after preflash to better expose
///                scenes that have both foreground and background features
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SmartFlashType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableSmartFlashEst
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable metering scene using flash influence bias table
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL         enableSmartFlashEst;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// smartFlashEstStrength
    ///
    /// Tuning Level:  often_tune
    /// Description:   Strength of smart flash feature
    /// Type:          float
    /// Default Value: 1.0
    /// Range:         [0.0,10.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        smartFlashEstStrength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minOffStats
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Off stats value will be set to this value as to make the on_stats/off_stats ratio robust to noise
    /// Type:          int
    /// Range:         [1,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32        minOffStats;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// kFloorPct
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Percentile threshold to compress flash influence. The larger this value the more emphasis on small
    ///                reflective objects
    /// Type:          float
    /// Range:         [0.0,0.95]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        kFloorPct;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// satPreventStrength
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Strength of saturation prevention feature
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        satPreventStrength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableSpeckleHandling
    ///
    /// Tuning Level:  often_tune
    /// Description:   This feature allows saturation to happen if there is still saturation after flash convergence
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL         enableSpeckleHandling;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// speckleSatPctRange
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Saturation pct range within which we will decrease influence of region. Above this range influence of
    ///                region is decreased to minimum. Lower range to make speckle detection kick in more often.
    /// Range:         [0.01,1.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType speckleSatPctRange;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FlashLumaTargetType
///
/// Description:   Tune lux-based luma target specifically for flash
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FlashLumaTargetType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableFlashTarget
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable separate luma target for flash snapshot capture
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL              enableFlashTarget;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flashTarget
    ///
    /// Description:   Luma target tuning structure, which is shared between normal and flash use case.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::LuxLumaTargetType flashTarget;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flashInfluenceTargetInterpolation
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Interpolation between normal target and flash target is done by measuring the influence of flash: No
    ///                influence (min: 1.0) should use normal target whereas strong influence (about 5.0 and above) should use
    ///                flash target.
    /// Range:         [1.0,7.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType      flashInfluenceTargetInterpolation;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FlashMeteringType
///
/// Description:   Metering for flash photography
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FlashMeteringType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flashLumaTarget
    ///
    /// Description:   Tune lux-based luma target specifically for flash
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FlashLumaTargetType         flashLumaTarget;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// smartFlash
    ///
    /// Description:   Smart flash uses a bias table computed by comparing stats before and after preflash to better expose
    ///                scenes that have both foreground and background features
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SmartFlashType              smartFlash;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// statsPreprocessing
    ///
    /// Description:   Preflash metering defines which regions are influenced by flash. It also speeds up preflash convergence
    ///                sequence.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FlashStatsPreprocessingType statsPreprocessing;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FDFlash
    ///
    /// Description:   This feature runs face detection during preflash sequence and then exposes the snapshot image using face
    ///                detection ROI. It can also be tuned to extend the preflash sequence and give more time for face detection
    ///                to run.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECFaceDetectionFlashType   FDFlash;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TrackerFlash
    ///
    /// Description:   This feature runs tracker during preflash sequence and then exposes the snapshot image using track ROI.
    ///                It can also be tuned to extend the preflash sequence and give more time for face detection to run.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECTrackerFlashType         TrackerFlash;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECFlashType
/// Comments:       Flash Tuning Definition
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECFlashType
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flashMtr
    ///
    /// Description:   Metering for flash photography
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FlashMeteringType    flashMtr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flashConv
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FlashConvergenceType flashConv;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flashArb
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FlashArbitrationType flashArb;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flashExt
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FlashExtensionType   flashExt;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECFlashTypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class AECFlashTypeClass : public ParameterModule, public AECFlashType
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 8;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECFlashTypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECFlashTypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~AECFlashTypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LEDInlineCalibTargetDataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLEDInlineCalibTargetDataType(
        ParameterFileSymbolTableEntry* entry,
        LEDInlineCalibTargetDataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LEDInlineCalibTargetZoneType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLEDInlineCalibTargetZoneType(
        ParameterFileSymbolTableEntry* entry,
        LEDInlineCalibTargetZoneType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LEDInlineCalibTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLEDInlineCalibTargetType(
        ParameterFileSymbolTableEntry* entry,
        LEDInlineCalibTargetType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LEDInlineCalibType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLEDInlineCalibType(
        ParameterFileSymbolTableEntry* entry,
        LEDInlineCalibType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LEDMeasurementType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLEDMeasurementType(
        ParameterFileSymbolTableEntry* entry,
        LEDMeasurementType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LEDRatioOkRangeType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLEDRatioOkRangeType(
        ParameterFileSymbolTableEntry* entry,
        LEDRatioOkRangeType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LEDMixCalibEntryType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLEDMixCalibEntryType(
        ParameterFileSymbolTableEntry* entry,
        LEDMixCalibEntryType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LEDMixCalibType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLEDMixCalibType(
        ParameterFileSymbolTableEntry* entry,
        LEDMixCalibType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LEDMixType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLEDMixType(
        ParameterFileSymbolTableEntry* entry,
        LEDMixType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LEDMatchTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLEDMatchTableType(
        ParameterFileSymbolTableEntry* entry,
        LEDMatchTableType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FlashExtensionType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFlashExtensionType(
        ParameterFileSymbolTableEntry* entry,
        FlashExtensionType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FlashArbitrationType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFlashArbitrationType(
        ParameterFileSymbolTableEntry* entry,
        FlashArbitrationType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load TorchConvType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadTorchConvType(
        ParameterFileSymbolTableEntry* entry,
        TorchConvType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load DynamicEnterSkip
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadDynamicEnterSkip(
        ParameterFileSymbolTableEntry* entry,
        DynamicEnterSkip* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load PreFlashConvergenceType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadPreFlashConvergenceType(
        ParameterFileSymbolTableEntry* entry,
        PreFlashConvergenceType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FlashConvergenceType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFlashConvergenceType(
        ParameterFileSymbolTableEntry* entry,
        FlashConvergenceType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load DynamicTrackerDelayType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadDynamicTrackerDelayType(
        ParameterFileSymbolTableEntry* entry,
        DynamicTrackerDelayType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECTrackerFlashType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECTrackerFlashType(
        ParameterFileSymbolTableEntry* entry,
        AECTrackerFlashType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load DynamicDelayType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadDynamicDelayType(
        ParameterFileSymbolTableEntry* entry,
        DynamicDelayType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECFaceDetectionFlashType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECFaceDetectionFlashType(
        ParameterFileSymbolTableEntry* entry,
        AECFaceDetectionFlashType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FlashDynamicMinAdjType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFlashDynamicMinAdjType(
        ParameterFileSymbolTableEntry* entry,
        FlashDynamicMinAdjType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FlashStatsPreprocessingType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFlashStatsPreprocessingType(
        ParameterFileSymbolTableEntry* entry,
        FlashStatsPreprocessingType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SmartFlashType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSmartFlashType(
        ParameterFileSymbolTableEntry* entry,
        SmartFlashType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FlashLumaTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFlashLumaTargetType(
        ParameterFileSymbolTableEntry* entry,
        FlashLumaTargetType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FlashMeteringType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFlashMeteringType(
        ParameterFileSymbolTableEntry* entry,
        FlashMeteringType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECFlashType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECFlashType(
        ParameterFileSymbolTableEntry* entry,
        AECFlashType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECFlashType::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECFlashType::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload LEDInlineCalibTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadLEDInlineCalibTargetType(
        LEDInlineCalibTargetType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload LEDInlineCalibType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadLEDInlineCalibType(
        LEDInlineCalibType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload LEDMixCalibType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadLEDMixCalibType(
        LEDMixCalibType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload LEDMatchTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadLEDMatchTableType(
        LEDMatchTableType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload FlashExtensionType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadFlashExtensionType(
        FlashExtensionType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload FlashLumaTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadFlashLumaTargetType(
        FlashLumaTargetType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload FlashMeteringType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadFlashMeteringType(
        FlashMeteringType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECFlashType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECFlashType(
        AECFlashType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        AECFlashType::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class AECFlashTypeClass

AECFLASH_NAMESPACE_END
#endif // AECFLASH_H

