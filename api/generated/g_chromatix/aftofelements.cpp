////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aftofelements.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "aftofelements.h"
#include "parametersetmanager.h"

AFTOFELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixTOFTypeClass::chromatixTOFTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(sensitivity);
    PARAMETER_INITIALIZE(outdoorLuxIdx);
    PARAMETER_INITIALIZE(TOFFlag);
    PARAMETER_INITIALIZE(Filter);
    PARAMETER_INITIALIZE(FrameDelay);
    PARAMETER_INITIALIZE(SceneChange);
    PARAMETER_INITIALIZE(FocusConverge);
    PARAMETER_INITIALIZE(FineScan);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixTOFTypeClass::chromatixTOFTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(sensitivity);
    PARAMETER_INITIALIZE(outdoorLuxIdx);
    PARAMETER_INITIALIZE(TOFFlag);
    PARAMETER_INITIALIZE(Filter);
    PARAMETER_INITIALIZE(FrameDelay);
    PARAMETER_INITIALIZE(SceneChange);
    PARAMETER_INITIALIZE(FocusConverge);
    PARAMETER_INITIALIZE(FineScan);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixTOFTypeClass::~chromatixTOFTypeClass()
{
    UnloadchromatixTOFType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixTOFTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "chromatixTOF")) == 0)
    {
        name = "chromatixTOF";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTOFFineScanType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixTOFTypeClass::LoadchromatixTOFFineScanType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTOFFineScanType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->num_near_steps_near_direction, alignment);
    result = result && entry->Read(&structure->num_far_steps_near_direction, alignment);
    result = result && entry->Read(&structure->num_near_steps_far_direction, alignment);
    result = result && entry->Read(&structure->num_far_steps_far_direction, alignment);
    result = result && entry->Read(&structure->num_near_steps_far_converge_point, alignment);
    result = result && entry->Read(&structure->num_far_steps_far_converge_point, alignment);
    result = result && entry->Read(&structure->near_steps_far_direction_tof_conf, alignment);
    result = result && entry->Read(&structure->tof_step_size, alignment);
    result = result && entry->Read(&structure->tof_step_size_low_light, alignment);
    result = result && entry->Read(&structure->far_distance_fine_step_size, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTOFFocusConvergeType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixTOFTypeClass::LoadchromatixTOFFocusConvergeType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTOFFocusConvergeType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->jump_to_start_limit, alignment);
    result = result && entry->Read(&structure->jump_to_start_limit_low_light, alignment);
    result = result && entry->Read(&structure->start_pos_for_tof, alignment);
    result = result && entry->Read(&structure->far_converge_point, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTOFSceneChangeType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixTOFTypeClass::LoadchromatixTOFSceneChangeType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTOFSceneChangeType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->scene_change_distance_std_dev_thres, alignment);
    result = result && entry->Read(&structure->far_distance_unstable_cnt_factor, alignment);
    result = result && entry->Read(&structure->panning_stable_cnt, alignment);
    result = result && entry->Read(&structure->panning_stable_thres, alignment);
    result = result && entry->Read(&structure->normal_light_cnt, alignment);
    result = result && entry->Read(&structure->lowlight_cnt, alignment);
    result = result && entry->Read(&structure->num_monitor_samples, alignment);

    // Reading Array scene_change_distance_thres from symbol table
    {
        result = result && entry->Read(&structure->scene_change_distance_thresCount, alignment);
        structure->scene_change_distance_thresID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->scene_change_distance_thres = pointerEntry->ReadArray<INT32>(structure->scene_change_distance_thresCount, alignment);
            result = structure->scene_change_distance_thres != NULL;
        }
        if (!result || structure->scene_change_distance_thres == NULL)
        {
            structure->scene_change_distance_thresCount = 0;
        }
    }

    // Reading Array distance_region from symbol table
    {
        result = result && entry->Read(&structure->distance_regionCount, alignment);
        structure->distance_regionID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->distance_region = pointerEntry->ReadArray<INT32>(structure->distance_regionCount, alignment);
            result = structure->distance_region != NULL;
        }
        if (!result || structure->distance_region == NULL)
        {
            structure->distance_regionCount = 0;
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTOFFrameDelayType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixTOFTypeClass::LoadchromatixTOFFrameDelayType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTOFFrameDelayType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->frame_delay_focus_converge_bright_light, alignment);
    result = result && entry->Read(&structure->frame_delay_focus_converge_low_light, alignment);
    result = result && entry->Read(&structure->frame_delay_fine_search_bright_light, alignment);
    result = result && entry->Read(&structure->frame_delay_fine_search_low_light, alignment);
    result = result && entry->Read(&structure->frame_delay_outdoor_light, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTOFFilterType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixTOFTypeClass::LoadchromatixTOFFilterType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTOFFilterType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->median_filter_enable, alignment);
    result = result && entry->Read(&structure->median_filter_num_of_samples, alignment);
    result = result && entry->Read(&structure->average_filter_enable, alignment);
    result = result && entry->Read(&structure->average_filter_num_of_samples, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTOFFlagType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixTOFTypeClass::LoadchromatixTOFFlagType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTOFFlagType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->use_custom_sensitivity, alignment);
    result = result && entry->Read(&structure->enable_sad_when_tof_is_conf, alignment);
    result = result && entry->Read(&structure->run_tof_in_outdoor_light_flag, alignment);
    result = result && entry->Read(&structure->aec_wait_check_flag_enable, alignment);
    result = result && entry->Read(&structure->far_scene_coarse_srch_enable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTOFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixTOFTypeClass::LoadchromatixTOFType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTOFType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && entry->Read(&structure->sensitivity, alignment);
    result = result && entry->Read(&structure->outdoorLuxIdx, alignment);
    result = result && LoadchromatixTOFFlagType(entry, &structure->TOFFlag, alignment);
    result = result && LoadchromatixTOFFilterType(entry, &structure->Filter, alignment);
    result = result && LoadchromatixTOFFrameDelayType(entry, &structure->FrameDelay, alignment);
    result = result && LoadchromatixTOFSceneChangeType(entry, &structure->SceneChange, alignment);
    result = result && LoadchromatixTOFFocusConvergeType(entry, &structure->FocusConverge, alignment);
    result = result && LoadchromatixTOFFineScanType(entry, &structure->FineScan, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixTOFTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixTOFType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixTOFTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixTOFType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixTOFSceneChangeType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixTOFTypeClass::UnloadchromatixTOFSceneChangeType(
    chromatixTOFSceneChangeType* structure)
{
    PARAMETER_DELETE[] structure->scene_change_distance_thres;
    PARAMETER_DELETE[] structure->distance_region;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixTOFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixTOFTypeClass::UnloadchromatixTOFType(
    chromatixTOFType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadchromatixTOFSceneChangeType(&structure->SceneChange);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixTOFTypeClass::Unloadparameter_versionStruct(
    chromatixTOFType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixTOFTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixTOFTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixTOFTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixTOFType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AFTOFELEMENTS_NAMESPACE_END
