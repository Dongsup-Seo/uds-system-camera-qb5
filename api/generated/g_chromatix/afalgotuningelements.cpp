////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afalgotuningelements.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "afalgotuningelements.h"
#include "parametersetmanager.h"

AFALGOTUNINGELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixAFAlgoTuningTypeClass::chromatixAFAlgoTuningTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(commonElements);
    PARAMETER_INITIALIZE(FOVCorrection);
    PARAMETER_INITIALIZE(searchLimitCount);
    PARAMETER_INITIALIZE(searchLimitID);
    PARAMETER_INITIALIZE(searchLimit);
    PARAMETER_INITIALIZE(faceDetection);
    PARAMETER_INITIALIZE(statsROIProcess);
    PARAMETER_INITIALIZE(orientationDetection);
    PARAMETER_INITIALIZE(outdoorROIConfiguration);
    PARAMETER_INITIALIZE(moduleTuning);
    PARAMETER_INITIALIZE(setInvalidFrame);
    PARAMETER_INITIALIZE(handJitter);
    PARAMETER_INITIALIZE(spotlightDetection);
    PARAMETER_INITIALIZE(distanceMapControl);
    PARAMETER_INITIALIZE(focusMapControl);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixAFAlgoTuningTypeClass::chromatixAFAlgoTuningTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(commonElements);
    PARAMETER_INITIALIZE(FOVCorrection);
    PARAMETER_INITIALIZE(searchLimit);
    PARAMETER_INITIALIZE(faceDetection);
    PARAMETER_INITIALIZE(statsROIProcess);
    PARAMETER_INITIALIZE(orientationDetection);
    PARAMETER_INITIALIZE(outdoorROIConfiguration);
    PARAMETER_INITIALIZE(moduleTuning);
    PARAMETER_INITIALIZE(setInvalidFrame);
    PARAMETER_INITIALIZE(handJitter);
    PARAMETER_INITIALIZE(spotlightDetection);
    PARAMETER_INITIALIZE(distanceMapControl);
    PARAMETER_INITIALIZE(focusMapControl);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixAFAlgoTuningTypeClass::~chromatixAFAlgoTuningTypeClass()
{
    UnloadchromatixAFAlgoTuningType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixAFAlgoTuningTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "chromatixAFAlgoTuning")) == 0)
    {
        name = "chromatixAFAlgoTuning";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FocusMapConfidenceEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadFocusMapConfidenceEntryType(
    ParameterFileSymbolTableEntry* entry,
    FocusMapConfidenceEntryType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->triggerPoint, alignment);
    result = result && entry->Read(&structure->confidenceThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FocusMapDefocusEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadFocusMapDefocusEntryType(
    ParameterFileSymbolTableEntry* entry,
    FocusMapDefocusEntryType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->triggerPoint, alignment);
    result = result && entry->Read(&structure->defocusThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFFocusMapControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixAFFocusMapControlType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFFocusMapControlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && LoadchromatixAFFocusMapControlType_resolutionStruct(entry, &structure->resolution, alignment);
    result = result && LoadchromatixAFFocusMapControlType_defocusTableStruct(entry, &structure->defocusTable, alignment);
    result = result && LoadchromatixAFFocusMapControlType_confidenceTableStruct(entry, &structure->confidenceTable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFFocusMapControlType_resolutionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixAFFocusMapControlType_resolutionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFFocusMapControlType::resolutionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->width, alignment);
    result = result && entry->Read(&structure->height, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFFocusMapControlType_defocusTableStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixAFFocusMapControlType_defocusTableStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFFocusMapControlType::defocusTableStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->triggerMode = (chromatixAFFocusMapControlType::defocusTableStruct::triggerModeEnum)entry->ReadEnum(&result, alignment);

    // Reading Array triggerEntries from symbol table
    {
        result = result && entry->Read(&structure->triggerEntriesCount, alignment);
        structure->triggerEntriesID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerEntries = PARAMETER_NEW FocusMapDefocusEntryType[structure->triggerEntriesCount];
        }
        if (!result || structure->triggerEntries == NULL)
        {
            structure->triggerEntriesCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerEntriesCount; i++)
        {
            result = LoadFocusMapDefocusEntryType(pointerEntry, &structure->triggerEntries[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFFocusMapControlType_confidenceTableStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixAFFocusMapControlType_confidenceTableStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFFocusMapControlType::confidenceTableStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->triggerMode = (chromatixAFFocusMapControlType::confidenceTableStruct::triggerModeEnum)entry->ReadEnum(&result, alignment);

    // Reading Array triggerEntries from symbol table
    {
        result = result && entry->Read(&structure->triggerEntriesCount, alignment);
        structure->triggerEntriesID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerEntries = PARAMETER_NEW FocusMapConfidenceEntryType[structure->triggerEntriesCount];
        }
        if (!result || structure->triggerEntries == NULL)
        {
            structure->triggerEntriesCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerEntriesCount; i++)
        {
            result = LoadFocusMapConfidenceEntryType(pointerEntry, &structure->triggerEntries[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFDistancemapControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixAFDistancemapControlType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFDistancemapControlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->useOTPData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixSagCompensation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixSagCompensation(
    ParameterFileSymbolTableEntry* entry,
    chromatixSagCompensation* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);

    // Reading Array fDAC from symbol table
    {
        result = result && entry->Read(&structure->fDACCount, alignment);
        structure->fDACID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->fDAC = pointerEntry->ReadArray<UINT32>(structure->fDACCount, alignment);
            result = structure->fDAC != NULL;
        }
        if (!result || structure->fDAC == NULL)
        {
            structure->fDACCount = 0;
        }
    }
    result = result && entry->Read(&structure->fDistance, alignment);
    result = result && entry->Read(&structure->triggerThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixModuleTuningReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixModuleTuningReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixModuleTuningReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadchromatixSagCompensation(entry, &structure->lensSagCompensation, alignment);
    result = result && entry->Read(&structure->enableHysteresisOffset, alignment);
    result = result && entry->Read(&structure->chromatixHysteresisOffset, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFOutdoorConfigurationReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixAFOutdoorConfigurationReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFOutdoorConfigurationReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->EnableOutdoorROITune, alignment);
    result = result && entry->Read(&structure->OutdoorROIRatioX, alignment);
    result = result && entry->Read(&structure->OutdoorROIRatioY, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFOrientationDetectionReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixAFOrientationDetectionReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFOrientationDetectionReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->gravityXLandscapeThreshold, alignment);
    result = result && entry->Read(&structure->gravityYLandscapeThreshold, alignment);
    result = result && entry->Read(&structure->gravityXPortraitThreshold, alignment);
    result = result && entry->Read(&structure->gravityYPortraitThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFFaceDetectionReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixAFFaceDetectionReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFFaceDetectionReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->robustFaceDetectEnable, alignment);
    result = result && entry->Read(&structure->nofaceCountThreshold, alignment);
    result = result && entry->Read(&structure->stableCountThreshold, alignment);
    result = result && entry->Read(&structure->faceDetectionROIPositionChangeThreshold, alignment);
    result = result && entry->Read(&structure->faceLostTriggerEnable, alignment);
    result = result && entry->Read(&structure->faceLostStableThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFFaceDetectionROITuningReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixAFFaceDetectionROITuningReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFFaceDetectionROITuningReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->FDROITune, alignment);
    result = result && entry->Read(&structure->FDROIRatio, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFFaceROIExtensionReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixAFFaceROIExtensionReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFFaceROIExtensionReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->ROIFaceExtensionEnable, alignment);
    result = result && entry->Read(&structure->ROIFaceScaleX, alignment);
    result = result && entry->Read(&structure->ROIFaceScaleY, alignment);
    result = result && entry->Read(&structure->ROIFaceSymmetricX, alignment);
    result = result && entry->Read(&structure->ROIFaceSymmetricY, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixFDPriorityCAF
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixFDPriorityCAF(
    ParameterFileSymbolTableEntry* entry,
    chromatixFDPriorityCAF* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->positionChangeThreshold, alignment);
    result = result && entry->Read(&structure->positionStableThresholdHigh, alignment);
    result = result && entry->Read(&structure->positionStableThresholdLow, alignment);
    result = result && entry->Read(&structure->sizeChangeThreshold, alignment);
    result = result && entry->Read(&structure->oldNewSizeDifferenceThreshold, alignment);
    result = result && entry->Read(&structure->stableCountSize, alignment);
    result = result && entry->Read(&structure->stableCountPosition, alignment);
    result = result && entry->Read(&structure->noFaceWaitThreshold, alignment);
    result = result && entry->Read(&structure->fpsAdjustmentThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixFaceDetectionTuningType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixFaceDetectionTuningType(
    ParameterFileSymbolTableEntry* entry,
    chromatixFaceDetectionTuningType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadchromatixFDPriorityCAF(entry, &structure->faceDetectionPriority, alignment);
    result = result && LoadchromatixAFFaceROIExtensionReserveType(entry, &structure->faceROIExtension, alignment);
    result = result && LoadchromatixAFFaceDetectionROITuningReserveType(entry, &structure->faceDetectionROITuning, alignment);
    result = result && LoadchromatixAFFaceDetectionReserveType(entry, &structure->faceDetection, alignment);
    result = result && LoadchromatixFaceDetectionTuningType_faceHVWeightStruct(entry, &structure->faceHVWeight, alignment);
    result = result && LoadchromatixFaceDetectionTuningType_faceFarEndStruct(entry, &structure->faceFarEnd, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixFaceDetectionTuningType_faceHVWeightStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixFaceDetectionTuningType_faceHVWeightStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixFaceDetectionTuningType::faceHVWeightStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->hWeight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixFaceDetectionTuningType_faceFarEndStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixFaceDetectionTuningType_faceFarEndStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixFaceDetectionTuningType::faceFarEndStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->farEnd, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixFocusModeSearchLimitType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixFocusModeSearchLimitType(
    ParameterFileSymbolTableEntry* entry,
    chromatixFocusModeSearchLimitType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->nearEnd, alignment);
    result = result && entry->Read(&structure->farEnd, alignment);
    result = result && entry->Read(&structure->defaultPosition, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixFOVCorrection
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixFOVCorrection(
    ParameterFileSymbolTableEntry* entry,
    chromatixFOVCorrection* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->fudgeFactor, alignment);
    result = result && entry->Read(&structure->anchorLensPosition1, alignment);
    result = result && entry->Read(&structure->anchorLensPosition2, alignment);
    result = result && entry->Read(&structure->anchorDistanceMM1, alignment);
    result = result && entry->Read(&structure->anchorDistanceMM2, alignment);
    result = result && entry->Read(&structure->focusConvergeStepSizeBrightLight, alignment);
    result = result && entry->Read(&structure->fineSearchStepSizeBrightLight, alignment);
    result = result && entry->Read(&structure->focusConvergeStepSizeLowLight, alignment);
    result = result && entry->Read(&structure->fineSearchStepSizeLowLight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFCommonType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixAFCommonType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFCommonType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->positionNearEnd, alignment);
    result = result && entry->Read(&structure->positionDefaultInMacro, alignment);
    result = result && entry->Read(&structure->positionBoundary, alignment);
    result = result && entry->Read(&structure->positionDefaultInNormal, alignment);
    result = result && entry->Read(&structure->positionFarEnd, alignment);
    result = result && entry->Read(&structure->positionNormalHyperfocal, alignment);
    result = result && entry->Read(&structure->positionMacroRegion, alignment);
    result = result && entry->Read(&structure->lowLightGainThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFAlgoTuningType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadchromatixAFAlgoTuningType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && LoadchromatixAFCommonType(entry, &structure->commonElements, alignment);
    result = result && LoadchromatixFOVCorrection(entry, &structure->FOVCorrection, alignment);

    // Reading Array searchLimit from symbol table
    {
        result = result && entry->Read(&structure->searchLimitCount, alignment);
        structure->searchLimitID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->searchLimit = PARAMETER_NEW chromatixFocusModeSearchLimitType[structure->searchLimitCount];
        }
        if (!result || structure->searchLimit == NULL)
        {
            structure->searchLimitCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->searchLimitCount; i++)
        {
            result = LoadchromatixFocusModeSearchLimitType(pointerEntry, &structure->searchLimit[i], alignment);
        }
    }
    result = result && LoadchromatixFaceDetectionTuningType(entry, &structure->faceDetection, alignment);
    result = result && LoadstatsROIProcessStruct(entry, &structure->statsROIProcess, alignment);
    result = result && LoadchromatixAFOrientationDetectionReserveType(entry, &structure->orientationDetection, alignment);
    result = result && LoadchromatixAFOutdoorConfigurationReserveType(entry, &structure->outdoorROIConfiguration, alignment);
    result = result && LoadchromatixModuleTuningReserveType(entry, &structure->moduleTuning, alignment);
    result = result && entry->Read(&structure->setInvalidFrame, alignment);
    result = result && LoadhandJitterStruct(entry, &structure->handJitter, alignment);
    result = result && LoadspotlightDetectionStruct(entry, &structure->spotlightDetection, alignment);
    result = result && LoadchromatixAFDistancemapControlType(entry, &structure->distanceMapControl, alignment);
    result = result && LoadchromatixAFFocusMapControlType(entry, &structure->focusMapControl, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load statsROIProcessStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadstatsROIProcessStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType::statsROIProcessStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->ROIProcessEnable, alignment);
    result = result && statsroipriority::statsroipriorityClass::LoadchromatixStatsROIPriorityType(entry, &structure->statsROIPriority, alignment);
    result = result && statsroipriority::statsroipriorityClass::LoadchromatixStatsROIPriorityType(entry, &structure->trackROIPriority, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load handJitterStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadhandJitterStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType::handJitterStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadhandJitterStruct_AFSingleStruct(entry, &structure->AFSingle, alignment);
    result = result && LoadhandJitterStruct_HAFFineSearchStruct(entry, &structure->HAFFineSearch, alignment);
    result = result && entry->Read(&structure->samplingRate, alignment);
    result = result && entry->Read(&structure->reportingRate, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load handJitterStruct_AFSingleStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadhandJitterStruct_AFSingleStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType::handJitterStruct::AFSingleStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->maxFVInBeginning, alignment);
    result = result && LoadhandJitterStruct_AFSingleStruct_coarseSearchStruct(entry, &structure->coarseSearch, alignment);
    result = result && LoadhandJitterStruct_AFSingleStruct_fineSearchStruct(entry, &structure->fineSearch, alignment);
    result = result && entry->Read(&structure->redoRateThreshold, alignment);
    result = result && entry->Read(&structure->handleNeedCount, alignment);
    result = result && entry->Read(&structure->resetDataBeforeFineSearch, alignment);
    result = result && entry->Read(&structure->workingExposureIndex, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load handJitterStruct_AFSingleStruct_coarseSearchStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadhandJitterStruct_AFSingleStruct_coarseSearchStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType::handJitterStruct::AFSingleStruct::coarseSearchStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->minSampleSize, alignment);
    result = result && entry->Read(&structure->currentGyroscopeThreshold, alignment);
    result = result && entry->Read(&structure->currentGyroscopeSTDThreshold, alignment);
    result = result && entry->Read(&structure->gyroscopeThresholdForDifferenceRatio, alignment);
    result = result && entry->Read(&structure->gyroscodeDifferenceRatioThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load handJitterStruct_AFSingleStruct_fineSearchStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadhandJitterStruct_AFSingleStruct_fineSearchStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType::handJitterStruct::AFSingleStruct::fineSearchStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->minSampleSize, alignment);
    result = result && entry->Read(&structure->currentGyroscopeThreshold, alignment);
    result = result && entry->Read(&structure->currentGyroscopeSTDThreshold, alignment);
    result = result && entry->Read(&structure->gyroscopeThresholdForDifferenceRatio, alignment);
    result = result && entry->Read(&structure->gyroscodeDifferenceRatioThreshold, alignment);
    result = result && LoadhandJitterStruct_AFSingleStruct_fineSearchStruct_FVNormalizedStruct(entry, &structure->FVNormalized, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load handJitterStruct_AFSingleStruct_fineSearchStruct_FVNormalizedStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadhandJitterStruct_AFSingleStruct_fineSearchStruct_FVNormalizedStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType::handJitterStruct::AFSingleStruct::fineSearchStruct::FVNormalizedStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->highGyroscopeDifferenceThreshold, alignment);
    result = result && entry->Read(&structure->lowGyroscopeDifferenceThreshold, alignment);
    result = result && entry->Read(&structure->highGryoscopeFVWeight, alignment);
    result = result && entry->Read(&structure->weightType, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load handJitterStruct_HAFFineSearchStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadhandJitterStruct_HAFFineSearchStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType::handJitterStruct::HAFFineSearchStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && LoadhandJitterStruct_HAFFineSearchStruct_fineSearchStruct(entry, &structure->fineSearch, alignment);
    result = result && entry->Read(&structure->handleNeedCount, alignment);
    result = result && entry->Read(&structure->workingExposureIndex, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load handJitterStruct_HAFFineSearchStruct_fineSearchStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadhandJitterStruct_HAFFineSearchStruct_fineSearchStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType::handJitterStruct::HAFFineSearchStruct::fineSearchStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->minSampleSize, alignment);
    result = result && entry->Read(&structure->currentGyroscopeThreshold, alignment);
    result = result && entry->Read(&structure->currentGyroscopeSTDThreshold, alignment);
    result = result && entry->Read(&structure->gyroscopeThresholdForDifferenceRatio, alignment);
    result = result && entry->Read(&structure->gyroscodeDifferenceRatioThreshold, alignment);
    result = result && LoadhandJitterStruct_HAFFineSearchStruct_fineSearchStruct_FVNormalizedStruct(entry, &structure->FVNormalized, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load handJitterStruct_HAFFineSearchStruct_fineSearchStruct_FVNormalizedStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadhandJitterStruct_HAFFineSearchStruct_fineSearchStruct_FVNormalizedStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType::handJitterStruct::HAFFineSearchStruct::fineSearchStruct::FVNormalizedStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->highGyroscopeDifferenceThreshold, alignment);
    result = result && entry->Read(&structure->lowGyroscopeDifferenceThreshold, alignment);
    result = result && entry->Read(&structure->highGryoscopeFVWeight, alignment);
    result = result && entry->Read(&structure->weightType, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load spotlightDetectionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFAlgoTuningTypeClass::LoadspotlightDetectionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFAlgoTuningType::spotlightDetectionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->statsType, alignment);
    result = result && entry->Read(&structure->bgStatsThreshAutoConvertEnable, alignment);
    result = result && entry->Read(&structure->bgStatsBrightRegionSatRatioThresh, alignment);
    result = result && entry->Read(&structure->far_flat_th, alignment);
    result = result && entry->Read(&structure->marco_flat_th, alignment);
    result = result && entry->Read(&structure->inc_flat_th, alignment);
    result = result && entry->Read(&structure->dec_flat_th, alignment);
    result = result && entry->Read(&structure->spotlight_zone_start_h, alignment);
    result = result && entry->Read(&structure->spotlight_zone_end_h, alignment);
    result = result && entry->Read(&structure->spotlight_zone_start_v, alignment);
    result = result && entry->Read(&structure->spotlight_zone_end_v, alignment);
    result = result && entry->Read(&structure->background_zone_start_h, alignment);
    result = result && entry->Read(&structure->background_zone_end_h, alignment);
    result = result && entry->Read(&structure->background_zone_start_v, alignment);
    result = result && entry->Read(&structure->background_zone_end_v, alignment);
    result = result && entry->Read(&structure->exposure_index_trigger_th, alignment);
    result = result && entry->Read(&structure->background_luma_avg_th, alignment);
    result = result && entry->Read(&structure->region_low_grey_th, alignment);
    result = result && entry->Read(&structure->region_low_dark_th, alignment);
    result = result && entry->Read(&structure->background_low_grey_pct_th, alignment);
    result = result && entry->Read(&structure->background_dark_grey_pct_th, alignment);
    result = result && entry->Read(&structure->bright_region_luma_delta_background_zone, alignment);
    result = result && entry->Read(&structure->bright_region_luma_delta_spotlight_zone_low_grey, alignment);
    result = result && entry->Read(&structure->bright_region_luma_delta_spotlight_zone_dark_grey, alignment);
    result = result && entry->Read(&structure->square_cluster_inc_size, alignment);
    result = result && entry->Read(&structure->vertical_cluster_inc_size, alignment);
    result = result && entry->Read(&structure->horizontal_cluster_inc_size, alignment);
    result = result && entry->Read(&structure->square_cluster_pct_th, alignment);
    result = result && entry->Read(&structure->vertical_cluster_pct_th, alignment);
    result = result && entry->Read(&structure->horizontal_cluster_pct_th, alignment);
    result = result && entry->Read(&structure->spotlight_detect_cnt_th, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixAFFocusMapControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFAlgoTuningTypeClass::UnloadchromatixAFFocusMapControlType(
    chromatixAFFocusMapControlType* structure)
{
    UnloadchromatixAFFocusMapControlType_defocusTableStruct(&structure->defocusTable);
    UnloadchromatixAFFocusMapControlType_confidenceTableStruct(&structure->confidenceTable);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixAFFocusMapControlType_defocusTableStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFAlgoTuningTypeClass::UnloadchromatixAFFocusMapControlType_defocusTableStruct(
    chromatixAFFocusMapControlType::defocusTableStruct* structure)
{
    PARAMETER_DELETE[] structure->triggerEntries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixAFFocusMapControlType_confidenceTableStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFAlgoTuningTypeClass::UnloadchromatixAFFocusMapControlType_confidenceTableStruct(
    chromatixAFFocusMapControlType::confidenceTableStruct* structure)
{
    PARAMETER_DELETE[] structure->triggerEntries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixSagCompensation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFAlgoTuningTypeClass::UnloadchromatixSagCompensation(
    chromatixSagCompensation* structure)
{
    PARAMETER_DELETE[] structure->fDAC;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixModuleTuningReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFAlgoTuningTypeClass::UnloadchromatixModuleTuningReserveType(
    chromatixModuleTuningReserveType* structure)
{
    UnloadchromatixSagCompensation(&structure->lensSagCompensation);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixAFAlgoTuningType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFAlgoTuningTypeClass::UnloadchromatixAFAlgoTuningType(
    chromatixAFAlgoTuningType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    PARAMETER_DELETE[] structure->searchLimit;
    UnloadstatsROIProcessStruct(&structure->statsROIProcess);
    UnloadchromatixModuleTuningReserveType(&structure->moduleTuning);
    UnloadchromatixAFFocusMapControlType(&structure->focusMapControl);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFAlgoTuningTypeClass::Unloadparameter_versionStruct(
    chromatixAFAlgoTuningType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload statsROIProcessStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFAlgoTuningTypeClass::UnloadstatsROIProcessStruct(
    chromatixAFAlgoTuningType::statsROIProcessStruct* structure)
{
    statsroipriority::statsroipriorityClass::UnloadchromatixStatsROIPriorityType(&structure->statsROIPriority);
    statsroipriority::statsroipriorityClass::UnloadchromatixStatsROIPriorityType(&structure->trackROIPriority);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixAFAlgoTuningTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixAFAlgoTuningTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixAFAlgoTuningTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixAFAlgoTuningType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AFALGOTUNINGELEMENTS_NAMESPACE_END
