////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  modscconvv1.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "modscconvv1.h"
#include "parametersetmanager.h"

MODSCCONVV1_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixSCConvV1TypeClass::chromatixSCConvV1TypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(moduleID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(enable);
    PARAMETER_INITIALIZE(detector);
    PARAMETER_INITIALIZE(converge);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixSCConvV1TypeClass::chromatixSCConvV1TypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(moduleID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(enable);
    PARAMETER_INITIALIZE(detector);
    PARAMETER_INITIALIZE(converge);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixSCConvV1TypeClass::~chromatixSCConvV1TypeClass()
{
    UnloadchromatixSCConvV1Type(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixSCConvV1TypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "awbSceneChangeConvergeV1")) == 0)
    {
        name = "awbSceneChangeConvergeV1";
    }
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "scConv")) == 0)
    {
        name = "scConv";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FIRFilterConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSCConvV1TypeClass::LoadFIRFilterConfigType(
    ParameterFileSymbolTableEntry* entry,
    FIRFilterConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->samples, alignment);

    // Reading Array coefficient from symbol table
    {
        result = result && entry->Read(&structure->coefficientCount, alignment);
        structure->coefficientID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->coefficient = pointerEntry->ReadArray<FLOAT>(structure->coefficientCount, alignment);
            result = structure->coefficient != NULL;
        }
        if (!result || structure->coefficient == NULL)
        {
            structure->coefficientCount = 0;
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load MedianFilterConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSCConvV1TypeClass::LoadMedianFilterConfigType(
    ParameterFileSymbolTableEntry* entry,
    MedianFilterConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->samples, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load IIRFilterConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSCConvV1TypeClass::LoadIIRFilterConfigType(
    ParameterFileSymbolTableEntry* entry,
    IIRFilterConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->samplesInput, alignment);

    // Reading Array coeffInput from symbol table
    {
        result = result && entry->Read(&structure->coeffInputCount, alignment);
        structure->coeffInputID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->coeffInput = pointerEntry->ReadArray<FLOAT>(structure->coeffInputCount, alignment);
            result = structure->coeffInput != NULL;
        }
        if (!result || structure->coeffInput == NULL)
        {
            structure->coeffInputCount = 0;
        }
    }
    result = result && entry->Read(&structure->samplesOutput, alignment);

    // Reading Array coeffOutput from symbol table
    {
        result = result && entry->Read(&structure->coeffOutputCount, alignment);
        structure->coeffOutputID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->coeffOutput = pointerEntry->ReadArray<FLOAT>(structure->coeffOutputCount, alignment);
            result = structure->coeffOutput != NULL;
        }
        if (!result || structure->coeffOutput == NULL)
        {
            structure->coeffOutputCount = 0;
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FilterConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSCConvV1TypeClass::LoadFilterConfigType(
    ParameterFileSymbolTableEntry* entry,
    FilterConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->type = (awbFilterType)entry->ReadEnum(&result, alignment);
    result = result && LoadFIRFilterConfigType(entry, &structure->fir, alignment);
    result = result && LoadIIRFilterConfigType(entry, &structure->iir, alignment);
    result = result && LoadMedianFilterConfigType(entry, &structure->median, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load SCDetectorConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSCConvV1TypeClass::LoadSCDetectorConfigType(
    ParameterFileSymbolTableEntry* entry,
    SCDetectorConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->type = (awbSCDTriggerType)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->fixedBaselineEn, alignment);
    result = result && entry->Read(&structure->fixedBaselineValue, alignment);
    result = result && entry->Read(&structure->triggerTh, alignment);
    result = result && entry->Read(&structure->consCountTh, alignment);
    result = result && entry->Read(&structure->postSCDFramesTh, alignment);
    result = result && entry->Read(&structure->postSCDStableTh, alignment);
    result = result && entry->Read(&structure->holdTime, alignment);
    result = result && entry->Read(&structure->strictHoldTime, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FilterDetectorConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSCConvV1TypeClass::LoadFilterDetectorConfigType(
    ParameterFileSymbolTableEntry* entry,
    FilterDetectorConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && LoadFilterConfigType(entry, &structure->filter, alignment);
    result = result && LoadSCDetectorConfigType(entry, &structure->detector, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load SceneChangeDetectorConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSCConvV1TypeClass::LoadSceneChangeDetectorConfigType(
    ParameterFileSymbolTableEntry* entry,
    SceneChangeDetectorConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->Aggregate = (awbAggregateType)entry->ReadEnum(&result, alignment);

    // Reading Array filterDetector from symbol table
    {
        result = result && entry->Read(&structure->filterDetectorCount, alignment);
        structure->filterDetectorID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->filterDetector = PARAMETER_NEW FilterDetectorConfigType[structure->filterDetectorCount];
        }
        if (!result || structure->filterDetector == NULL)
        {
            structure->filterDetectorCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->filterDetectorCount; i++)
        {
            result = LoadFilterDetectorConfigType(pointerEntry, &structure->filterDetector[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load SCConvType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSCConvV1TypeClass::LoadSCConvType(
    ParameterFileSymbolTableEntry* entry,
    SCConvType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->slowConvReduceFactor, alignment);
    result = result && entry->Read(&structure->fastConvBoostFactor, alignment);
    result = result && entry->Read(&structure->fastConvergePercTh, alignment);
    result = result && entry->Read(&structure->waitFramesBeforeSCStart, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixSCConvV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSCConvV1TypeClass::LoadchromatixSCConvV1Type(
    ParameterFileSymbolTableEntry* entry,
    chromatixSCConvV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadmoduleIDType(entry, &structure->moduleID, alignment);
    result = result && Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && entry->Read(&structure->enable, alignment);
    result = result && LoadSceneChangeDetectorConfigType(entry, &structure->detector, alignment);
    result = result && LoadSCConvType(entry, &structure->converge, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSCConvV1TypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixSCConvV1Type::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload FIRFilterConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixSCConvV1TypeClass::UnloadFIRFilterConfigType(
    FIRFilterConfigType* structure)
{
    PARAMETER_DELETE[] structure->coefficient;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload IIRFilterConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixSCConvV1TypeClass::UnloadIIRFilterConfigType(
    IIRFilterConfigType* structure)
{
    PARAMETER_DELETE[] structure->coeffInput;
    PARAMETER_DELETE[] structure->coeffOutput;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload FilterConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixSCConvV1TypeClass::UnloadFilterConfigType(
    FilterConfigType* structure)
{
    UnloadFIRFilterConfigType(&structure->fir);
    UnloadIIRFilterConfigType(&structure->iir);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload FilterDetectorConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixSCConvV1TypeClass::UnloadFilterDetectorConfigType(
    FilterDetectorConfigType* structure)
{
    UnloadFilterConfigType(&structure->filter);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload SceneChangeDetectorConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixSCConvV1TypeClass::UnloadSceneChangeDetectorConfigType(
    SceneChangeDetectorConfigType* structure)
{
    for (UINT32 i = 0; i < structure->filterDetectorCount; i++)
    {
        UnloadFilterDetectorConfigType(&structure->filterDetector[i]);
    }
    PARAMETER_DELETE[] structure->filterDetector;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixSCConvV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixSCConvV1TypeClass::UnloadchromatixSCConvV1Type(
    chromatixSCConvV1Type* structure)
{
    UnloadSceneChangeDetectorConfigType(&structure->detector);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixSCConvV1TypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixSCConvV1TypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixSCConvV1TypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixSCConvV1Type(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


MODSCCONVV1_NAMESPACE_END
