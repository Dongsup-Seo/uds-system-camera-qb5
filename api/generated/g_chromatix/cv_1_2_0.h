////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  cv_1_2_0.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CV_1_2_0_H
#define CV_1_2_0_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "ispglobalelements.h"

#define CV_1_2_0_NAMESPACE_BEGIN namespace cv_1_2_0 {
#define CV_1_2_0_NAMESPACE_END }

CV_1_2_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// cv12_rgn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct cv12_rgn_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// r_to_y
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Coefficients for luma calculation
    /// Type:          float
    /// Default Value: 0.2990
    /// Range:         [-7.99,7.99]
    /// Bit Depth:     12sQ8
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT r_to_y;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// g_to_y
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Coefficients for luma calculation
    /// Type:          float
    /// Default Value: 0.5870
    /// Range:         [-7.99,7.99]
    /// Bit Depth:     12sQ8
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT g_to_y;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// b_to_y
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Coefficients for luma calculation
    /// Type:          float
    /// Default Value: 0.1140
    /// Range:         [-7.99,7.99]
    /// Bit Depth:     12sQ8
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT b_to_y;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// y_offset
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Constant offset for luma calculation
    /// Type:          float
    /// Default Value: 0
    /// Range:         [-16384,16383]
    /// Bit Depth:     (9+e)sQ0
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT y_offset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ap
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Chroma enhancement matrix parameters
    /// Type:          float
    /// Default Value: 0.5000
    /// Range:         [-7.99,7.99]
    /// Bit Depth:     12sQ8
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT ap;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// am
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Chroma enhancement matrix parameters
    /// Type:          float
    /// Default Value: 0.5000
    /// Range:         [-7.99,7.99]
    /// Bit Depth:     12sQ8
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT am;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bp
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Chroma enhancement matrix parameters
    /// Type:          float
    /// Default Value: -0.3380
    /// Range:         [-7.99,7.99]
    /// Bit Depth:     12sQ8
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT bp;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bm
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Chroma enhancement matrix parameters
    /// Type:          float
    /// Default Value: -0.3380
    /// Range:         [-7.99,7.99]
    /// Bit Depth:     12sQ8
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT bm;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// cp
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Chroma enhancement matrix parameters
    /// Type:          float
    /// Default Value: 0.5000
    /// Range:         [-7.99,7.99]
    /// Bit Depth:     12sQ8
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT cp;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// cm
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Chroma enhancement matrix parameters
    /// Type:          float
    /// Default Value: 0.5000
    /// Range:         [-7.99,7.99]
    /// Bit Depth:     12sQ8
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT cm;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dp
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Chroma enhancement matrix parameters
    /// Type:          float
    /// Default Value: -0.1620
    /// Range:         [-7.99,7.99]
    /// Bit Depth:     12sQ8
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT dp;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dm
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Chroma enhancement matrix parameters
    /// Type:          float
    /// Default Value: -0.1620
    /// Range:         [-7.99,7.99]
    /// Bit Depth:     12sQ8
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT dm;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// kcr
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Constant offset for CSC matrix
    /// Type:          float
    /// Default Value: 512
    /// Range:         [-65536,65535]
    /// Bit Depth:     (11+e)sQ0
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT kcr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// kcb
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Constant offset for CSC matrix
    /// Type:          float
    /// Default Value: 512
    /// Range:         [-65536,65535]
    /// Bit Depth:     (11+e)sQ0
    /// Conversion:    no conversion needed
    /// Notes:         See special effect defaults below
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT kcb;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_cv12_cct_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_cv12_cct_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// cct_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type   cct_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// cv12_rgn_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    cv12_rgn_dataType cv12_rgn_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_cv12_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_cv12_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::trigger_pt_type_aec aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// aec_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct aec_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_cv12_cct_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                 mod_cv12_cct_dataCount;
        UINT32                 mod_cv12_cct_dataID;
        mod_cv12_cct_dataType* mod_cv12_cct_data;
    } aec_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_cv12_led_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_cv12_led_dataType
{
    ispglobalelements::trigger_pt_type_led_idx led_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// led_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct led_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_cv12_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                 mod_cv12_aec_dataCount;
        UINT32                 mod_cv12_aec_dataID;
        mod_cv12_aec_dataType* mod_cv12_aec_data;
    } led_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_cv12_hdr_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_cv12_hdr_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type_aec_hdr hdr_aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct hdr_aec_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_cv12_led_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                 mod_cv12_led_dataCount;
        UINT32                 mod_cv12_led_dataID;
        mod_cv12_led_dataType* mod_cv12_led_data;
    } hdr_aec_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_cv12_drc_gain_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_cv12_drc_gain_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// drc_gain_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type drc_gain_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// drc_gain_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct drc_gain_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_cv12_hdr_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                     mod_cv12_hdr_aec_dataCount;
        UINT32                     mod_cv12_hdr_aec_dataID;
        mod_cv12_hdr_aec_dataType* mod_cv12_hdr_aec_data;
    } drc_gain_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_cv12_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_cv12_coreType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mod_cv12_drc_gain_data - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                      mod_cv12_drc_gain_dataCount;
    UINT32                      mod_cv12_drc_gain_dataID;
    mod_cv12_drc_gain_dataType* mod_cv12_drc_gain_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_cv12Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_cv12Type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable_section
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct enable_sectionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        globalelements::enable_flag_type cv_enable;
    } enable_section;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_variables
    ///
    /// Default Value: control_drc_gain, control_aec_exp_sensitivity_ratio, control_led_idx, control_lux_idx, control_cct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_variablesStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// control_var_type - Array
        /// Default Value: control_drc_gain, control_aec_exp_sensitivity_ratio, control_led_idx, control_lux_idx, control_cct
        /// Length:        5
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        enum class control_var_typeEnum
        {
            control_lux_idx                   = 0,
            control_gain                      = 1,
            control_drc_gain                  = 2,
            control_exp_time_ratio            = 3,
            control_aec_exp_sensitivity_ratio = 4,
            control_exp_gain_ratio            = 5,
            control_cct                       = 6,
            control_led_idx                   = 9
        } control_var_type[5];
    } control_variables;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_method
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_methodStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_exp_control
        /// Default Value: control_lux_idx
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_type     aec_exp_control;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_hdr_control
        /// Default Value: control_aec_exp_sensitivity_ratio
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_hdr_type aec_hdr_control;
    } control_method;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// private_information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct private_informationStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// led_sensitivity_trigger
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::trigger_pt_type led_sensitivity_trigger;
    } private_information;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_cv12_core
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_cv12_coreType chromatix_cv12_core;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_cv12TypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatix_cv12TypeClass : public ParameterModule, public chromatix_cv12Type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 1;
    static const UINT16 MINOR = 2;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_cv12TypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_cv12TypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatix_cv12TypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load cv12_rgn_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcv12_rgn_dataType(
        ParameterFileSymbolTableEntry* entry,
        cv12_rgn_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cv12_cct_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cv12_cct_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_cv12_cct_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cv12_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cv12_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_cv12_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cv12_aec_dataType_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cv12_aec_dataType_aec_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_cv12_aec_dataType::aec_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cv12_led_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cv12_led_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_cv12_led_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cv12_led_dataType_led_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cv12_led_dataType_led_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_cv12_led_dataType::led_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cv12_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cv12_hdr_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_cv12_hdr_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cv12_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cv12_hdr_aec_dataType_hdr_aec_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_cv12_hdr_aec_dataType::hdr_aec_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cv12_drc_gain_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cv12_drc_gain_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_cv12_drc_gain_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cv12_drc_gain_dataType_drc_gain_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cv12_drc_gain_dataType_drc_gain_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_cv12_drc_gain_dataType::drc_gain_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_cv12_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_cv12_coreType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cv12_coreType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_cv12Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_cv12Type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cv12Type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load enable_sectionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadenable_sectionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cv12Type::enable_sectionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cv12Type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cv12Type::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_variablesStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_variablesStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cv12Type::control_variablesStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_methodStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_methodStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cv12Type::control_methodStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load private_informationStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadprivate_informationStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cv12Type::private_informationStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_cv12_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_cv12_aec_dataType(
        mod_cv12_aec_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_cv12_aec_dataType_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_cv12_aec_dataType_aec_dataStruct(
        mod_cv12_aec_dataType::aec_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_cv12_led_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_cv12_led_dataType(
        mod_cv12_led_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_cv12_led_dataType_led_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_cv12_led_dataType_led_dataStruct(
        mod_cv12_led_dataType::led_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_cv12_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_cv12_hdr_aec_dataType(
        mod_cv12_hdr_aec_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_cv12_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_cv12_hdr_aec_dataType_hdr_aec_dataStruct(
        mod_cv12_hdr_aec_dataType::hdr_aec_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_cv12_drc_gain_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_cv12_drc_gain_dataType(
        mod_cv12_drc_gain_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_cv12_drc_gain_dataType_drc_gain_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_cv12_drc_gain_dataType_drc_gain_dataStruct(
        mod_cv12_drc_gain_dataType::drc_gain_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_cv12_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_cv12_coreType(
        chromatix_cv12_coreType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_cv12Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_cv12Type(
        chromatix_cv12Type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatix_cv12Type::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatix_cv12TypeClass

CV_1_2_0_NAMESPACE_END
#endif // CV_1_2_0_H

