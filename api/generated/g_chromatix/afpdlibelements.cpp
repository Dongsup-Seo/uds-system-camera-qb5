////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afpdlibelements.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "afpdlibelements.h"
#include "parametersetmanager.h"

AFPDLIBELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixPDLibTypeClass::chromatixPDLibTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(preProcess);
    PARAMETER_INITIALIZE(preProcessVertical);
    PARAMETER_INITIALIZE(correlation);
    PARAMETER_INITIALIZE(correlationVertical);
    PARAMETER_INITIALIZE(postProcess);
    PARAMETER_INITIALIZE(postProcessVertical);
    PARAMETER_INITIALIZE(adaptiveK);
    PARAMETER_INITIALIZE(enablePeripheralWindows);
    PARAMETER_INITIALIZE(singleWindowProcessingLevel);
    PARAMETER_INITIALIZE(singleWindowProcessingLevelVertical);
    PARAMETER_INITIALIZE(gridProcessingLevel);
    PARAMETER_INITIALIZE(gridProcessingLevelVertical);
    PARAMETER_INITIALIZE(PeripheralProcessing);
    PARAMETER_INITIALIZE(PeripheralProcessingVertical);
    PARAMETER_INITIALIZE(HVControl);
    PARAMETER_INITIALIZE(skipControl);
    PARAMETER_INITIALIZE(hardwareGeometry);
    PARAMETER_INITIALIZE(hardwarePatternCount);
    PARAMETER_INITIALIZE(hardwarePatternID);
    PARAMETER_INITIALIZE(hardwarePattern);
    PARAMETER_INITIALIZE(enableFocusMaps);
    PARAMETER_INITIALIZE(extensionParamCount);
    PARAMETER_INITIALIZE(extensionParamID);
    PARAMETER_INITIALIZE(extensionParam);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixPDLibTypeClass::chromatixPDLibTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(preProcess);
    PARAMETER_INITIALIZE(preProcessVertical);
    PARAMETER_INITIALIZE(correlation);
    PARAMETER_INITIALIZE(correlationVertical);
    PARAMETER_INITIALIZE(postProcess);
    PARAMETER_INITIALIZE(postProcessVertical);
    PARAMETER_INITIALIZE(adaptiveK);
    PARAMETER_INITIALIZE(enablePeripheralWindows);
    PARAMETER_INITIALIZE(singleWindowProcessingLevel);
    PARAMETER_INITIALIZE(singleWindowProcessingLevelVertical);
    PARAMETER_INITIALIZE(gridProcessingLevel);
    PARAMETER_INITIALIZE(gridProcessingLevelVertical);
    PARAMETER_INITIALIZE(PeripheralProcessing);
    PARAMETER_INITIALIZE(PeripheralProcessingVertical);
    PARAMETER_INITIALIZE(HVControl);
    PARAMETER_INITIALIZE(skipControl);
    PARAMETER_INITIALIZE(hardwareGeometry);
    PARAMETER_INITIALIZE(hardwarePattern);
    PARAMETER_INITIALIZE(enableFocusMaps);
    PARAMETER_INITIALIZE(extensionParam);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixPDLibTypeClass::~chromatixPDLibTypeClass()
{
    UnloadchromatixPDLibType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixPDLibTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "chromatixPDLib")) == 0)
    {
        name = "chromatixPDLib";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDAFHardwareResamplerInstruction
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixPDAFHardwareResamplerInstruction(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDAFHardwareResamplerInstruction* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array S from symbol table
    {
        result = entry->Read(&structure->SCount, alignment);
        structure->SID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->S = pointerEntry->ReadArray<INT32>(structure->SCount, alignment);
            result = structure->S != NULL;
        }
        if (!result || structure->S == NULL)
        {
            structure->SCount = 0;
        }
    }

    // Reading Array O from symbol table
    {
        result = result && entry->Read(&structure->OCount, alignment);
        structure->OID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->O = pointerEntry->ReadArray<FLOAT>(structure->OCount, alignment);
            result = structure->O != NULL;
        }
        if (!result || structure->O == NULL)
        {
            structure->OCount = 0;
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDAFHardwareResampler
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixPDAFHardwareResampler(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDAFHardwareResampler* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->inputBlockWidth, alignment);
    result = result && entry->Read(&structure->inputBlockHeight, alignment);
    result = result && entry->Read(&structure->outputBlockWidth, alignment);
    result = result && entry->Read(&structure->outputBlockHeight, alignment);

    // Reading Array instructions from symbol table
    {
        result = result && entry->Read(&structure->instructionsCount, alignment);
        structure->instructionsID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->instructions = PARAMETER_NEW chromatixPDAFHardwareResamplerInstruction[structure->instructionsCount];
        }
        if (!result || structure->instructions == NULL)
        {
            structure->instructionsCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->instructionsCount; i++)
        {
            result = LoadchromatixPDAFHardwareResamplerInstruction(pointerEntry, &structure->instructions[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDAFHardwarePixelSeparator
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixPDAFHardwarePixelSeparator(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDAFHardwarePixelSeparator* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->inputBlockWidth, alignment);
    result = result && entry->Read(&structure->inputBlockHeight, alignment);
    result = result && entry->Read(&structure->outputBlockWidth, alignment);
    result = result && entry->Read(&structure->outputBlockHeight, alignment);

    // Reading Array L_map from symbol table
    {
        result = result && entry->Read(&structure->L_mapCount, alignment);
        structure->L_mapID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->L_map = pointerEntry->ReadArray<INT32>(structure->L_mapCount, alignment);
            result = structure->L_map != NULL;
        }
        if (!result || structure->L_map == NULL)
        {
            structure->L_mapCount = 0;
        }
    }

    // Reading Array R_map from symbol table
    {
        result = result && entry->Read(&structure->R_mapCount, alignment);
        structure->R_mapID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->R_map = pointerEntry->ReadArray<INT32>(structure->R_mapCount, alignment);
            result = structure->R_map != NULL;
        }
        if (!result || structure->R_map == NULL)
        {
            structure->R_mapCount = 0;
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDAFHardwareLineExtractor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixPDAFHardwareLineExtractor(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDAFHardwareLineExtractor* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->XOffset, alignment);
    result = result && entry->Read(&structure->YOffset, alignment);
    result = result && entry->Read(&structure->HalfLine, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDAFHardwarePixelExtractor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixPDAFHardwarePixelExtractor(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDAFHardwarePixelExtractor* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->outputWidth, alignment);
    result = result && entry->Read(&structure->outputHeight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTuningHardwarePattern
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixTuningHardwarePattern(
    ParameterFileSymbolTableEntry* entry,
    chromatixTuningHardwarePattern* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadchromatixPDAFHardwarePixelExtractor(entry, &structure->pixelExtractor, alignment);

    // Reading Array lineExtractor from symbol table
    {
        result = result && entry->Read(&structure->lineExtractorCount, alignment);
        structure->lineExtractorID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->lineExtractor = PARAMETER_NEW chromatixPDAFHardwareLineExtractor[structure->lineExtractorCount];
        }
        if (!result || structure->lineExtractor == NULL)
        {
            structure->lineExtractorCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->lineExtractorCount; i++)
        {
            result = LoadchromatixPDAFHardwareLineExtractor(pointerEntry, &structure->lineExtractor[i], alignment);
        }
    }
    result = result && LoadchromatixPDAFHardwarePixelSeparator(entry, &structure->pixelSeparator, alignment);
    result = result && LoadchromatixPDAFHardwareResampler(entry, &structure->resampler, alignment);
    result = result && entry->Read(&structure->gridWidthScaleRatio, alignment);
    result = result && entry->Read(&structure->gridHeightScaleRatio, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTuningHardwareGeometry
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixTuningHardwareGeometry(
    ParameterFileSymbolTableEntry* entry,
    chromatixTuningHardwareGeometry* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enabldHardwarePDModule, alignment);
    result = result && entry->Read(&structure->enableOverlap, alignment);
    result = result && entry->Read(&structure->numOfHoriGrids, alignment);
    result = result && entry->Read(&structure->numOfVertGrids, alignment);
    result = result && entry->Read(&structure->horiNumOfRGNInGridUnit, alignment);
    result = result && entry->Read(&structure->vertNumOfRGNInGridUnit, alignment);
    result = result && entry->Read(&structure->horiRegionOffset, alignment);
    result = result && entry->Read(&structure->vertRegionOffset, alignment);
    result = result && entry->Read(&structure->widhtOfRegion, alignment);
    result = result && entry->Read(&structure->heightOfRegion, alignment);
    result = result && entry->Read(&structure->horiNumOfRegion, alignment);
    result = result && entry->Read(&structure->vertNumOfRegion, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTuningSkipControl
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixTuningSkipControl(
    ParameterFileSymbolTableEntry* entry,
    chromatixTuningSkipControl* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->staticFrameCountThres, alignment);
    result = result && entry->Read(&structure->maxFrameRate, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixHVConfWeight
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixHVConfWeight(
    ParameterFileSymbolTableEntry* entry,
    chromatixHVConfWeight* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->weight, alignment);
    result = result && entry->Read(&structure->confThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixHVControl
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixHVControl(
    ParameterFileSymbolTableEntry* entry,
    chromatixHVControl* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->PDProcessingAxis = (chromatixPDAxisControl)entry->ReadEnum(&result, alignment);

    // Reading Array horizontalConfWeightTuning from symbol table
    {
        result = result && entry->Read(&structure->horizontalConfWeightTuningCount, alignment);
        structure->horizontalConfWeightTuningID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->horizontalConfWeightTuning = PARAMETER_NEW chromatixHVConfWeight[structure->horizontalConfWeightTuningCount];
        }
        if (!result || structure->horizontalConfWeightTuning == NULL)
        {
            structure->horizontalConfWeightTuningCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->horizontalConfWeightTuningCount; i++)
        {
            result = LoadchromatixHVConfWeight(pointerEntry, &structure->horizontalConfWeightTuning[i], alignment);
        }
    }

    // Reading Array verticalConfWeightTuning from symbol table
    {
        result = result && entry->Read(&structure->verticalConfWeightTuningCount, alignment);
        structure->verticalConfWeightTuningID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->verticalConfWeightTuning = PARAMETER_NEW chromatixHVConfWeight[structure->verticalConfWeightTuningCount];
        }
        if (!result || structure->verticalConfWeightTuning == NULL)
        {
            structure->verticalConfWeightTuningCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->verticalConfWeightTuningCount; i++)
        {
            result = LoadchromatixHVConfWeight(pointerEntry, &structure->verticalConfWeightTuning[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTuningProcessLevel
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixTuningProcessLevel(
    ParameterFileSymbolTableEntry* entry,
    chromatixTuningProcessLevel* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->processingMode = (chromatixPDProcessingMode)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->dynamicLevel, alignment);
    result = result && entry->Read(&structure->staticLevel, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTuningAdaptiveK
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixTuningAdaptiveK(
    ParameterFileSymbolTableEntry* entry,
    chromatixTuningAdaptiveK* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->timeoutFrameCntThres, alignment);
    result = result && entry->Read(&structure->filterSize, alignment);
    result = result && entry->Read(&structure->state0StableCntThres, alignment);
    result = result && entry->Read(&structure->state1StableCntThres, alignment);
    result = result && entry->Read(&structure->minimumLensPosDelta, alignment);
    result = result && entry->Read(&structure->state0ConfThres, alignment);
    result = result && entry->Read(&structure->state1ConfThres, alignment);
    result = result && entry->Read(&structure->state0PhaseDiffThres, alignment);
    result = result && entry->Read(&structure->state1PhaseDiffThres, alignment);
    result = result && entry->Read(&structure->tolNearTargetUpperBound, alignment);
    result = result && entry->Read(&structure->tolNearTargetLowerBound, alignment);
    result = result && entry->Read(&structure->tolFarTargetUpperBound, alignment);
    result = result && entry->Read(&structure->tolFarTargetLowerBound, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDLIBPostprocessingTemporalFilterSetting
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixPDLIBPostprocessingTemporalFilterSetting(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDLIBPostprocessingTemporalFilterSetting* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = globalelements::globalelementsClass::Loadtrigger_pt_type_aec(entry, &structure->AECTrigger, alignment);
    result = result && entry->Read(&structure->dynamicWeight, alignment);
    result = result && entry->Read(&structure->staticWeight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTemporalFilterTrigger
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixTemporalFilterTrigger(
    ParameterFileSymbolTableEntry* entry,
    chromatixTemporalFilterTrigger* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 3; i++)
    {
        result = LoadchromatixPDLIBPostprocessingTemporalFilterSetting(entry, &structure->temporalFilterSet[i], alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTuningPostProcess
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixTuningPostProcess(
    ParameterFileSymbolTableEntry* entry,
    chromatixTuningPostProcess* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->biasVectorStrength, alignment);
    result = result && entry->Read(&structure->temporalFilterStaticWeight, alignment);
    result = result && entry->Read(&structure->temporalFilterDynamicWeight, alignment);
    result = result && LoadchromatixTemporalFilterTrigger(entry, &structure->temporalFilterTrigger, alignment);
    result = result && entry->Read(&structure->enableGridOverlap, alignment);
    result = result && entry->Read(&structure->confIntegralWidth, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDRange
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixPDRange(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDRange* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->from, alignment);
    result = result && entry->Read(&structure->to, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTuningCorrelation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixTuningCorrelation(
    ParameterFileSymbolTableEntry* entry,
    chromatixTuningCorrelation* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->minimumConfidenceLevel, alignment);
    result = result && entry->Read(&structure->defocusConfidenceThreshold, alignment);
    result = result && entry->Read(&structure->PDRangeControl, alignment);
    result = result && LoadchromatixPDRange(entry, &structure->searchRange, alignment);
    result = result && LoadchromatixPDRange(entry, &structure->lcrSearchRange, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDLIBPreprocessingFilterSettings
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixPDLIBPreprocessingFilterSettings(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDLIBPreprocessingFilterSettings* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = globalelements::globalelementsClass::Loadtrigger_pt_type_aec(entry, &structure->AECTrigger, alignment);
    result = result && entry->Read(&structure->verticalMode, alignment);
    result = result && entry->Read(&structure->horizontalMode, alignment);
    result = result && entry->Read(&structure->boxFilterLength, alignment);
    result = result && entry->Read(&structure->antiAliasFilterThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixLCRFilterTrigger
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixLCRFilterTrigger(
    ParameterFileSymbolTableEntry* entry,
    chromatixLCRFilterTrigger* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 3; i++)
    {
        result = LoadchromatixPDLIBPreprocessingFilterSettings(entry, &structure->filterSet[i], alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDPDFilterTrigger
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixDPDFilterTrigger(
    ParameterFileSymbolTableEntry* entry,
    chromatixDPDFilterTrigger* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 3; i++)
    {
        result = LoadchromatixPDLIBPreprocessingFilterSettings(entry, &structure->filterSet[i], alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTuningHDRCfg
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixTuningHDRCfg(
    ParameterFileSymbolTableEntry* entry,
    chromatixTuningHDRCfg* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->channelSelection = (chromatixHDRChannelSelection)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->longThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTuningPreProcess
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixTuningPreProcess(
    ParameterFileSymbolTableEntry* entry,
    chromatixTuningPreProcess* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->sparseProcessingMode = (chromatixSparsePDProcMode)entry->ReadEnum(&result, alignment);
    result = result && LoadchromatixTuningHDRCfg(entry, &structure->HDR, alignment);
    result = result && entry->Read(&structure->boxFilterLength, alignment);
    result = result && entry->Read(&structure->antiAliasFilterThreshold, alignment);
    result = result && entry->Read(&structure->saturationThreshold, alignment);
    result = result && LoadchromatixDPDFilterTrigger(entry, &structure->filterTrigger, alignment);
    result = result && LoadchromatixLCRFilterTrigger(entry, &structure->lcrFilterTrigger, alignment);
    structure->lcrChannel = (chromatixLCRChannel)entry->ReadEnum(&result, alignment);
    structure->lcrBinningMode = (chromatixLCRBinningMode)entry->ReadEnum(&result, alignment);
    structure->lcrRawType = (chromatixLCRRawType)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->lcrMaxBinningNum, alignment);
    result = result && entry->Read(&structure->lcrChannelSeparated, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDLibType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::LoadchromatixPDLibType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDLibType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && LoadchromatixTuningPreProcess(entry, &structure->preProcess, alignment);
    result = result && LoadchromatixTuningPreProcess(entry, &structure->preProcessVertical, alignment);
    result = result && LoadchromatixTuningCorrelation(entry, &structure->correlation, alignment);
    result = result && LoadchromatixTuningCorrelation(entry, &structure->correlationVertical, alignment);
    result = result && LoadchromatixTuningPostProcess(entry, &structure->postProcess, alignment);
    result = result && LoadchromatixTuningPostProcess(entry, &structure->postProcessVertical, alignment);
    result = result && LoadchromatixTuningAdaptiveK(entry, &structure->adaptiveK, alignment);
    result = result && entry->Read(&structure->enablePeripheralWindows, alignment);
    result = result && LoadchromatixTuningProcessLevel(entry, &structure->singleWindowProcessingLevel, alignment);
    result = result && LoadchromatixTuningProcessLevel(entry, &structure->singleWindowProcessingLevelVertical, alignment);
    result = result && LoadchromatixTuningProcessLevel(entry, &structure->gridProcessingLevel, alignment);
    result = result && LoadchromatixTuningProcessLevel(entry, &structure->gridProcessingLevelVertical, alignment);
    result = result && LoadchromatixTuningProcessLevel(entry, &structure->PeripheralProcessing, alignment);
    result = result && LoadchromatixTuningProcessLevel(entry, &structure->PeripheralProcessingVertical, alignment);
    result = result && LoadchromatixHVControl(entry, &structure->HVControl, alignment);
    result = result && LoadchromatixTuningSkipControl(entry, &structure->skipControl, alignment);
    result = result && LoadchromatixTuningHardwareGeometry(entry, &structure->hardwareGeometry, alignment);

    // Reading Array hardwarePattern from symbol table
    {
        result = result && entry->Read(&structure->hardwarePatternCount, alignment);
        structure->hardwarePatternID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->hardwarePattern = PARAMETER_NEW chromatixTuningHardwarePattern[structure->hardwarePatternCount];
        }
        if (!result || structure->hardwarePattern == NULL)
        {
            structure->hardwarePatternCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->hardwarePatternCount; i++)
        {
            result = LoadchromatixTuningHardwarePattern(pointerEntry, &structure->hardwarePattern[i], alignment);
        }
    }
    result = result && entry->Read(&structure->enableFocusMaps, alignment);

    // Reading Array extensionParam from symbol table
    {
        result = result && entry->Read(&structure->extensionParamCount, alignment);
        structure->extensionParamID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->extensionParam = PARAMETER_NEW statsglobalelements::statsExtensionParamType[structure->extensionParamCount];
        }
        if (!result || structure->extensionParam == NULL)
        {
            structure->extensionParamCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->extensionParamCount; i++)
        {
            result = statsglobalelements::statsglobalelementsClass::LoadstatsExtensionParamType(pointerEntry, &structure->extensionParam[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDLibType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDLibTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDLibType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDAFHardwareResamplerInstruction
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDLibTypeClass::UnloadchromatixPDAFHardwareResamplerInstruction(
    chromatixPDAFHardwareResamplerInstruction* structure)
{
    PARAMETER_DELETE[] structure->S;
    PARAMETER_DELETE[] structure->O;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDAFHardwareResampler
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDLibTypeClass::UnloadchromatixPDAFHardwareResampler(
    chromatixPDAFHardwareResampler* structure)
{
    for (UINT32 i = 0; i < structure->instructionsCount; i++)
    {
        UnloadchromatixPDAFHardwareResamplerInstruction(&structure->instructions[i]);
    }
    PARAMETER_DELETE[] structure->instructions;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDAFHardwarePixelSeparator
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDLibTypeClass::UnloadchromatixPDAFHardwarePixelSeparator(
    chromatixPDAFHardwarePixelSeparator* structure)
{
    PARAMETER_DELETE[] structure->L_map;
    PARAMETER_DELETE[] structure->R_map;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixTuningHardwarePattern
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDLibTypeClass::UnloadchromatixTuningHardwarePattern(
    chromatixTuningHardwarePattern* structure)
{
    PARAMETER_DELETE[] structure->lineExtractor;
    UnloadchromatixPDAFHardwarePixelSeparator(&structure->pixelSeparator);
    UnloadchromatixPDAFHardwareResampler(&structure->resampler);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixHVControl
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDLibTypeClass::UnloadchromatixHVControl(
    chromatixHVControl* structure)
{
    PARAMETER_DELETE[] structure->horizontalConfWeightTuning;
    PARAMETER_DELETE[] structure->verticalConfWeightTuning;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDLibType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDLibTypeClass::UnloadchromatixPDLibType(
    chromatixPDLibType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadchromatixHVControl(&structure->HVControl);
    for (UINT32 i = 0; i < structure->hardwarePatternCount; i++)
    {
        UnloadchromatixTuningHardwarePattern(&structure->hardwarePattern[i]);
    }
    PARAMETER_DELETE[] structure->hardwarePattern;
    for (UINT32 i = 0; i < structure->extensionParamCount; i++)
    {
        statsglobalelements::statsglobalelementsClass::UnloadstatsExtensionParamType(&structure->extensionParam[i]);
    }
    PARAMETER_DELETE[] structure->extensionParam;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDLibTypeClass::Unloadparameter_versionStruct(
    chromatixPDLibType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixPDLibTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixPDLibTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixPDLibTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixPDLibType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AFPDLIBELEMENTS_NAMESPACE_END
