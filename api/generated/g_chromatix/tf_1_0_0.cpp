////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  tf_1_0_0.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "tf_1_0_0.h"
#include "parametersetmanager.h"

TF_1_0_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatix_tf10TypeClass::chromatix_tf10TypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(enable_section);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(control_variables);
    PARAMETER_INITIALIZE(control_method);
    PARAMETER_INITIALIZE(dynamic_enable_triggers);
    PARAMETER_INITIALIZE(chromatix_tf10_reserve);
    PARAMETER_INITIALIZE(chromatix_tf10_core);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatix_tf10TypeClass::chromatix_tf10TypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(enable_section);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(control_variables);
    PARAMETER_INITIALIZE(control_method);
    PARAMETER_INITIALIZE(dynamic_enable_triggers);
    PARAMETER_INITIALIZE(chromatix_tf10_reserve);
    PARAMETER_INITIALIZE(chromatix_tf10_core);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatix_tf10TypeClass::~chromatix_tf10TypeClass()
{
    Unloadchromatix_tf10Type(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatix_tf10TypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "tf10_ipe")) == 0)
    {
        name = "tf10_ipe";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_pass_reserve_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_pass_reserve_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_pass_reserve_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->pass_trigger = (ispglobalelements::trigger_pass)entry->ReadEnum(&result, alignment);
    result = result && Loadmod_tf10_pass_reserve_dataType_pass_dataStruct(entry, &structure->pass_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_pass_reserve_dataType_pass_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_pass_reserve_dataType_pass_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_pass_reserve_dataType::pass_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->blending_mode, alignment);
    result = result && entry->Read(&structure->is_anr_strength_blender_mode, alignment);
    result = result && entry->Read(&structure->disable_luma_ghost_detection, alignment);
    result = result && entry->Read(&structure->disable_chroma_ghost_detection, alignment);
    result = result && entry->Read(&structure->enable_lnr, alignment);
    result = result && entry->Read(&structure->noise_params_y_uv_limit, alignment);
    result = result && entry->Read(&structure->noise_params_cb_uv_limit, alignment);
    result = result && entry->Read(&structure->noise_params_cr_uv_limit, alignment);
    result = result && entry->Read(&structure->use_anr_for_decisions_y, alignment);
    result = result && entry->Read(&structure->use_anr_for_decisions_c, alignment);
    result = result && entry->Read(&structure->enable_noise_est_by_luma, alignment);
    result = result && entry->Read(&structure->enable_noise_est_by_chroma, alignment);
    result = result && entry->Read(&structure->padding_by_reflection_override, alignment);
    result = result && entry->Read(&structure->padding_by_reflection, alignment);
    result = result && entry->Read(&structure->morph_erode_en, alignment);
    result = result && entry->Read(&structure->morph_dilate_en, alignment);
    result = result && entry->Read(&structure->smear_inputs_for_decisions, alignment);
    result = result && entry->Read(&structure->indications_premultiply_factor, alignment);
    result = result && entry->Read(&structure->invert_temporal_blending_weights, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_tf10_reserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadchromatix_tf10_reserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatix_tf10_reserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 4; i++)
    {
        result = Loadmod_tf10_pass_reserve_dataType(entry, &structure->mod_tf10_pass_reserve_data[i], alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->en, alignment);
    result = result && Loadtf10_rgn_dataType_noise_params_y_ytb_tabStruct(entry, &structure->noise_params_y_ytb_tab, alignment);
    result = result && Loadtf10_rgn_dataType_noise_params_y_ctb_tabStruct(entry, &structure->noise_params_y_ctb_tab, alignment);
    result = result && entry->Read(&structure->noise_params_y_top_lim, alignment);
    result = result && entry->Read(&structure->noise_params_y_bot_lim, alignment);
    result = result && Loadtf10_rgn_dataType_noise_params_cb_ytb_tabStruct(entry, &structure->noise_params_cb_ytb_tab, alignment);
    result = result && Loadtf10_rgn_dataType_noise_params_cb_ctb_tabStruct(entry, &structure->noise_params_cb_ctb_tab, alignment);
    result = result && entry->Read(&structure->noise_params_cb_top_lim, alignment);
    result = result && entry->Read(&structure->noise_params_cb_bot_lim, alignment);
    result = result && Loadtf10_rgn_dataType_noise_params_cr_ytb_tabStruct(entry, &structure->noise_params_cr_ytb_tab, alignment);
    result = result && Loadtf10_rgn_dataType_noise_params_cr_ctb_tabStruct(entry, &structure->noise_params_cr_ctb_tab, alignment);
    result = result && entry->Read(&structure->noise_params_cr_top_lim, alignment);
    result = result && entry->Read(&structure->noise_params_cr_bot_lim, alignment);
    result = result && entry->Read(&structure->a2_max_y, alignment);
    result = result && entry->Read(&structure->a2_min_y, alignment);
    result = result && entry->Read(&structure->a2_slope_y, alignment);
    result = result && entry->Read(&structure->a2_max_c, alignment);
    result = result && entry->Read(&structure->a2_min_c, alignment);
    result = result && entry->Read(&structure->a2_slope_c, alignment);
    result = result && entry->Read(&structure->is_same_blending_for_all_frequencies, alignment);
    result = result && Loadtf10_rgn_dataType_fs_to_a1_map_y_tabStruct(entry, &structure->fs_to_a1_map_y_tab, alignment);
    result = result && Loadtf10_rgn_dataType_fs_to_a1_map_c_tabStruct(entry, &structure->fs_to_a1_map_c_tab, alignment);
    result = result && Loadtf10_rgn_dataType_fs_to_a4_map_y_tabStruct(entry, &structure->fs_to_a4_map_y_tab, alignment);
    result = result && Loadtf10_rgn_dataType_fs_to_a4_map_c_tabStruct(entry, &structure->fs_to_a4_map_c_tab, alignment);
    result = result && entry->Read(&structure->dither_y, alignment);
    result = result && entry->Read(&structure->dither_cb, alignment);
    result = result && entry->Read(&structure->dither_cr, alignment);
    result = result && Loadtf10_rgn_dataType_lnr_lut_y_tabStruct(entry, &structure->lnr_lut_y_tab, alignment);
    result = result && Loadtf10_rgn_dataType_lnr_lut_c_tabStruct(entry, &structure->lnr_lut_c_tab, alignment);
    result = result && entry->Read(&structure->lnr_opt_center_x, alignment);
    result = result && entry->Read(&structure->lnr_opt_center_y, alignment);
    result = result && entry->Read(&structure->lnr_ellipses_bounding_rect_w, alignment);
    result = result && entry->Read(&structure->lnr_ellipses_bounding_rect_h, alignment);
    result = result && Loadtf10_rgn_dataType_fs_decision_params_y_c1_tabStruct(entry, &structure->fs_decision_params_y_c1_tab, alignment);
    result = result && Loadtf10_rgn_dataType_fs_decision_params_y_c2_tabStruct(entry, &structure->fs_decision_params_y_c2_tab, alignment);
    result = result && Loadtf10_rgn_dataType_fs_decision_params_y_c3_tabStruct(entry, &structure->fs_decision_params_y_c3_tab, alignment);
    result = result && Loadtf10_rgn_dataType_fs_decision_params_y_c4_tabStruct(entry, &structure->fs_decision_params_y_c4_tab, alignment);
    result = result && entry->Read(&structure->fs_decision_params_oof_y_c1, alignment);
    result = result && entry->Read(&structure->fs_decision_params_oof_y_c2, alignment);
    result = result && entry->Read(&structure->fs_decision_params_oof_y_c3, alignment);
    result = result && entry->Read(&structure->fs_decision_params_oof_y_c4, alignment);
    result = result && Loadtf10_rgn_dataType_fs_decision_params_c_c1_tabStruct(entry, &structure->fs_decision_params_c_c1_tab, alignment);
    result = result && Loadtf10_rgn_dataType_fs_decision_params_c_c2_tabStruct(entry, &structure->fs_decision_params_c_c2_tab, alignment);
    result = result && Loadtf10_rgn_dataType_fs_decision_params_c_c3_tabStruct(entry, &structure->fs_decision_params_c_c3_tab, alignment);
    result = result && Loadtf10_rgn_dataType_fs_decision_params_c_c4_tabStruct(entry, &structure->fs_decision_params_c_c4_tab, alignment);
    result = result && entry->Read(&structure->fs_decision_params_oof_c_c1, alignment);
    result = result && entry->Read(&structure->fs_decision_params_oof_c_c2, alignment);
    result = result && entry->Read(&structure->fs_decision_params_oof_c_c3, alignment);
    result = result && entry->Read(&structure->fs_decision_params_oof_c_c4, alignment);
    result = result && entry->Read(&structure->apply_fs_rank_filter, alignment);
    result = result && entry->Read(&structure->apply_fs_lpf, alignment);
    result = result && entry->Read(&structure->sad_y_calc_mode, alignment);
    result = result && entry->Read(&structure->sad_c_calc_mode, alignment);
    result = result && entry->Read(&structure->use_indications, alignment);
    result = result && entry->Read(&structure->indications_affect_fs_decision_also_directly, alignment);
    result = result && entry->Read(&structure->morph_erode_size, alignment);
    result = result && entry->Read(&structure->morph_dilate_size, alignment);
    result = result && entry->Read(&structure->tr_enable, alignment);
    result = result && entry->Read(&structure->tr_block_num_x, alignment);
    result = result && entry->Read(&structure->tr_block_num_y, alignment);
    result = result && entry->Read(&structure->tr_fs_threshold, alignment);
    result = result && entry->Read(&structure->tr_dead_zone, alignment);
    result = result && entry->Read(&structure->tr_count_percentage_threshold, alignment);
    result = result && entry->Read(&structure->out_of_frame_pixels_confidence, alignment);
    result = result && entry->Read(&structure->is_dci_mode, alignment);
    result = result && entry->Read(&structure->a3_t1_scale_y, alignment);
    result = result && entry->Read(&structure->a3_t1_offs_y, alignment);
    result = result && entry->Read(&structure->a3_t2_scale_y, alignment);
    result = result && entry->Read(&structure->a3_t2_offs_y, alignment);
    result = result && entry->Read(&structure->a3_t1_scale_c, alignment);
    result = result && entry->Read(&structure->a3_t1_offs_c, alignment);
    result = result && entry->Read(&structure->a3_t2_scale_c, alignment);
    result = result && entry->Read(&structure->a3_t2_offs_c, alignment);
    result = result && entry->Read(&structure->constant_blending_factor_y, alignment);
    result = result && entry->Read(&structure->constant_blending_factor_c, alignment);
    result = result && entry->Read(&structure->video_first_frame_spatial_nr_percentage, alignment);
    result = result && entry->Read(&structure->scene_cut_recovery_time, alignment);
    result = result && entry->Read(&structure->anr_final_blender_luma_min_strength_high_freq, alignment);
    result = result && entry->Read(&structure->anr_final_blender_luma_min_strength_low_freq, alignment);
    result = result && entry->Read(&structure->anr_final_blender_chroma_min_strength_high_freq, alignment);
    result = result && entry->Read(&structure->anr_final_blender_chroma_min_strength_low_freq, alignment);
    result = result && entry->Read(&structure->anr_final_blender_strength_decision_ythr_low, alignment);
    result = result && entry->Read(&structure->anr_final_blender_strength_decision_ythr_high, alignment);
    result = result && entry->Read(&structure->anr_final_blender_strength_decision_cthr_low, alignment);
    result = result && entry->Read(&structure->anr_final_blender_strength_decision_cthr_high, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_noise_params_y_ytb_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_noise_params_y_ytb_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::noise_params_y_ytb_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->noise_params_y_ytb, 17, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_noise_params_y_ctb_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_noise_params_y_ctb_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::noise_params_y_ctb_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->noise_params_y_ctb, 8, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_noise_params_cb_ytb_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_noise_params_cb_ytb_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::noise_params_cb_ytb_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->noise_params_cb_ytb, 17, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_noise_params_cb_ctb_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_noise_params_cb_ctb_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::noise_params_cb_ctb_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->noise_params_cb_ctb, 8, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_noise_params_cr_ytb_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_noise_params_cr_ytb_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::noise_params_cr_ytb_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->noise_params_cr_ytb, 17, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_noise_params_cr_ctb_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_noise_params_cr_ctb_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::noise_params_cr_ctb_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->noise_params_cr_ctb, 8, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_fs_to_a1_map_y_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_fs_to_a1_map_y_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::fs_to_a1_map_y_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->fs_to_a1_map_y, 9, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_fs_to_a1_map_c_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_fs_to_a1_map_c_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::fs_to_a1_map_c_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->fs_to_a1_map_c, 9, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_fs_to_a4_map_y_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_fs_to_a4_map_y_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::fs_to_a4_map_y_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->fs_to_a4_map_y, 9, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_fs_to_a4_map_c_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_fs_to_a4_map_c_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::fs_to_a4_map_c_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->fs_to_a4_map_c, 9, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_lnr_lut_y_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_lnr_lut_y_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::lnr_lut_y_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->lnr_lut_y, 16, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_lnr_lut_c_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_lnr_lut_c_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::lnr_lut_c_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->lnr_lut_c, 16, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_fs_decision_params_y_c1_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_fs_decision_params_y_c1_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::fs_decision_params_y_c1_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->fs_decision_params_y_c1, 9, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_fs_decision_params_y_c2_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_fs_decision_params_y_c2_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::fs_decision_params_y_c2_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->fs_decision_params_y_c2, 9, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_fs_decision_params_y_c3_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_fs_decision_params_y_c3_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::fs_decision_params_y_c3_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->fs_decision_params_y_c3, 9, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_fs_decision_params_y_c4_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_fs_decision_params_y_c4_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::fs_decision_params_y_c4_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->fs_decision_params_y_c4, 9, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_fs_decision_params_c_c1_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_fs_decision_params_c_c1_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::fs_decision_params_c_c1_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->fs_decision_params_c_c1, 9, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_fs_decision_params_c_c2_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_fs_decision_params_c_c2_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::fs_decision_params_c_c2_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->fs_decision_params_c_c2, 9, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_fs_decision_params_c_c3_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_fs_decision_params_c_c3_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::fs_decision_params_c_c3_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->fs_decision_params_c_c3, 9, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load tf10_rgn_dataType_fs_decision_params_c_c4_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadtf10_rgn_dataType_fs_decision_params_c_c4_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    tf10_rgn_dataType::fs_decision_params_c_c4_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->fs_decision_params_c_c4, 9, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_pass_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_pass_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_pass_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->pass_trigger = (ispglobalelements::trigger_pass)entry->ReadEnum(&result, alignment);
    result = result && Loadtf10_rgn_dataType(entry, &structure->tf10_rgn_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_cct_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_cct_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_cct_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = ispglobalelements::ispglobalelementsClass::Loadtrigger_pt_type(entry, &structure->cct_trigger, alignment);
    result = result && Loadmod_tf10_cct_dataType_cct_dataStruct(entry, &structure->cct_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_cct_dataType_cct_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_cct_dataType_cct_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_cct_dataType::cct_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 4; i++)
    {
        result = Loadmod_tf10_pass_dataType(entry, &structure->mod_tf10_pass_data[i], alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_aec_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_aec_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = globalelements::globalelementsClass::Loadtrigger_pt_type_aec(entry, &structure->aec_trigger, alignment);
    result = result && Loadmod_tf10_aec_dataType_aec_dataStruct(entry, &structure->aec_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_aec_dataType_aec_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_aec_dataType_aec_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_aec_dataType::aec_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_tf10_cct_data from symbol table
    {
        result = entry->Read(&structure->mod_tf10_cct_dataCount, alignment);
        structure->mod_tf10_cct_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_tf10_cct_data = PARAMETER_NEW mod_tf10_cct_dataType[structure->mod_tf10_cct_dataCount];
        }
        if (!result || structure->mod_tf10_cct_data == NULL)
        {
            structure->mod_tf10_cct_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_tf10_cct_dataCount; i++)
        {
            result = Loadmod_tf10_cct_dataType(pointerEntry, &structure->mod_tf10_cct_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_hdr_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_hdr_aec_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_hdr_aec_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = ispglobalelements::ispglobalelementsClass::Loadtrigger_pt_type_aec_hdr(entry, &structure->hdr_aec_trigger, alignment);
    result = result && Loadmod_tf10_hdr_aec_dataType_hdr_aec_dataStruct(entry, &structure->hdr_aec_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_hdr_aec_dataType_hdr_aec_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_hdr_aec_dataType_hdr_aec_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_hdr_aec_dataType::hdr_aec_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_tf10_aec_data from symbol table
    {
        result = entry->Read(&structure->mod_tf10_aec_dataCount, alignment);
        structure->mod_tf10_aec_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_tf10_aec_data = PARAMETER_NEW mod_tf10_aec_dataType[structure->mod_tf10_aec_dataCount];
        }
        if (!result || structure->mod_tf10_aec_data == NULL)
        {
            structure->mod_tf10_aec_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_tf10_aec_dataCount; i++)
        {
            result = Loadmod_tf10_aec_dataType(pointerEntry, &structure->mod_tf10_aec_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_drc_gain_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_drc_gain_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_drc_gain_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = ispglobalelements::ispglobalelementsClass::Loadtrigger_pt_type(entry, &structure->drc_gain_trigger, alignment);
    result = result && Loadmod_tf10_drc_gain_dataType_drc_gain_dataStruct(entry, &structure->drc_gain_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_drc_gain_dataType_drc_gain_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_drc_gain_dataType_drc_gain_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_drc_gain_dataType::drc_gain_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_tf10_hdr_aec_data from symbol table
    {
        result = entry->Read(&structure->mod_tf10_hdr_aec_dataCount, alignment);
        structure->mod_tf10_hdr_aec_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_tf10_hdr_aec_data = PARAMETER_NEW mod_tf10_hdr_aec_dataType[structure->mod_tf10_hdr_aec_dataCount];
        }
        if (!result || structure->mod_tf10_hdr_aec_data == NULL)
        {
            structure->mod_tf10_hdr_aec_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_tf10_hdr_aec_dataCount; i++)
        {
            result = Loadmod_tf10_hdr_aec_dataType(pointerEntry, &structure->mod_tf10_hdr_aec_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_pre_scale_ratio_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_pre_scale_ratio_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_pre_scale_ratio_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = ispglobalelements::ispglobalelementsClass::Loadtrigger_pt_type(entry, &structure->pre_scale_ratio_trigger, alignment);
    result = result && Loadmod_tf10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct(entry, &structure->pre_scale_ratio_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_pre_scale_ratio_dataType::pre_scale_ratio_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_tf10_drc_gain_data from symbol table
    {
        result = entry->Read(&structure->mod_tf10_drc_gain_dataCount, alignment);
        structure->mod_tf10_drc_gain_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_tf10_drc_gain_data = PARAMETER_NEW mod_tf10_drc_gain_dataType[structure->mod_tf10_drc_gain_dataCount];
        }
        if (!result || structure->mod_tf10_drc_gain_data == NULL)
        {
            structure->mod_tf10_drc_gain_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_tf10_drc_gain_dataCount; i++)
        {
            result = Loadmod_tf10_drc_gain_dataType(pointerEntry, &structure->mod_tf10_drc_gain_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_post_scale_ratio_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_post_scale_ratio_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_post_scale_ratio_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = ispglobalelements::ispglobalelementsClass::Loadtrigger_pt_type(entry, &structure->post_scale_ratio_trigger, alignment);
    result = result && Loadmod_tf10_post_scale_ratio_dataType_post_scale_ratio_dataStruct(entry, &structure->post_scale_ratio_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_post_scale_ratio_dataType_post_scale_ratio_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_post_scale_ratio_dataType_post_scale_ratio_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_post_scale_ratio_dataType::post_scale_ratio_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_tf10_pre_scale_ratio_data from symbol table
    {
        result = entry->Read(&structure->mod_tf10_pre_scale_ratio_dataCount, alignment);
        structure->mod_tf10_pre_scale_ratio_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_tf10_pre_scale_ratio_data = PARAMETER_NEW mod_tf10_pre_scale_ratio_dataType[structure->mod_tf10_pre_scale_ratio_dataCount];
        }
        if (!result || structure->mod_tf10_pre_scale_ratio_data == NULL)
        {
            structure->mod_tf10_pre_scale_ratio_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_tf10_pre_scale_ratio_dataCount; i++)
        {
            result = Loadmod_tf10_pre_scale_ratio_dataType(pointerEntry, &structure->mod_tf10_pre_scale_ratio_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_lens_zoom_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_lens_zoom_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_lens_zoom_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = ispglobalelements::ispglobalelementsClass::Loadtrigger_pt_type(entry, &structure->lens_zoom_trigger, alignment);
    result = result && Loadmod_tf10_lens_zoom_dataType_lens_zoom_dataStruct(entry, &structure->lens_zoom_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_lens_zoom_dataType_lens_zoom_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_lens_zoom_dataType_lens_zoom_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_lens_zoom_dataType::lens_zoom_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_tf10_post_scale_ratio_data from symbol table
    {
        result = entry->Read(&structure->mod_tf10_post_scale_ratio_dataCount, alignment);
        structure->mod_tf10_post_scale_ratio_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_tf10_post_scale_ratio_data = PARAMETER_NEW mod_tf10_post_scale_ratio_dataType[structure->mod_tf10_post_scale_ratio_dataCount];
        }
        if (!result || structure->mod_tf10_post_scale_ratio_data == NULL)
        {
            structure->mod_tf10_post_scale_ratio_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_tf10_post_scale_ratio_dataCount; i++)
        {
            result = Loadmod_tf10_post_scale_ratio_dataType(pointerEntry, &structure->mod_tf10_post_scale_ratio_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_lens_posn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_lens_posn_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_lens_posn_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = ispglobalelements::ispglobalelementsClass::Loadtrigger_pt_type(entry, &structure->lens_posn_trigger, alignment);
    result = result && Loadmod_tf10_lens_posn_dataType_lens_posn_dataStruct(entry, &structure->lens_posn_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_tf10_lens_posn_dataType_lens_posn_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmod_tf10_lens_posn_dataType_lens_posn_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_tf10_lens_posn_dataType::lens_posn_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_tf10_lens_zoom_data from symbol table
    {
        result = entry->Read(&structure->mod_tf10_lens_zoom_dataCount, alignment);
        structure->mod_tf10_lens_zoom_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_tf10_lens_zoom_data = PARAMETER_NEW mod_tf10_lens_zoom_dataType[structure->mod_tf10_lens_zoom_dataCount];
        }
        if (!result || structure->mod_tf10_lens_zoom_data == NULL)
        {
            structure->mod_tf10_lens_zoom_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_tf10_lens_zoom_dataCount; i++)
        {
            result = Loadmod_tf10_lens_zoom_dataType(pointerEntry, &structure->mod_tf10_lens_zoom_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_tf10_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadchromatix_tf10_coreType(
    ParameterFileSymbolTableEntry* entry,
    chromatix_tf10_coreType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_tf10_lens_posn_data from symbol table
    {
        result = entry->Read(&structure->mod_tf10_lens_posn_dataCount, alignment);
        structure->mod_tf10_lens_posn_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_tf10_lens_posn_data = PARAMETER_NEW mod_tf10_lens_posn_dataType[structure->mod_tf10_lens_posn_dataCount];
        }
        if (!result || structure->mod_tf10_lens_posn_data == NULL)
        {
            structure->mod_tf10_lens_posn_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_tf10_lens_posn_dataCount; i++)
        {
            result = Loadmod_tf10_lens_posn_dataType(pointerEntry, &structure->mod_tf10_lens_posn_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_tf10Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadchromatix_tf10Type(
    ParameterFileSymbolTableEntry* entry,
    chromatix_tf10Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadenable_sectionStruct(entry, &structure->enable_section, alignment);
    result = result && Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && Loadcontrol_variablesStruct(entry, &structure->control_variables, alignment);
    result = result && Loadcontrol_methodStruct(entry, &structure->control_method, alignment);
    result = result && Loaddynamic_enable_triggersStruct(entry, &structure->dynamic_enable_triggers, alignment);
    result = result && Loadchromatix_tf10_reserveType(entry, &structure->chromatix_tf10_reserve, alignment);
    result = result && Loadchromatix_tf10_coreType(entry, &structure->chromatix_tf10_core, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load enable_sectionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadenable_sectionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_tf10Type::enable_sectionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->master_en, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_tf10Type::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_tf10Type::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load control_variablesStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadcontrol_variablesStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_tf10Type::control_variablesStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 9; i++)
    {
        structure->control_var_type[i] = (chromatix_tf10Type::control_variablesStruct::control_var_typeEnum)entry->ReadEnum(&result, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load control_methodStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loadcontrol_methodStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_tf10Type::control_methodStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->aec_exp_control = (ispglobalelements::tuning_control_aec_type)entry->ReadEnum(&result, alignment);
    structure->aec_hdr_control = (ispglobalelements::tuning_control_aec_hdr_type)entry->ReadEnum(&result, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load dynamic_enable_triggersStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loaddynamic_enable_triggersStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_tf10Type::dynamic_enable_triggersStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loaddynamic_enable_triggersStruct_master_enStruct(entry, &structure->master_en, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load dynamic_enable_triggersStruct_master_enStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_tf10TypeClass::Loaddynamic_enable_triggersStruct_master_enStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_tf10Type::dynamic_enable_triggersStruct::master_enStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    structure->hyst_control_var = (ispglobalelements::control_var_type)entry->ReadEnum(&result, alignment);
    structure->hyst_mode = (ispglobalelements::hyst_direction)entry->ReadEnum(&result, alignment);
    result = result && ispglobalelements::ispglobalelementsClass::Loadtrigger_pt_couplet_type(entry, &structure->hyst_trigger, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_aec_dataType(
    mod_tf10_aec_dataType* structure)
{
    Unloadmod_tf10_aec_dataType_aec_dataStruct(&structure->aec_data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_aec_dataType_aec_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_aec_dataType_aec_dataStruct(
    mod_tf10_aec_dataType::aec_dataStruct* structure)
{
    PARAMETER_DELETE[] structure->mod_tf10_cct_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_hdr_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_hdr_aec_dataType(
    mod_tf10_hdr_aec_dataType* structure)
{
    Unloadmod_tf10_hdr_aec_dataType_hdr_aec_dataStruct(&structure->hdr_aec_data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_hdr_aec_dataType_hdr_aec_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_hdr_aec_dataType_hdr_aec_dataStruct(
    mod_tf10_hdr_aec_dataType::hdr_aec_dataStruct* structure)
{
    for (UINT32 i = 0; i < structure->mod_tf10_aec_dataCount; i++)
    {
        Unloadmod_tf10_aec_dataType(&structure->mod_tf10_aec_data[i]);
    }
    PARAMETER_DELETE[] structure->mod_tf10_aec_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_drc_gain_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_drc_gain_dataType(
    mod_tf10_drc_gain_dataType* structure)
{
    Unloadmod_tf10_drc_gain_dataType_drc_gain_dataStruct(&structure->drc_gain_data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_drc_gain_dataType_drc_gain_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_drc_gain_dataType_drc_gain_dataStruct(
    mod_tf10_drc_gain_dataType::drc_gain_dataStruct* structure)
{
    for (UINT32 i = 0; i < structure->mod_tf10_hdr_aec_dataCount; i++)
    {
        Unloadmod_tf10_hdr_aec_dataType(&structure->mod_tf10_hdr_aec_data[i]);
    }
    PARAMETER_DELETE[] structure->mod_tf10_hdr_aec_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_pre_scale_ratio_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_pre_scale_ratio_dataType(
    mod_tf10_pre_scale_ratio_dataType* structure)
{
    Unloadmod_tf10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct(&structure->pre_scale_ratio_data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct(
    mod_tf10_pre_scale_ratio_dataType::pre_scale_ratio_dataStruct* structure)
{
    for (UINT32 i = 0; i < structure->mod_tf10_drc_gain_dataCount; i++)
    {
        Unloadmod_tf10_drc_gain_dataType(&structure->mod_tf10_drc_gain_data[i]);
    }
    PARAMETER_DELETE[] structure->mod_tf10_drc_gain_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_post_scale_ratio_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_post_scale_ratio_dataType(
    mod_tf10_post_scale_ratio_dataType* structure)
{
    Unloadmod_tf10_post_scale_ratio_dataType_post_scale_ratio_dataStruct(&structure->post_scale_ratio_data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_post_scale_ratio_dataType_post_scale_ratio_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_post_scale_ratio_dataType_post_scale_ratio_dataStruct(
    mod_tf10_post_scale_ratio_dataType::post_scale_ratio_dataStruct* structure)
{
    for (UINT32 i = 0; i < structure->mod_tf10_pre_scale_ratio_dataCount; i++)
    {
        Unloadmod_tf10_pre_scale_ratio_dataType(&structure->mod_tf10_pre_scale_ratio_data[i]);
    }
    PARAMETER_DELETE[] structure->mod_tf10_pre_scale_ratio_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_lens_zoom_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_lens_zoom_dataType(
    mod_tf10_lens_zoom_dataType* structure)
{
    Unloadmod_tf10_lens_zoom_dataType_lens_zoom_dataStruct(&structure->lens_zoom_data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_lens_zoom_dataType_lens_zoom_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_lens_zoom_dataType_lens_zoom_dataStruct(
    mod_tf10_lens_zoom_dataType::lens_zoom_dataStruct* structure)
{
    for (UINT32 i = 0; i < structure->mod_tf10_post_scale_ratio_dataCount; i++)
    {
        Unloadmod_tf10_post_scale_ratio_dataType(&structure->mod_tf10_post_scale_ratio_data[i]);
    }
    PARAMETER_DELETE[] structure->mod_tf10_post_scale_ratio_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_lens_posn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_lens_posn_dataType(
    mod_tf10_lens_posn_dataType* structure)
{
    Unloadmod_tf10_lens_posn_dataType_lens_posn_dataStruct(&structure->lens_posn_data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_tf10_lens_posn_dataType_lens_posn_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadmod_tf10_lens_posn_dataType_lens_posn_dataStruct(
    mod_tf10_lens_posn_dataType::lens_posn_dataStruct* structure)
{
    for (UINT32 i = 0; i < structure->mod_tf10_lens_zoom_dataCount; i++)
    {
        Unloadmod_tf10_lens_zoom_dataType(&structure->mod_tf10_lens_zoom_data[i]);
    }
    PARAMETER_DELETE[] structure->mod_tf10_lens_zoom_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatix_tf10_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadchromatix_tf10_coreType(
    chromatix_tf10_coreType* structure)
{
    for (UINT32 i = 0; i < structure->mod_tf10_lens_posn_dataCount; i++)
    {
        Unloadmod_tf10_lens_posn_dataType(&structure->mod_tf10_lens_posn_data[i]);
    }
    PARAMETER_DELETE[] structure->mod_tf10_lens_posn_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatix_tf10Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadchromatix_tf10Type(
    chromatix_tf10Type* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    Unloadchromatix_tf10_coreType(&structure->chromatix_tf10_core);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_tf10TypeClass::Unloadparameter_versionStruct(
    chromatix_tf10Type::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatix_tf10TypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatix_tf10TypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatix_tf10TypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && Loadchromatix_tf10Type(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


TF_1_0_0_NAMESPACE_END
