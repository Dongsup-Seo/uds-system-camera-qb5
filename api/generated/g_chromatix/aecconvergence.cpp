////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecconvergence.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "aecconvergence.h"
#include "parametersetmanager.h"

AECCONVERGENCE_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECCoreConvergenceTypeClass::AECCoreConvergenceTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(algoSelect);
    PARAMETER_INITIALIZE(fastConv);
    PARAMETER_INITIALIZE(slowConv);
    PARAMETER_INITIALIZE(unitStepSize);
    PARAMETER_INITIALIZE(enableConvergeGainFirst);
    PARAMETER_INITIALIZE(settledMultiplier);
    PARAMETER_INITIALIZE(torchConv);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECCoreConvergenceTypeClass::AECCoreConvergenceTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(algoSelect);
    PARAMETER_INITIALIZE(fastConv);
    PARAMETER_INITIALIZE(slowConv);
    PARAMETER_INITIALIZE(unitStepSize);
    PARAMETER_INITIALIZE(enableConvergeGainFirst);
    PARAMETER_INITIALIZE(settledMultiplier);
    PARAMETER_INITIALIZE(torchConv);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECCoreConvergenceTypeClass::~AECCoreConvergenceTypeClass()
{
    UnloadAECCoreConvergenceType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* AECCoreConvergenceTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "Convergence")) == 0)
    {
        name = "Convergence";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load BrightRatioStrengthType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadBrightRatioStrengthType(
    ParameterFileSymbolTableEntry* entry,
    BrightRatioStrengthType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->brightRatioAdjStrength, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load BrightAdjustmentType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadBrightAdjustmentType(
    ParameterFileSymbolTableEntry* entry,
    BrightAdjustmentType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);

    // Reading Array zoneData from symbol table
    {
        result = result && entry->Read(&structure->zoneDataCount, alignment);
        structure->zoneDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->zoneData = PARAMETER_NEW BrightRatioStrengthType[structure->zoneDataCount];
        }
        if (!result || structure->zoneData == NULL)
        {
            structure->zoneDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->zoneDataCount; i++)
        {
            result = LoadBrightRatioStrengthType(pointerEntry, &structure->zoneData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load DarkRatioStrengthType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadDarkRatioStrengthType(
    ParameterFileSymbolTableEntry* entry,
    DarkRatioStrengthType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->darkRatioAdjStrength, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load DarkAdjustmentType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadDarkAdjustmentType(
    ParameterFileSymbolTableEntry* entry,
    DarkAdjustmentType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);

    // Reading Array zoneData from symbol table
    {
        result = result && entry->Read(&structure->zoneDataCount, alignment);
        structure->zoneDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->zoneData = PARAMETER_NEW DarkRatioStrengthType[structure->zoneDataCount];
        }
        if (!result || structure->zoneData == NULL)
        {
            structure->zoneDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->zoneDataCount; i++)
        {
            result = LoadDarkRatioStrengthType(pointerEntry, &structure->zoneData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load BrightDarkConvAdjType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadBrightDarkConvAdjType(
    ParameterFileSymbolTableEntry* entry,
    BrightDarkConvAdjType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableBrightDarkConvergence, alignment);

    // Reading Array darkAdjustment from symbol table
    {
        result = result && entry->Read(&structure->darkAdjustmentCount, alignment);
        structure->darkAdjustmentID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->darkAdjustment = PARAMETER_NEW DarkAdjustmentType[structure->darkAdjustmentCount];
        }
        if (!result || structure->darkAdjustment == NULL)
        {
            structure->darkAdjustmentCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->darkAdjustmentCount; i++)
        {
            result = LoadDarkAdjustmentType(pointerEntry, &structure->darkAdjustment[i], alignment);
        }
    }

    // Reading Array brightAdjustment from symbol table
    {
        result = result && entry->Read(&structure->brightAdjustmentCount, alignment);
        structure->brightAdjustmentID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->brightAdjustment = PARAMETER_NEW BrightAdjustmentType[structure->brightAdjustmentCount];
        }
        if (!result || structure->brightAdjustment == NULL)
        {
            structure->brightAdjustmentCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->brightAdjustmentCount; i++)
        {
            result = LoadBrightAdjustmentType(pointerEntry, &structure->brightAdjustment[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load PredictiveSaturationZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadPredictiveSaturationZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    PredictiveSaturationZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->stepSize, alignment);
    result = result && entry->Read(&structure->predictiveFactor, alignment);
    result = result && entry->Read(&structure->decay, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load PredictiveSaturationZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadPredictiveSaturationZoneType(
    ParameterFileSymbolTableEntry* entry,
    PredictiveSaturationZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadPredictiveSaturationZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load PredictiveGainZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadPredictiveGainZoneType(
    ParameterFileSymbolTableEntry* entry,
    PredictiveGainZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);

    // Reading Array zoneData from symbol table
    {
        result = result && entry->Read(&structure->zoneDataCount, alignment);
        structure->zoneDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->zoneData = PARAMETER_NEW PredictiveSaturationZoneType[structure->zoneDataCount];
        }
        if (!result || structure->zoneData == NULL)
        {
            structure->zoneDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->zoneDataCount; i++)
        {
            result = LoadPredictiveSaturationZoneType(pointerEntry, &structure->zoneData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load PredictiveConvType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadPredictiveConvType(
    ParameterFileSymbolTableEntry* entry,
    PredictiveConvType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enablePredictiveConvergence, alignment);
    result = result && entry->Read(&structure->FPSThreshold, alignment);
    result = result && entry->Read(&structure->disableWhenDRC, alignment);
    result = result && entry->Read(&structure->maxGain, alignment);

    // Reading Array predictiveTrigger from symbol table
    {
        result = result && entry->Read(&structure->predictiveTriggerCount, alignment);
        structure->predictiveTriggerID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->predictiveTrigger = PARAMETER_NEW PredictiveGainZoneType[structure->predictiveTriggerCount];
        }
        if (!result || structure->predictiveTrigger == NULL)
        {
            structure->predictiveTriggerCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->predictiveTriggerCount; i++)
        {
            result = LoadPredictiveGainZoneType(pointerEntry, &structure->predictiveTrigger[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FastConvType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadFastConvType(
    ParameterFileSymbolTableEntry* entry,
    FastConvType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->tolMultUnitStepSize, alignment);
    structure->frameSkipMethod = (aecglobalelements::ConvFrameSkipType)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->aggressiveness, alignment);
    result = result && entry->Read(&structure->enableBrightDarkSpeedAdj, alignment);
    result = result && entry->Read(&structure->darkRatioAdjStrength, alignment);
    result = result && entry->Read(&structure->brightRatioAdjStrength, alignment);
    result = result && entry->Read(&structure->thresDarkExpIndexDelta, alignment);
    result = result && entry->Read(&structure->thresBrightExpIndexDelta, alignment);
    result = result && entry->Read(&structure->ADRCConvSpeed, alignment);
    result = result && LoadPredictiveConvType(entry, &structure->predictiveConvergence, alignment);
    result = result && LoadBrightDarkConvAdjType(entry, &structure->brightDarkConvAdj, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load TorchConvergenceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadTorchConvergenceType(
    ParameterFileSymbolTableEntry* entry,
    TorchConvergenceType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableTorchOffOn, alignment);
    result = result && entry->Read(&structure->enableTorchOnOff, alignment);
    result = result && entry->Read(&structure->minFrameCount, alignment);
    result = result && LoadFastConvType(entry, &structure->conv, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load SlowConvHoldTimeType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadSlowConvHoldTimeType(
    ParameterFileSymbolTableEntry* entry,
    SlowConvHoldTimeType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableHoldTime, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->thresAbsExpDelta, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->expDeltaBasedHTAdjFactor, alignment);
    result = result && entry->Read(&structure->tolAdjFactor, alignment);
    result = result && entry->Read(&structure->holdTimeEnterDelay, alignment);
    result = result && entry->Read(&structure->maxHoldTime, alignment);
    result = result && entry->Read(&structure->enableGyroBasedHT, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->thresGyroMagnitude, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->gyroBasedHTAdjFactor, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load SlowConvType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadSlowConvType(
    ParameterFileSymbolTableEntry* entry,
    SlowConvType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->tolMultUnitStepSize, alignment);
    structure->frameSkipMethod = (aecglobalelements::ConvFrameSkipType)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->stepFactorWhenFrameSkipEnabled, alignment);
    result = result && entry->Read(&structure->convSpeed, alignment);
    result = result && entry->Read(&structure->refFrameRate, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->stepRegular, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->stepDark, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->stepBright, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->thresSlowDownAbsExpIndexDeltaDark, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->thresSlowDownAbsExpIndexDeltaBright, alignment);
    result = result && entry->Read(&structure->maxRawStepAdj, alignment);
    result = result && entry->Read(&structure->tolExpIndexDeltaForceAdj, alignment);
    result = result && entry->Read(&structure->thresNumBrightRgn, alignment);
    result = result && entry->Read(&structure->thresNumDarkRgn, alignment);
    result = result && LoadSlowConvHoldTimeType(entry, &structure->holdTimeTuning, alignment);
    result = result && entry->Read(&structure->ADRCConvSpeed, alignment);
    result = result && LoadPredictiveConvType(entry, &structure->predictiveConvergence, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECCoreConvergenceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::LoadAECCoreConvergenceType(
    ParameterFileSymbolTableEntry* entry,
    AECCoreConvergenceType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    structure->algoSelect = (aecglobalelements::AECConvAlgoType)entry->ReadEnum(&result, alignment);
    result = result && LoadFastConvType(entry, &structure->fastConv, alignment);
    result = result && LoadSlowConvType(entry, &structure->slowConv, alignment);
    result = result && entry->Read(&structure->unitStepSize, alignment);
    result = result && entry->Read(&structure->enableConvergeGainFirst, alignment);
    result = result && entry->Read(&structure->settledMultiplier, alignment);
    result = result && LoadTorchConvergenceType(entry, &structure->torchConv, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECCoreConvergenceType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreConvergenceTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECCoreConvergenceType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload BrightAdjustmentType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreConvergenceTypeClass::UnloadBrightAdjustmentType(
    BrightAdjustmentType* structure)
{
    PARAMETER_DELETE[] structure->zoneData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload DarkAdjustmentType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreConvergenceTypeClass::UnloadDarkAdjustmentType(
    DarkAdjustmentType* structure)
{
    PARAMETER_DELETE[] structure->zoneData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload BrightDarkConvAdjType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreConvergenceTypeClass::UnloadBrightDarkConvAdjType(
    BrightDarkConvAdjType* structure)
{
    for (UINT32 i = 0; i < structure->darkAdjustmentCount; i++)
    {
        UnloadDarkAdjustmentType(&structure->darkAdjustment[i]);
    }
    PARAMETER_DELETE[] structure->darkAdjustment;
    for (UINT32 i = 0; i < structure->brightAdjustmentCount; i++)
    {
        UnloadBrightAdjustmentType(&structure->brightAdjustment[i]);
    }
    PARAMETER_DELETE[] structure->brightAdjustment;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload PredictiveGainZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreConvergenceTypeClass::UnloadPredictiveGainZoneType(
    PredictiveGainZoneType* structure)
{
    PARAMETER_DELETE[] structure->zoneData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload PredictiveConvType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreConvergenceTypeClass::UnloadPredictiveConvType(
    PredictiveConvType* structure)
{
    for (UINT32 i = 0; i < structure->predictiveTriggerCount; i++)
    {
        UnloadPredictiveGainZoneType(&structure->predictiveTrigger[i]);
    }
    PARAMETER_DELETE[] structure->predictiveTrigger;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload FastConvType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreConvergenceTypeClass::UnloadFastConvType(
    FastConvType* structure)
{
    UnloadPredictiveConvType(&structure->predictiveConvergence);
    UnloadBrightDarkConvAdjType(&structure->brightDarkConvAdj);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload TorchConvergenceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreConvergenceTypeClass::UnloadTorchConvergenceType(
    TorchConvergenceType* structure)
{
    UnloadFastConvType(&structure->conv);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload SlowConvType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreConvergenceTypeClass::UnloadSlowConvType(
    SlowConvType* structure)
{
    UnloadPredictiveConvType(&structure->predictiveConvergence);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECCoreConvergenceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreConvergenceTypeClass::UnloadAECCoreConvergenceType(
    AECCoreConvergenceType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadFastConvType(&structure->fastConv);
    UnloadSlowConvType(&structure->slowConv);
    UnloadTorchConvergenceType(&structure->torchConv);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreConvergenceTypeClass::Unloadparameter_versionStruct(
    AECCoreConvergenceType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* AECCoreConvergenceTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    AECCoreConvergenceTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW AECCoreConvergenceTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadAECCoreConvergenceType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AECCONVERGENCE_NAMESPACE_END
