////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  modmlczv3.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "modmlczv3.h"
#include "parametersetmanager.h"

MODMLCZV3_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixMLCZV3TypeClass::chromatixMLCZV3TypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(moduleID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(enableFlag);
    PARAMETER_INITIALIZE(detectionZoneV3Count);
    PARAMETER_INITIALIZE(detectionZoneV3ID);
    PARAMETER_INITIALIZE(detectionZoneV3);
    PARAMETER_INITIALIZE(MLCZV3Count);
    PARAMETER_INITIALIZE(MLCZV3ID);
    PARAMETER_INITIALIZE(MLCZV3);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixMLCZV3TypeClass::chromatixMLCZV3TypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(moduleID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(enableFlag);
    PARAMETER_INITIALIZE(detectionZoneV3);
    PARAMETER_INITIALIZE(MLCZV3);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixMLCZV3TypeClass::~chromatixMLCZV3TypeClass()
{
    UnloadchromatixMLCZV3Type(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixMLCZV3TypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "SFMLCZV3")) == 0)
    {
        name = "SFMLCZV3";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbMLCZoneConfigTypeV3
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixMLCZV3TypeClass::LoadawbMLCZoneConfigTypeV3(
    ParameterFileSymbolTableEntry* entry,
    awbMLCZoneConfigTypeV3* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String Description from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->Description = NULL;
        result = result && stringPointerEntry->ReadString(&structure->Description, count, alignment);
    }
    result = result && entry->Read(&structure->groupID, alignment);
    structure->zoneType = (awbglobalelements::awbZoneType)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->triggerLevel, alignment);
    for (UINT32 i = 0; result && i < 3; i++)
    {
        structure->triggerCtrlType[i] = (awbglobalelements::awbTriggerCtrlType)entry->ReadEnum(&result, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbMLCDetecionZoneTypeV3
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixMLCZV3TypeClass::LoadawbMLCDetecionZoneTypeV3(
    ParameterFileSymbolTableEntry* entry,
    awbMLCDetecionZoneTypeV3* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadawbMLCZoneConfigTypeV3(entry, &structure->zoneConfigData, alignment);
    result = result && awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbglobalelements::awbTriggerDataZoneType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbTriggerDataZoneType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modMLCZoneWeightDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixMLCZV3TypeClass::LoadmodMLCZoneWeightDataType(
    ParameterFileSymbolTableEntry* entry,
    modMLCZoneWeightDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 2; i++)
    {
        structure->triggerType[i] = (awbglobalelements::awbTriggerCtrlType)entry->ReadEnum(&result, alignment);
    }
    result = result && awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbglobalelements::awbSAConfidenceLevel2Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbSAConfidenceLevel2Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbMLCZoneTypeV3
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixMLCZV3TypeClass::LoadawbMLCZoneTypeV3(
    ParameterFileSymbolTableEntry* entry,
    awbMLCZoneTypeV3* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadawbMLCZoneConfigTypeV3(entry, &structure->zoneConfigData, alignment);
    result = result && awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbglobalelements::awbTriggerDataZoneLevel1Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbTriggerDataZoneLevel1Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    // Reading Array MLCZoneWeight from symbol table
    {
        result = result && entry->Read(&structure->MLCZoneWeightCount, alignment);
        structure->MLCZoneWeightID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->MLCZoneWeight = PARAMETER_NEW modMLCZoneWeightDataType[structure->MLCZoneWeightCount];
        }
        if (!result || structure->MLCZoneWeight == NULL)
        {
            structure->MLCZoneWeightCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->MLCZoneWeightCount; i++)
        {
            result = LoadmodMLCZoneWeightDataType(pointerEntry, &structure->MLCZoneWeight[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixMLCZV3Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixMLCZV3TypeClass::LoadchromatixMLCZV3Type(
    ParameterFileSymbolTableEntry* entry,
    chromatixMLCZV3Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadmoduleIDType(entry, &structure->moduleID, alignment);
    result = result && Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && entry->Read(&structure->enableFlag, alignment);

    // Reading Array detectionZoneV3 from symbol table
    {
        result = result && entry->Read(&structure->detectionZoneV3Count, alignment);
        structure->detectionZoneV3ID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->detectionZoneV3 = PARAMETER_NEW awbMLCDetecionZoneTypeV3[structure->detectionZoneV3Count];
        }
        if (!result || structure->detectionZoneV3 == NULL)
        {
            structure->detectionZoneV3Count = 0;
        }
        for (UINT32 i = 0; result && i < structure->detectionZoneV3Count; i++)
        {
            result = LoadawbMLCDetecionZoneTypeV3(pointerEntry, &structure->detectionZoneV3[i], alignment);
        }
    }

    // Reading Array MLCZV3 from symbol table
    {
        result = result && entry->Read(&structure->MLCZV3Count, alignment);
        structure->MLCZV3ID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->MLCZV3 = PARAMETER_NEW awbMLCZoneTypeV3[structure->MLCZV3Count];
        }
        if (!result || structure->MLCZV3 == NULL)
        {
            structure->MLCZV3Count = 0;
        }
        for (UINT32 i = 0; result && i < structure->MLCZV3Count; i++)
        {
            result = LoadawbMLCZoneTypeV3(pointerEntry, &structure->MLCZV3[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixMLCZV3TypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixMLCZV3Type::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixMLCZV3TypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixMLCZV3Type::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbMLCZoneConfigTypeV3
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixMLCZV3TypeClass::UnloadawbMLCZoneConfigTypeV3(
    awbMLCZoneConfigTypeV3* structure)
{
    PARAMETER_DELETE[] structure->Description;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbMLCDetecionZoneTypeV3
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixMLCZV3TypeClass::UnloadawbMLCDetecionZoneTypeV3(
    awbMLCDetecionZoneTypeV3* structure)
{
    UnloadawbMLCZoneConfigTypeV3(&structure->zoneConfigData);
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modMLCZoneWeightDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixMLCZV3TypeClass::UnloadmodMLCZoneWeightDataType(
    modMLCZoneWeightDataType* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        awbglobalelements::awbglobalelementsClass::UnloadawbSAConfidenceLevel2Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbMLCZoneTypeV3
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixMLCZV3TypeClass::UnloadawbMLCZoneTypeV3(
    awbMLCZoneTypeV3* structure)
{
    UnloadawbMLCZoneConfigTypeV3(&structure->zoneConfigData);
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        awbglobalelements::awbglobalelementsClass::UnloadawbTriggerDataZoneLevel1Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
    for (UINT32 i = 0; i < structure->MLCZoneWeightCount; i++)
    {
        UnloadmodMLCZoneWeightDataType(&structure->MLCZoneWeight[i]);
    }
    PARAMETER_DELETE[] structure->MLCZoneWeight;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixMLCZV3Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixMLCZV3TypeClass::UnloadchromatixMLCZV3Type(
    chromatixMLCZV3Type* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    for (UINT32 i = 0; i < structure->detectionZoneV3Count; i++)
    {
        UnloadawbMLCDetecionZoneTypeV3(&structure->detectionZoneV3[i]);
    }
    PARAMETER_DELETE[] structure->detectionZoneV3;
    for (UINT32 i = 0; i < structure->MLCZV3Count; i++)
    {
        UnloadawbMLCZoneTypeV3(&structure->MLCZV3[i]);
    }
    PARAMETER_DELETE[] structure->MLCZV3;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixMLCZV3TypeClass::Unloadparameter_versionStruct(
    chromatixMLCZV3Type::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixMLCZV3TypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixMLCZV3TypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixMLCZV3TypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixMLCZV3Type(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


MODMLCZV3_NAMESPACE_END
