////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  pdpc_3_0_0.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef PDPC_3_0_0_H
#define PDPC_3_0_0_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "ispglobalelements.h"

#define PDPC_3_0_0_NAMESPACE_BEGIN namespace pdpc_3_0_0 {
#define PDPC_3_0_0_NAMESPACE_END }

PDPC_3_0_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// pdpc30_rgn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct pdpc30_rgn_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fmax_flat
    ///
    /// Tuning Level:  often_tune
    /// Description:   Bad pixel maximum threshold factor at flat area
    /// Type:          uint
    /// Default Value: 68
    /// Range:         [0,255]
    /// Bit Depth:     8uQ6
    /// Conversion:    no conversion needed
    /// Notes:         larger values mean less hot pixels detection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             fmax_flat;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fmin_flat
    ///
    /// Tuning Level:  often_tune
    /// Description:   Bad pixel minimum threshold factor at flat area
    /// Type:          uint
    /// Default Value: 60
    /// Range:         [0,255]
    /// Bit Depth:     8uQ6
    /// Conversion:    no conversion needed
    /// Notes:         smaller values mean less cold pixels detection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             fmin_flat;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bpc_offset_flat
    ///
    /// Tuning Level:  often_tune
    /// Description:   offset used in single bad pixel detection at flat area
    /// Type:          uint
    /// Default Value: 10
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         larger values mean less bad pixels detection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             bpc_offset_flat;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bcc_offset_flat
    ///
    /// Tuning Level:  often_tune
    /// Description:   offset used in couplet bad pixel detection at flat area
    /// Type:          uint
    /// Default Value: 1000
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         larger values mean less bad pixels detection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             bcc_offset_flat;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fmax
    ///
    /// Tuning Level:  often_tune
    /// Description:   Bad pixel maximum threshold factor at non-flat area
    /// Type:          uint
    /// Default Value: 96
    /// Range:         [0,255]
    /// Bit Depth:     8uQ6
    /// Conversion:    no conversion needed
    /// Notes:         larger values mean less hot pixels detection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             fmax;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fmin
    ///
    /// Tuning Level:  often_tune
    /// Description:   Bad pixel minimum threshold factor at non-flat area
    /// Type:          uint
    /// Default Value: 32
    /// Range:         [0,255]
    /// Bit Depth:     8uQ6
    /// Conversion:    no conversion needed
    /// Notes:         smaller values mean less cold pixels detection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             fmin;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bpc_offset
    ///
    /// Tuning Level:  often_tune
    /// Description:   offset used in single bad pixel detection at non-flat area
    /// Type:          uint
    /// Default Value: 20
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         larger values mean less bad pixels detection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             bpc_offset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bcc_offset
    ///
    /// Tuning Level:  often_tune
    /// Description:   offset used in couplet bad pixel detection at non-flat area
    /// Type:          uint
    /// Default Value: 2000
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         larger values mean less bad pixels detection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             bcc_offset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flat_detection_en
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Whether to enable flat area detection
    /// Type:          uint
    /// Default Value: 1
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         enable bit to separate BP detetion in flat and non-flat areas, recommend stronger detection in flat
    ///                region, and eaker detection for non-flat region.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             flat_detection_en;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flat_th_recip
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Threshold for flat area detection
    /// Type:          uint
    /// Default Value: 32
    /// Range:         [0,1023]
    /// Bit Depth:     10uQ6
    /// Conversion:    no conversion needed
    /// Notes:         Larger value, less area being detected as flat
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             flat_th_recip;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// saturation_threshold
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   values equal or larger than threshold will be treated as sataturated. (T1 in zzHDR)
    /// Type:          uint
    /// Default Value: 1023
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         larger value, less likely to being saturated
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             saturation_threshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// use_same_channel_only
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   If enabled, only same channel pixels are used for BPC.
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         If enabled, only same channel pixels are used for detection and recovery
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             use_same_channel_only;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// single_bpc_only
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   If enabled, only correct single bad pixel
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         if enabled, only single bad pixels will be corrected, not couplets.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             single_bpc_only;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// directional_bpc_en
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   If enabled, the directional recovery will be used in the BP correction.
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         If enabled, better BP correction along edges, but consume more power.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             directional_bpc_en;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dir_tk
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Threshold ratio for directional detection, 9uQ6
    /// Type:          uint
    /// Default Value: 128
    /// Range:         [0,511]
    /// Bit Depth:     9uQ6
    /// Conversion:    no conversion needed
    /// Notes:         larger value, less direction being detected.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             dir_tk;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dir_offset
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Offset value for directional detection and recovery
    /// Type:          uint
    /// Default Value: 32
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         larger value, less direction being detected
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             dir_offset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fmax_gic
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Bad pixel maximum threshold factor for BP screening in GIC
    /// Type:          uint
    /// Default Value: 96
    /// Range:         [0,255]
    /// Bit Depth:     8uQ6
    /// Conversion:    no conversion needed
    /// Notes:         larger value, less pixels being detected as hot
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             fmax_gic;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bpc_offset_gic
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Offset used in the BP screening n GIC
    /// Type:          uint
    /// Default Value: 20
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         larger value, less pixel being detected as hot
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             bpc_offset_gic;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gic_thin_line_noise_offset
    ///
    /// Tuning Level:  often_tune
    /// Description:   offset used in thin line detection in GIC
    /// Type:          uint
    /// Default Value: 100
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         larger value, less region being detected as thin line.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             gic_thin_line_noise_offset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gic_filter_strength
    ///
    /// Tuning Level:  often_tune
    /// Description:   filter strength for GIC
    /// Type:          uint
    /// Default Value: 64
    /// Range:         [0,511]
    /// Bit Depth:     9uQ6
    /// Conversion:    no conversion needed
    /// Notes:         larger value, stronger GIC
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             gic_filter_strength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// noise_std_lut_tab
    ///
    /// Tuning Level:  must_tune
    /// Description:   65-entry shot noise profile (std) from measurement.
    /// Type:          uint
    /// Default Value: 0 6 9 11 12 14 15 16 18 19 20 21 22 23 24 24 25 26 27 27 28 29 30 30 31 32 32 33 33 34 35 35 36 36 37 37 38 39 39 40 40 41 41 42 42 43 43 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44
    /// Range:         [0,512]
    /// Bit Depth:     14uQ0
    /// Length:        65
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct noise_std_lut_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// noise_std_lut - Array
        ///
        /// Tuning Level:  must_tune
        /// Default Value: 0 6 9 11 12 14 15 16 18 19 20 21 22 23 24 24 25 26 27 27 28 29 30 30 31 32 32 33 33 34 35 35 36 36 37 37 38 39 39 40 40 41 41 42 42 43 43 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44 44
        /// Length:        65
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT noise_std_lut[65];
    } noise_std_lut_tab;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_pdpc30_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_pdpc30_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::trigger_pt_type_aec aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// pdpc30_rgn_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    pdpc30_rgn_dataType pdpc30_rgn_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_pdpc30_hdr_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_pdpc30_hdr_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type_aec_hdr hdr_aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct hdr_aec_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_pdpc30_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                   mod_pdpc30_aec_dataCount;
        UINT32                   mod_pdpc30_aec_dataID;
        mod_pdpc30_aec_dataType* mod_pdpc30_aec_data;
    } hdr_aec_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_pdpc30_drc_gain_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_pdpc30_drc_gain_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// drc_gain_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type drc_gain_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// drc_gain_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct drc_gain_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_pdpc30_hdr_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                       mod_pdpc30_hdr_aec_dataCount;
        UINT32                       mod_pdpc30_hdr_aec_dataID;
        mod_pdpc30_hdr_aec_dataType* mod_pdpc30_hdr_aec_data;
    } drc_gain_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_pdpc30_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_pdpc30_coreType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mod_pdpc30_drc_gain_data - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                        mod_pdpc30_drc_gain_dataCount;
    UINT32                        mod_pdpc30_drc_gain_dataID;
    mod_pdpc30_drc_gain_dataType* mod_pdpc30_drc_gain_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_pdpc30Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_pdpc30Type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable_section
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct enable_sectionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        globalelements::enable_flag_type enable;
        globalelements::enable_flag_type pdpc_enable;
        globalelements::enable_flag_type bpc_enable;
        globalelements::enable_flag_type gic_enable;
    } enable_section;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_variables
    ///
    /// Default Value: control_drc_gain, control_aec_exp_sensitivity_ratio, control_gain
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_variablesStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// control_var_type - Array
        /// Default Value: control_drc_gain, control_aec_exp_sensitivity_ratio, control_gain
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        enum class control_var_typeEnum
        {
            control_lux_idx                   = 0,
            control_gain                      = 1,
            control_drc_gain                  = 2,
            control_exp_time_ratio            = 3,
            control_aec_exp_sensitivity_ratio = 4,
            control_exp_gain_ratio            = 5
        } control_var_type[3];
    } control_variables;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_method
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_methodStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_exp_control
        /// Default Value: control_gain
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_type     aec_exp_control;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_hdr_control
        /// Default Value: control_aec_exp_sensitivity_ratio
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_hdr_type aec_hdr_control;
    } control_method;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dynamic_enable_triggers
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct dynamic_enable_triggersStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// bpc_enable
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct bpc_enableStruct
        {
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// Binary file symbol table entry ID
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32 SymbolTableID;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// enable
            ///
            /// Tuning Level:  rarely_tune
            /// Description:   enable bad pixel correction module
            /// Type:          int
            /// Default Value: 0
            /// Range:         [0,1]
            /// Bit Depth:     1uQ0
            /// Conversion:    no conversion needed
            /// Notes:         none
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            globalelements::enable_flag_type        enable;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_control_var
            ///
            /// Tuning Level:  rarely_tune
            /// Description:   enable bad pixel correction module
            /// Type:          uint
            /// Default Value: control_gain
            /// Range:         [0,1]
            /// Bit Depth:     1uQ0
            /// Conversion:    no conversion needed
            /// Notes:         none
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::control_var_type        hyst_control_var;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_mode
            /// Default Value: UPWARD
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::hyst_direction          hyst_mode;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_trigger
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::trigger_pt_couplet_type hyst_trigger;
        } bpc_enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// gic_enable
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct gic_enableStruct
        {
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// Binary file symbol table entry ID
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32 SymbolTableID;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// enable
            ///
            /// Tuning Level:  rarely_tune
            /// Description:   enable green imbalance correction module
            /// Type:          int
            /// Default Value: 0
            /// Range:         [0,1]
            /// Bit Depth:     1uQ0
            /// Conversion:    no conversion needed
            /// Notes:         none
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            globalelements::enable_flag_type        enable;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_control_var
            ///
            /// Tuning Level:  rarely_tune
            /// Description:   enable green imbalance correction module
            /// Type:          uint
            /// Default Value: control_gain
            /// Range:         [0,1]
            /// Bit Depth:     1uQ0
            /// Conversion:    no conversion needed
            /// Notes:         none
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::control_var_type        hyst_control_var;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_mode
            /// Default Value: UPWARD
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::hyst_direction          hyst_mode;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_trigger
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::trigger_pt_couplet_type hyst_trigger;
        } gic_enable;
    } dynamic_enable_triggers;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_pdpc30_core
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_pdpc30_coreType chromatix_pdpc30_core;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_pdpc30TypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatix_pdpc30TypeClass : public ParameterModule, public chromatix_pdpc30Type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 3;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_pdpc30TypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_pdpc30TypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatix_pdpc30TypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load pdpc30_rgn_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadpdpc30_rgn_dataType(
        ParameterFileSymbolTableEntry* entry,
        pdpc30_rgn_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load pdpc30_rgn_dataType_noise_std_lut_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadpdpc30_rgn_dataType_noise_std_lut_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        pdpc30_rgn_dataType::noise_std_lut_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_pdpc30_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_pdpc30_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_pdpc30_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_pdpc30_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_pdpc30_hdr_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_pdpc30_hdr_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_pdpc30_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_pdpc30_hdr_aec_dataType_hdr_aec_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_pdpc30_hdr_aec_dataType::hdr_aec_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_pdpc30_drc_gain_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_pdpc30_drc_gain_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_pdpc30_drc_gain_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_pdpc30_drc_gain_dataType_drc_gain_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_pdpc30_drc_gain_dataType_drc_gain_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_pdpc30_drc_gain_dataType::drc_gain_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_pdpc30_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_pdpc30_coreType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_pdpc30_coreType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_pdpc30Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_pdpc30Type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_pdpc30Type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load enable_sectionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadenable_sectionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_pdpc30Type::enable_sectionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_pdpc30Type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_pdpc30Type::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_variablesStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_variablesStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_pdpc30Type::control_variablesStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_methodStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_methodStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_pdpc30Type::control_methodStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dynamic_enable_triggersStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddynamic_enable_triggersStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_pdpc30Type::dynamic_enable_triggersStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dynamic_enable_triggersStruct_bpc_enableStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddynamic_enable_triggersStruct_bpc_enableStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_pdpc30Type::dynamic_enable_triggersStruct::bpc_enableStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dynamic_enable_triggersStruct_gic_enableStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddynamic_enable_triggersStruct_gic_enableStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_pdpc30Type::dynamic_enable_triggersStruct::gic_enableStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_pdpc30_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_pdpc30_hdr_aec_dataType(
        mod_pdpc30_hdr_aec_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_pdpc30_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_pdpc30_hdr_aec_dataType_hdr_aec_dataStruct(
        mod_pdpc30_hdr_aec_dataType::hdr_aec_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_pdpc30_drc_gain_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_pdpc30_drc_gain_dataType(
        mod_pdpc30_drc_gain_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_pdpc30_drc_gain_dataType_drc_gain_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_pdpc30_drc_gain_dataType_drc_gain_dataStruct(
        mod_pdpc30_drc_gain_dataType::drc_gain_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_pdpc30_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_pdpc30_coreType(
        chromatix_pdpc30_coreType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_pdpc30Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_pdpc30Type(
        chromatix_pdpc30Type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatix_pdpc30Type::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatix_pdpc30TypeClass

PDPC_3_0_0_NAMESPACE_END
#endif // PDPC_3_0_0_H

