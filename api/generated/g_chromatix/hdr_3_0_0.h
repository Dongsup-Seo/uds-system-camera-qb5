////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  hdr_3_0_0.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef HDR_3_0_0_H
#define HDR_3_0_0_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "ispglobalelements.h"

#define HDR_3_0_0_NAMESPACE_BEGIN namespace hdr_3_0_0 {
#define HDR_3_0_0_NAMESPACE_END }

HDR_3_0_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// hdr30_rgn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct hdr30_rgn_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_static_th2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Static region threshold; value larger than th2 means non-static region
    /// Type:          uint
    /// Default Value: 200
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_mac_static_th2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_static_dth_log2
    ///
    /// Tuning Level:  never_tune
    /// Description:   Log value for static switching
    /// Type:          uint
    /// Default Value: 7
    /// Range:         [2,14]
    /// Bit Depth:     4uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_mac_static_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_lowlight_strength
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Weight on short exposure for lowlight, 5uQ4
    /// Type:          uint
    /// Default Value: 16
    /// Range:         [0,16]
    /// Bit Depth:     5uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_mac_lowlight_strength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_dark_th2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Dark threshold; intensity threshold between dark for lowlight. (Short exposure weight is 0 for dark
    ///                region)
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_mac_dark_th2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_lowlight_dth_log2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Log value for transition between dark and lowlight
    /// Type:          uint
    /// Default Value: 8
    /// Range:         [2,14]
    /// Bit Depth:     4uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_mac_lowlight_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_motion_strictness
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Motion strictness weight,5uQ4
    /// Type:          uint
    /// Default Value: 8
    /// Range:         [0,16]
    /// Bit Depth:     5uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_mac_motion_strictness;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_hl_detail_positive_w
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Highlight region positive detail gain, 5uQ4
    /// Type:          uint
    /// Default Value: 8
    /// Range:         [0,16]
    /// Bit Depth:     5uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_hl_detail_positive_w;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_hl_detail_negative_w
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Highlight region negative detail gain, 5uQ4
    /// Type:          uint
    /// Default Value: 16
    /// Range:         [0,16]
    /// Bit Depth:     5uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_hl_detail_negative_w;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_hl_detail_th_w
    ///
    /// Tuning Level:  never_tune
    /// Description:   Highlight region detail threshold weight, 5uQ4
    /// Type:          uint
    /// Default Value: 16
    /// Range:         [0,16]
    /// Bit Depth:     5uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_hl_detail_th_w;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_hl_motion_th_log2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Log value of intensity to motion threshold ratio
    /// Type:          uint
    /// Default Value: 1
    /// Range:         [0,12]
    /// Bit Depth:     4uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_hl_motion_th_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_detail_th_w
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Detail threshold scaling factor, 6uQ6
    /// Type:          uint
    /// Default Value: 8
    /// Range:         [0,63]
    /// Bit Depth:     8uQ8
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_detail_th_w;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_detail_coring_strength
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Coring strength, 5uQ4
    /// Type:          uint
    /// Default Value: 16
    /// Range:         [0,16]
    /// Bit Depth:     5uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_detail_coring_strength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_detail_coring_th2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Threshold for coring
    /// Type:          uint
    /// Default Value: 400
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_detail_coring_th2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_detail_coring_dth_log2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Log value for coring threshold ( log2(th2-th1))
    /// Type:          uint
    /// Default Value: 8
    /// Range:         [2,14]
    /// Bit Depth:     4uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_detail_coring_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_motion_dt0
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Additive term to noise estimate
    /// Type:          uint
    /// Default Value: 10
    /// Range:         [0,255]
    /// Bit Depth:     8uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_mac_motion_dt0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_edge_scale
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Edge value scaling factor, 6uQ6
    /// Type:          uint
    /// Default Value: 8
    /// Range:         [0,63]
    /// Bit Depth:     8uQ8
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_edge_scale;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_edge_short_exp_w
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Weight of short exposure edge map
    /// Type:          uint
    /// Default Value: 8
    /// Range:         [0,16]
    /// Bit Depth:     5uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_edge_short_exp_w;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_edge_th1
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Threshold 1 for edge switching function
    /// Type:          uint
    /// Default Value: 7
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_edge_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_edge_dth_log2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Log value for edge switching function ( log2(th2-th1))
    /// Type:          uint
    /// Default Value: 4
    /// Range:         [2,14]
    /// Bit Depth:     4uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_edge_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_blending_w_min
    ///
    /// Tuning Level:  often_tune
    /// Description:   Minimum edge blending weight ,5uQ4
    /// Type:          uint
    /// Default Value: 3
    /// Range:         [0,16]
    /// Bit Depth:     5uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_rec_blending_w_min;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_blending_w_max
    ///
    /// Tuning Level:  often_tune
    /// Description:   Maximum edge blending weight,5uQ4
    /// Type:          uint
    /// Default Value: 16
    /// Range:         [0,16]
    /// Bit Depth:     5uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_rec_blending_w_max;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_highlight_strength
    ///
    /// Tuning Level:  often_tune
    /// Description:   Weight on short exposure for highlight, 5uQ4
    /// Type:          uint
    /// Default Value: 16
    /// Range:         [0,16]
    /// Bit Depth:     5uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_mac_highlight_strength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_highlight_dth_log2
    ///
    /// Tuning Level:  often_tune
    /// Description:   Log value for highlight transition (Should be recalculated by SW as below) hdr_mac_highlight_dth_log2 =
    ///                round( log2( ( (hdr_mac_highlight_dth_log2-2)* hdr_long_exp_saturation)/64 ) )
    /// Type:          uint
    /// Default Value: 10
    /// Range:         [2,14]
    /// Bit Depth:     4uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_mac_highlight_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_dilation
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   This value represents the motion dilation max filter size; (2*hdr_mac_dilation+1 size)
    /// Type:          uint
    /// Default Value: 2
    /// Range:         [0,5]
    /// Bit Depth:     3uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_mac_dilation;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_hdr30_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_hdr30_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::trigger_pt_type_aec aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr30_rgn_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    hdr30_rgn_dataType  hdr30_rgn_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_hdr30_hdr_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_hdr30_hdr_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type_aec_hdr hdr_aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct hdr_aec_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_hdr30_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                  mod_hdr30_aec_dataCount;
        UINT32                  mod_hdr30_aec_dataID;
        mod_hdr30_aec_dataType* mod_hdr30_aec_data;
    } hdr_aec_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_hdr30_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_hdr30_coreType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mod_hdr30_hdr_aec_data - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                      mod_hdr30_hdr_aec_dataCount;
    UINT32                      mod_hdr30_hdr_aec_dataID;
    mod_hdr30_hdr_aec_dataType* mod_hdr30_hdr_aec_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_hdr30_reserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_hdr30_reserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_linear_mode
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   This bit enables MAC HDR linear mode (1) or normal mode (0). When in linear mode, HDR processing is
    ///                bypassed except for applying WB gain, Exposure Ratio Compensation, and inverse WB gain.
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_linear_mode;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_lsb_align
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   This bit forces HDR output LSB alignment 0x0: T2 MSB referred, 0x1: T1 LSB referred
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_lsb_align;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_motion_scale
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Motion value scaling factor, 6uQ6
    /// Type:          uint
    /// Default Value: 8
    /// Range:         [0,63]
    /// Bit Depth:     6uQ6
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_mac_motion_scale;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_motion_th1
    ///
    /// Tuning Level:  often_tune
    /// Description:   Noise floor value for motion detection
    /// Type:          uint
    /// Default Value: 1
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_mac_motion_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_motion_dth_log2
    ///
    /// Tuning Level:  often_tune
    /// Description:   Log value for motion ( th1 = th2-(2^hdr_mac_motion_dth_log2) )
    /// Type:          uint
    /// Default Value: 4
    /// Range:         [2,14]
    /// Bit Depth:     4uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_mac_motion_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_motion_g2_w_min
    ///
    /// Tuning Level:  often_tune
    /// Description:   Low-motion area T2 weight, 5uQ4
    /// Type:          uint
    /// Default Value: 4
    /// Range:         [0,16]
    /// Bit Depth:     5uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_mac_motion_g2_w_min;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_motion_g2_w_max
    ///
    /// Tuning Level:  often_tune
    /// Description:   Motion area T2 weight, 5uQ4
    /// Type:          uint
    /// Default Value: 16
    /// Range:         [0,16]
    /// Bit Depth:     5uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  hdr_mac_motion_g2_w_max;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_hfs_act_weight
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Weight between hfs_act and edge map, 5uQ4
    /// Type:          uint
    /// Default Value: 16
    /// Range:         [0,16]
    /// Bit Depth:     5uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_mac_hfs_act_weight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_hfs_act_th2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Value larger than th2 means high HFS activity
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0,16383]
    /// Bit Depth:     14uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_mac_hfs_act_th2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_hfs_act_dth_log2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Log value of HFS activity threshold range ( th1 = th2-(2^hdr_mac_hfs_act_dth_log2) )
    /// Type:          uint
    /// Default Value: 4
    /// Range:         [2,14]
    /// Bit Depth:     4uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_mac_hfs_act_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_g_grad_th1
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Threshold for G gradient
    /// Type:          uint
    /// Default Value: 32
    /// Range:         [0,4095]
    /// Bit Depth:     12uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_g_grad_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_g_grad_dth_log2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Log value for th2-th1 G gradient
    /// Type:          uint
    /// Default Value: 5
    /// Range:         [0,12]
    /// Bit Depth:     4uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_g_grad_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_rb_grad_th1
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Threshold for R/B gradient
    /// Type:          uint
    /// Default Value: 32
    /// Range:         [0,4095]
    /// Bit Depth:     12uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_rb_grad_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_rec_rb_grad_dth_log2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Log value for th2-th1 R/B gradient
    /// Type:          uint
    /// Default Value: 5
    /// Range:         [0,12]
    /// Bit Depth:     4uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_rec_rb_grad_dth_log2;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_hdr30Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_hdr30Type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable_section
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct enable_sectionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        globalelements::enable_flag_type hdr_enable;
    } enable_section;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_variables
    ///
    /// Default Value: control_aec_exp_sensitivity_ratio, control_gain
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_variablesStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// control_var_type - Array
        /// Default Value: control_aec_exp_sensitivity_ratio, control_gain
        /// Length:        2
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        enum class control_var_typeEnum
        {
            control_lux_idx                   = 0,
            control_gain                      = 1,
            control_exp_time_ratio            = 3,
            control_aec_exp_sensitivity_ratio = 4,
            control_exp_gain_ratio            = 5
        } control_var_type[2];
    } control_variables;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_method
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_methodStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_exp_control
        /// Default Value: control_gain
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_type     aec_exp_control;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_hdr_control
        /// Default Value: control_aec_exp_sensitivity_ratio
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_hdr_type aec_hdr_control;
    } control_method;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_hdr30_reserve
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_hdr30_reserveType chromatix_hdr30_reserve;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_hdr30_core
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_hdr30_coreType    chromatix_hdr30_core;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_hdr30TypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatix_hdr30TypeClass : public ParameterModule, public chromatix_hdr30Type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 3;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_hdr30TypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_hdr30TypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatix_hdr30TypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load hdr30_rgn_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadhdr30_rgn_dataType(
        ParameterFileSymbolTableEntry* entry,
        hdr30_rgn_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_hdr30_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_hdr30_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_hdr30_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_hdr30_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_hdr30_hdr_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_hdr30_hdr_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_hdr30_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_hdr30_hdr_aec_dataType_hdr_aec_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_hdr30_hdr_aec_dataType::hdr_aec_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_hdr30_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_hdr30_coreType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr30_coreType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_hdr30_reserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_hdr30_reserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr30_reserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_hdr30Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_hdr30Type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr30Type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load enable_sectionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadenable_sectionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr30Type::enable_sectionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr30Type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr30Type::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_variablesStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_variablesStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr30Type::control_variablesStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_methodStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_methodStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr30Type::control_methodStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_hdr30_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_hdr30_hdr_aec_dataType(
        mod_hdr30_hdr_aec_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_hdr30_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_hdr30_hdr_aec_dataType_hdr_aec_dataStruct(
        mod_hdr30_hdr_aec_dataType::hdr_aec_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_hdr30_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_hdr30_coreType(
        chromatix_hdr30_coreType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_hdr30Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_hdr30Type(
        chromatix_hdr30Type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatix_hdr30Type::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatix_hdr30TypeClass

HDR_3_0_0_NAMESPACE_END
#endif // HDR_3_0_0_H

