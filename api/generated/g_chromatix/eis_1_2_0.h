////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  eis_1_2_0.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef EIS_1_2_0_H
#define EIS_1_2_0_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "ispglobalelements.h"

#define EIS_1_2_0_NAMESPACE_BEGIN namespace eis_1_2_0 {
#define EIS_1_2_0_NAMESPACE_END }

EIS_1_2_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_eis12_reserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_eis12_reserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// top
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct topStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// minimal_total_margin
        ///
        /// Tuning Level:  often_tune
        /// Description:   minimal_total_margin == total margin_x == requested_total_margins_x. total margins ratio for x axiss
        ///                (physical + virtual), with respect to input image size and represent sum of both sides. If physical
        ///                margins are not sufficient, virtual margins will be used to get to the minimal_total_margin.
        /// Type:          float
        /// Default Value: 0.2
        /// Range:         [0.1, 0.67]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               minimal_total_margin;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// requested_total_margins_y_fhd_30
        ///
        /// Tuning Level:  often_tune
        /// Description:   Requested total margins ratio for y axis, with respect to input image size and represent sum of both
        ///                sides. This is used for requesting physical margins and also to be sent to GeoLib. Actual y margins would
        ///                be between [minimal_total_margin, requested_total_margins_y].
        /// Type:          float
        /// Default Value: 0.2
        /// Range:         [0, 0.67]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               requested_total_margins_y_fhd_30;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// requested_total_margins_y_fhd_60
        ///
        /// Tuning Level:  often_tune
        /// Description:   Requested total margins ratio for y axis, with respect to input image size and represent sum of both
        ///                sides. This is used for requesting physical margins and also to be sent to GeoLib. Actual y margins would
        ///                be between [minimal_total_margin, requested_total_margins_y].
        /// Type:          float
        /// Default Value: 0.2
        /// Range:         [0, 0.67]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               requested_total_margins_y_fhd_60;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// requested_total_margins_y_fhd_120
        ///
        /// Tuning Level:  often_tune
        /// Description:   Requested total margins ratio for y axis, with respect to input image size and represent sum of both
        ///                sides. This is used for requesting physical margins and also to be sent to GeoLib. Actual y margins would
        ///                be between [minimal_total_margin, requested_total_margins_y].
        /// Type:          float
        /// Default Value: 0.2
        /// Range:         [0, 0.67]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               requested_total_margins_y_fhd_120;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// requested_total_margins_y_4k_30
        ///
        /// Tuning Level:  often_tune
        /// Description:   Requested total margins ratio for y axis, with respect to input image size and represent sum of both
        ///                sides. This is used for requesting physical margins and also to be sent to GeoLib. Actual y margins would
        ///                be between [minimal_total_margin, requested_total_margins_y].
        /// Type:          float
        /// Default Value: 0.6
        /// Range:         [0, 0.67]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               requested_total_margins_y_4k_30;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// requested_total_margins_y_4k_60
        ///
        /// Tuning Level:  often_tune
        /// Description:   Requested total margins ratio for y axis, with respect to input image size and represent sum of both
        ///                sides. This is used for requesting physical margins and also to be sent to GeoLib. Actual y margins would
        ///                be between [minimal_total_margin, requested_total_margins_y].
        /// Type:          float
        /// Default Value: 0.2
        /// Range:         [0, 0.67]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               requested_total_margins_y_4k_60;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// requested_total_margins_y_4k_120
        ///
        /// Tuning Level:  often_tune
        /// Description:   Requested total margins ratio for y axis, with respect to input image size and represent sum of both
        ///                sides. This is used for requesting physical margins and also to be sent to GeoLib. Actual y margins would
        ///                be between [minimal_total_margin, requested_total_margins_y].
        /// Type:          float
        /// Default Value: 0.2
        /// Range:         [0, 0.67]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               requested_total_margins_y_4k_120;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// requested_total_margins_y_8k_30
        ///
        /// Tuning Level:  often_tune
        /// Description:   Requested total margins ratio for y axis, with respect to input image size and represent sum of both
        ///                sides. This is used for requesting physical margins and also to be sent to GeoLib. Actual y margins would
        ///                be between [minimal_total_margin, requested_total_margins_y].
        /// Type:          float
        /// Default Value: 0.2
        /// Range:         [0, 0.67]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               requested_total_margins_y_8k_30;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// requested_total_margins_y_8k_60
        ///
        /// Tuning Level:  often_tune
        /// Description:   Requested total margins ratio for y axis, with respect to input image size and represent sum of both
        ///                sides. This is used for requesting physical margins and also to be sent to GeoLib. Actual y margins would
        ///                be between [minimal_total_margin, requested_total_margins_y].
        /// Type:          float
        /// Default Value: 0.2
        /// Range:         [0, 0.67]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               requested_total_margins_y_8k_60;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// requested_total_margins_y_8k_120
        ///
        /// Tuning Level:  often_tune
        /// Description:   Requested total margins ratio for y axis, with respect to input image size and represent sum of both
        ///                sides. This is used for requesting physical margins and also to be sent to GeoLib. Actual y margins would
        ///                be between [minimal_total_margin, requested_total_margins_y].
        /// Type:          float
        /// Default Value: 0.2
        /// Range:         [0, 0.67]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               requested_total_margins_y_8k_120;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// future_buffer_size_fhd_30
        ///
        /// Tuning Level:  often_tune
        /// Description:   future looking buffer size.
        /// Type:          uint
        /// Default Value: 30
        /// Range:         [10, 120]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              future_buffer_size_fhd_30;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// future_buffer_size_fhd_60
        ///
        /// Tuning Level:  often_tune
        /// Description:   future looking buffer size.
        /// Type:          uint
        /// Default Value: 60
        /// Range:         [10, 120]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              future_buffer_size_fhd_60;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// future_buffer_size_fhd_120
        ///
        /// Tuning Level:  often_tune
        /// Description:   future looking buffer size.
        /// Type:          uint
        /// Default Value: 60
        /// Range:         [10, 120]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              future_buffer_size_fhd_120;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// future_buffer_size_4k_30
        ///
        /// Tuning Level:  often_tune
        /// Description:   future looking buffer size.
        /// Type:          uint
        /// Default Value: 30
        /// Range:         [10, 120]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              future_buffer_size_4k_30;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// future_buffer_size_4k_60
        ///
        /// Tuning Level:  often_tune
        /// Description:   future looking buffer size.
        /// Type:          uint
        /// Default Value: 40
        /// Range:         [10, 120]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              future_buffer_size_4k_60;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// future_buffer_size_4k_120
        ///
        /// Tuning Level:  often_tune
        /// Description:   future looking buffer size.
        /// Type:          uint
        /// Default Value: 40
        /// Range:         [10, 120]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              future_buffer_size_4k_120;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// future_buffer_size_8k_30
        ///
        /// Tuning Level:  often_tune
        /// Description:   future looking buffer size.
        /// Type:          uint
        /// Default Value: 15
        /// Range:         [10, 120]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              future_buffer_size_8k_30;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// future_buffer_size_8k_60
        ///
        /// Tuning Level:  often_tune
        /// Description:   future looking buffer size.
        /// Type:          uint
        /// Default Value: 15
        /// Range:         [10, 120]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              future_buffer_size_8k_60;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// future_buffer_size_8k_120
        ///
        /// Tuning Level:  often_tune
        /// Description:   future looking buffer size.
        /// Type:          uint
        /// Default Value: 15
        /// Range:         [10, 120]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              future_buffer_size_8k_120;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// gyro_frequency
        ///
        /// Tuning Level:  must_tune
        /// Description:   Requested gyro sampling frequency in Hz. Has to match actual gyro sampling frequency.
        /// Type:          uint
        /// Default Value: 833
        /// Range:         [200, 2000]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              gyro_frequency;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// ois_frequency
        ///
        /// Tuning Level:  must_tune
        /// Description:   Requested OIS sampling frequency in Hz. Has to match actual OIS sampling frequency.
        /// Type:          uint
        /// Default Value: 833
        /// Range:         [0, 2000]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              ois_frequency;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// acc_frequency
        ///
        /// Tuning Level:  must_tune
        /// Description:   Requested accelerometer sampling frequency in Hz. Has to match actual accelerometer sampling frequency.
        /// Type:          uint
        /// Default Value: 833
        /// Range:         [0, 2000]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              acc_frequency;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mag_frequency
        ///
        /// Tuning Level:  must_tune
        /// Description:   Requested magnetometer sampling frequency in Hz. Has to match actual magnetometer sampling frequency.
        /// Type:          uint
        /// Default Value: 833
        /// Range:         [0, 2000]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              mag_frequency;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_lut_param_0_tab
        ///
        /// Tuning Level:  never_tune
        /// Description:   Top Reserved Lut parameter 0.
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Length:        32
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct res_lut_param_0_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// res_lut_param_0 - Array
            ///
            /// Tuning Level:  never_tune
            /// Default Value: 0.0
            /// Length:        32
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            FLOAT res_lut_param_0[32];
        } res_lut_param_0_tab;
    } top;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// general
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct generalStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// focal_length
        ///
        /// Tuning Level:  must_tune
        /// Description:   Focal length in pixel units for horizontal size of 1920. This value is scaled for other resolutions.
        /// Type:          uint
        /// Default Value: 1450
        /// Range:         [0, 65535]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              focal_length;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// gyro_noise_floor
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   Gyro noise floor [rad/sec].
        /// Type:          float
        /// Default Value: 0.003
        /// Range:         [0, 0.1]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               gyro_noise_floor;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// ois_noise_floor
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   OIS noise floor [rad/sec].
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [0, 0.1]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               ois_noise_floor;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// acc_noise_floor
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   Accelerometer noise floor [m/s2].
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [0, 0.1]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               acc_noise_floor;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mag_noise_floor
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   Magnetometer noise floor [rad/sec].
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [0, 0.1]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               mag_noise_floor;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// output_grid_precision
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   Precision of the EIS output grid (will be overridden by 0 if HW not supports grid precision 1). 0: 35x27
        ///                samples (945 samples are used). 1: 67x51 samples (3417 samples are used).
        /// Type:          uint
        /// Default Value: 0
        /// Range:         [0, 1]
        /// Bit Depth:     1u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              output_grid_precision;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_1
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 1.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_1;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_2
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 2.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_2;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_3
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 3.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_3;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_4
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 4.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_4;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_5
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 5.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_5;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_6
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 6.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_6;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_7
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 7.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_7;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_8
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 8.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_8;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_9
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 9.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_9;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_10
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 10.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_10;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_lut_param_1_tab
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved LUT parameter 1.
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Length:        32
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct res_lut_param_1_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// res_lut_param_1 - Array
            ///
            /// Tuning Level:  never_tune
            /// Default Value: 0.0
            /// Length:        32
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            FLOAT res_lut_param_1[32];
        } res_lut_param_1_tab;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_lut_param_2_tab
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved LUT parameter 2.
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Length:        32
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct res_lut_param_2_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// res_lut_param_2 - Array
            ///
            /// Tuning Level:  never_tune
            /// Default Value: 0.0
            /// Length:        32
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            FLOAT res_lut_param_2[32];
        } res_lut_param_2_tab;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_lut_param_3_tab
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved LUT parameter 3.
        /// Default Value: 0
        /// Range:         [0, 4294967295]
        /// Bit Depth:     32u
        /// Length:        16
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct res_lut_param_3_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// res_lut_param_3 - Array
            ///
            /// Tuning Level:  never_tune
            /// Default Value: 0
            /// Length:        16
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32 res_lut_param_3[16];
        } res_lut_param_3_tab;
    } general;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// timing
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct timingStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// s3d_offset
        ///
        /// Tuning Level:  must_tune
        /// Description:   Offset between gyro timing and SOF timing in microseconds.
        /// Type:          int
        /// Default Value: 0
        /// Range:         [-30000, 30000]
        /// Bit Depth:     32s
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 s3d_offset;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// ois_offset
        ///
        /// Tuning Level:  must_tune
        /// Description:   Offset between OIS angles timing and SOF timing in microseconds.
        /// Type:          int
        /// Default Value: 0
        /// Range:         [-30000, 30000]
        /// Bit Depth:     32s
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 ois_offset;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// acc_offset
        ///
        /// Tuning Level:  must_tune
        /// Description:   Offset between accelerometer timing and SOF timing in microseconds.
        /// Type:          int
        /// Default Value: 0
        /// Range:         [-30000, 30000]
        /// Bit Depth:     32s
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 acc_offset;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mag_offset
        ///
        /// Tuning Level:  must_tune
        /// Description:   Offset between magnetometer timing and SOF timing in microseconds.
        /// Type:          int
        /// Default Value: 0
        /// Range:         [-30000, 30000]
        /// Bit Depth:     32s
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 mag_offset;
    } timing;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// blur_masking
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct blur_maskingStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Tuning Level:  often_tune
        /// Description:   Enable blur masking mechanism.
        /// Type:          uint
        /// Default Value: 0
        /// Range:         [0, 1]
        /// Bit Depth:     1u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// min_strength
        ///
        /// Tuning Level:  often_tune
        /// Description:   Minimal stabilization strength for strong blur ( estimated_blur is greater than or equal to
        ///                end_decrease_at_blur ).
        /// Type:          float
        /// Default Value: 0.85
        /// Range:         [0, 1]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  min_strength;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// exposure_time_th
        ///
        /// Tuning Level:  often_tune
        /// Description:   if (exp_time is greater than exposure_time_th) then blur masking feature is enabled. Otherwise disabled.
        ///                Units are seconds.
        /// Type:          float
        /// Default Value: 0.009
        /// Range:         [0, 0.04]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  exposure_time_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// start_decrease_at_blur
        ///
        /// Tuning Level:  often_tune
        /// Description:   Blur below this point won't decrease strength. Units are pixels out of 1920 resolutions. Blur above this
        ///                point will cause min_strength stabilization (in between start/end interpolate) Units are pixels out of
        ///                1920 resolutions. If (end_decrease_at_bluris greater thanstart_decrease_at_blur) then feature will be
        ///                disabled.
        /// Type:          float
        /// Default Value: 7.0
        /// Range:         [5, 100]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  start_decrease_at_blur;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// end_decrease_at_blur
        ///
        /// Tuning Level:  often_tune
        /// Description:   Blur below this point won't decrease strength. Units are pixels out of 1920 resolutions. Blur above this
        ///                point will cause min_strength stabilization (in between start/end interpolate) Units are pixels out of
        ///                1920 resolutions. If (end_decrease_at_bluris greater thanstart_decrease_at_blur) then feature will be
        ///                disabled.
        /// Type:          float
        /// Default Value: 15.0
        /// Range:         [5, 100]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  end_decrease_at_blur;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// pan_min_threshold
        ///
        /// Tuning Level:  often_tune
        /// Description:   Threshold for pan detection on the filter result [rad/sec]. Lower than pan_min_threshold is not a pan.
        ///                Higher than pan_max_threshold is a full pan. In between the weight is linear. Blur masking mechanism is
        ///                only active when no pan is detected.
        /// Type:          float
        /// Default Value: 0.1
        /// Range:         [0, 3.14]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  pan_min_threshold;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// pan_max_threshold
        ///
        /// Tuning Level:  often_tune
        /// Description:   Threshold for pan detection on the filter result [rad/sec]. Lower than pan_min_threshold is not a pan.
        ///                Higher than pan_max_threshold is a full pan. In between the weight is linear. Blur masking mechanism is
        ///                only active when no pan is detected.
        /// Type:          float
        /// Default Value: 0.1
        /// Range:         [0, 3.14]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  pan_max_threshold;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// blur_masking_res1
        ///
        /// Tuning Level:  often_tune
        /// Description:   blur_masking_res1.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  blur_masking_res1;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// blur_masking_res2
        ///
        /// Tuning Level:  often_tune
        /// Description:   blur_masking_res2.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  blur_masking_res2;
    } blur_masking;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lens_distortion_correction
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lens_distortion_correctionStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// ldc_grid_source
        ///
        /// Tuning Level:  often_tune
        /// Description:   0 = use grids defined here (local grid, only if ldc_grid_enable == 1, , otherwise no LDC). 1 = use grids
        ///                defined in ICA/LDC Chromatix (only if its valid, otherwise no LDC). Comment: Usually take grids from ICA
        ///                Chromatix unless the input FOV is different between Video with EIS or video without EIS. Or if the chip
        ///                doesn't contains ICA Chromatix.
        /// Type:          uint
        /// Default Value: 1
        /// Range:         [0, 1]
        /// Bit Depth:     1u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                                        ldc_grid_source;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// ldc_grid_enable
        ///
        /// Tuning Level:  often_tune
        /// Description:   Enable/validity for the grids below (defined under EIS Chromatix).
        /// Type:          uint
        /// Default Value: 0
        /// Range:         [0, 1]
        /// Bit Depth:     1u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                                        ldc_grid_enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// ldc_calib_domain
        ///
        /// Tuning Level:  often_tune
        /// Description:   0 = Invalid configuration for EIS local grid ( in ICA Chromatix it is calibration on full sensor FOV ). 1
        ///                = EIS local grid is calibrated on IFE Input @ DZ X1 domain (FOV). 2 = EIS local grid is calibrated on IFE
        ///                Output @ DZ X1 domain (FOV). Comment: EIS local grid means the grid defined below and not the one coming
        ///                from ICA Chromatix.
        /// Type:          uint
        /// Default Value: 1
        /// Range:         [0, 2]
        /// Bit Depth:     2u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                                        ldc_calib_domain;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// distorted_input_to_undistorted_ldc_grid_x_tab
        ///
        /// Tuning Level:  often_tune
        /// Description:   LDC grid in2out. Grid is defined on IFE output at digital zoom X1. FOV includes the EIS margins (image
        ///                could be 4:3 or any different ratio than 16:9).
        /// Default Value: 0
        /// Range:         [-131072, 131071]
        /// Bit Depth:     18s, Q4
        /// Length:        3417
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct distorted_input_to_undistorted_ldc_grid_x_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// distorted_input_to_undistorted_ldc_grid_x - Array
            ///
            /// Tuning Level:  often_tune
            /// Default Value: 0
            /// Length:        3417
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            INT32 distorted_input_to_undistorted_ldc_grid_x[3417];
        } distorted_input_to_undistorted_ldc_grid_x_tab;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// distorted_input_to_undistorted_ldc_grid_y_tab
        ///
        /// Tuning Level:  often_tune
        /// Description:   LDC grid in2out. Grid is defined on IFE output at digital zoom X1. FOV includes the EIS margins (image
        ///                could be 4:3 or any different ratio than 16:9).
        /// Default Value: 0
        /// Range:         [-131072, 131071]
        /// Bit Depth:     18s, Q4
        /// Length:        3417
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct distorted_input_to_undistorted_ldc_grid_y_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// distorted_input_to_undistorted_ldc_grid_y - Array
            ///
            /// Tuning Level:  often_tune
            /// Default Value: 0
            /// Length:        3417
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            INT32 distorted_input_to_undistorted_ldc_grid_y[3417];
        } distorted_input_to_undistorted_ldc_grid_y_tab;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// distorted_input_to_undistorted_ldc_grid_geometry
        ///
        /// Tuning Level:  often_tune
        /// Description:   Precision of the LDC in2out grid. 0: 35x27 samples (945 samples are used). 1: 67x51 samples (3417 samples
        ///                are used).
        /// Type:          uint
        /// Default Value: 0
        /// Range:         [0, 1]
        /// Bit Depth:     1u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                                        distorted_input_to_undistorted_ldc_grid_geometry;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// undistorted_to_distorted_input_ldc_grid_x_tab
        ///
        /// Tuning Level:  often_tune
        /// Description:   LDC grid out2in. Grid is defined on IFE output at digital zoom X1. FOV includes the EIS margins (image
        ///                could be 4:3 or any different ratio than 16:9).
        /// Default Value: 0
        /// Range:         [-131072, 131071]
        /// Bit Depth:     18s, Q4
        /// Length:        3417
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct undistorted_to_distorted_input_ldc_grid_x_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// undistorted_to_distorted_input_ldc_grid_x - Array
            ///
            /// Tuning Level:  often_tune
            /// Default Value: 0
            /// Length:        3417
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            INT32 undistorted_to_distorted_input_ldc_grid_x[3417];
        } undistorted_to_distorted_input_ldc_grid_x_tab;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// undistorted_to_distorted_input_ldc_grid_y_tab
        ///
        /// Tuning Level:  often_tune
        /// Description:   LDC grid out2in. Grid is defined on IFE output at digital zoom X1. FOV includes the EIS margins (image
        ///                could be 4:3 or any different ratio than 16:9).
        /// Default Value: 0
        /// Range:         [-131072, 131071]
        /// Bit Depth:     18s, Q4
        /// Length:        3417
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct undistorted_to_distorted_input_ldc_grid_y_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// undistorted_to_distorted_input_ldc_grid_y - Array
            ///
            /// Tuning Level:  often_tune
            /// Default Value: 0
            /// Length:        3417
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            INT32 undistorted_to_distorted_input_ldc_grid_y[3417];
        } undistorted_to_distorted_input_ldc_grid_y_tab;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// undistorted_to_distorted_input_ldc_grid_geometry
        ///
        /// Tuning Level:  often_tune
        /// Description:   Precision of the LDC out2in grid. 0: 35x27 samples (945 samples are used). 1: 67x51 samples (3417 samples
        ///                are used).
        /// Type:          uint
        /// Default Value: 0
        /// Range:         [0, 1]
        /// Bit Depth:     1u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                                        undistorted_to_distorted_input_ldc_grid_geometry;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// ldc_model_type
        ///
        /// Tuning Level:  often_tune
        /// Description:   0 = custom/no model (grid is not by any of the following models model ), 1 = regular, 2= fisheye, 3 =
        ///                reserved for a new model.
        /// Type:          uint
        /// Default Value: 0
        /// Range:         [0, 7]
        /// Bit Depth:     3u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                                        ldc_model_type;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// model_parameters_tab
        ///
        /// Tuning Level:  often_tune
        /// Description:   Model parameters to be used with the selected model. Parameters interpretation per model:. For model 1:
        ///                [k1 k2 p1 p2 k3]. For model 2: [k1 k2 k3 k4].
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Length:        32
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct model_parameters_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// model_parameters - Array
            ///
            /// Tuning Level:  often_tune
            /// Default Value: 0.0
            /// Length:        32
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            FLOAT model_parameters[32];
        } model_parameters_tab;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// focal_length_x
        ///
        /// Tuning Level:  often_tune
        /// Description:   Camera matrix \ Focal length that was extracted during camera calibration for LDC. Image sizes are as
        ///                defined below and are not normilized and according to calibration images.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT                                         focal_length_x;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// focal_length_y
        ///
        /// Tuning Level:  often_tune
        /// Description:   Camera matrix \ Focal length that was extracted during camera calibration for LDC. Image sizes are as
        ///                defined below and are not normilized and according to calibration images.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT                                         focal_length_y;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// optical_center_x
        ///
        /// Tuning Level:  often_tune
        /// Description:   Camera matrix \ Optical center that was extracted during camera calibration for LDC. Image sizes are as
        ///                defined below and are not normilized and according to calibration images.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT                                         optical_center_x;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// optical_center_y
        ///
        /// Tuning Level:  often_tune
        /// Description:   Camera matrix \ Optical center that was extracted during camera calibration for LDC. Image sizes are as
        ///                defined below and are not normilized and according to calibration images.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT                                         optical_center_y;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// image_size_distorted_x
        ///
        /// Tuning Level:  often_tune
        /// Description:   Distorted image size, image used for LDC calibration.
        /// Type:          uint
        /// Default Value: 0
        /// Range:         [0, 65535]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                                        image_size_distorted_x;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// image_size_distorted_y
        ///
        /// Tuning Level:  often_tune
        /// Description:   Distorted image size, image used for LDC calibration.
        /// Type:          uint
        /// Default Value: 0
        /// Range:         [0, 65535]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                                        image_size_distorted_y;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// image_size_undistorted_x
        ///
        /// Tuning Level:  often_tune
        /// Description:   Un-Distorted image size, image used for LDC calibration.
        /// Type:          uint
        /// Default Value: 0
        /// Range:         [0, 65535]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                                        image_size_undistorted_x;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// image_size_undistorted_y
        ///
        /// Tuning Level:  often_tune
        /// Description:   Un-Distorted image size, image used for LDC calibration.
        /// Type:          uint
        /// Default Value: 0
        /// Range:         [0, 65535]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                                        image_size_undistorted_y;
    } lens_distortion_correction;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_eis12Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_eis12Type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_eis12_reserve
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_eis12_reserveType chromatix_eis12_reserve;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_eis12TypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatix_eis12TypeClass : public ParameterModule, public chromatix_eis12Type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 1;
    static const UINT16 MINOR = 2;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_eis12TypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_eis12TypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatix_eis12TypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_topStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_topStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::topStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_topStruct_res_lut_param_0_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_topStruct_res_lut_param_0_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::topStruct::res_lut_param_0_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_generalStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_generalStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::generalStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_generalStruct_res_lut_param_1_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_generalStruct_res_lut_param_1_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::generalStruct::res_lut_param_1_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_generalStruct_res_lut_param_2_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_generalStruct_res_lut_param_2_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::generalStruct::res_lut_param_2_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_generalStruct_res_lut_param_3_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_generalStruct_res_lut_param_3_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::generalStruct::res_lut_param_3_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_timingStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_timingStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::timingStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_blur_maskingStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_blur_maskingStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::blur_maskingStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_lens_distortion_correctionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_lens_distortion_correctionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::lens_distortion_correctionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_lens_distortion_correctionStruct_distorted_input_to_undistorted_ldc_grid_x_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_lens_distortion_correctionStruct_distorted_input_to_undistorted_ldc_grid_x_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::lens_distortion_correctionStruct::distorted_input_to_undistorted_ldc_grid_x_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_lens_distortion_correctionStruct_distorted_input_to_undistorted_ldc_grid_y_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_lens_distortion_correctionStruct_distorted_input_to_undistorted_ldc_grid_y_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::lens_distortion_correctionStruct::distorted_input_to_undistorted_ldc_grid_y_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_lens_distortion_correctionStruct_undistorted_to_distorted_input_ldc_grid_x_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_lens_distortion_correctionStruct_undistorted_to_distorted_input_ldc_grid_x_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::lens_distortion_correctionStruct::undistorted_to_distorted_input_ldc_grid_x_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_lens_distortion_correctionStruct_undistorted_to_distorted_input_ldc_grid_y_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_lens_distortion_correctionStruct_undistorted_to_distorted_input_ldc_grid_y_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::lens_distortion_correctionStruct::undistorted_to_distorted_input_ldc_grid_y_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12_reserveType_lens_distortion_correctionStruct_model_parameters_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12_reserveType_lens_distortion_correctionStruct_model_parameters_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12_reserveType::lens_distortion_correctionStruct::model_parameters_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis12Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis12Type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12Type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis12Type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatix_eis12TypeClass

EIS_1_2_0_NAMESPACE_END
#endif // EIS_1_2_0_H

