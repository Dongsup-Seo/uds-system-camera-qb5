////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecsync.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "aecsync.h"
#include "parametersetmanager.h"

AECSYNC_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECMultiCamTypeClass::AECMultiCamTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(mtrAndExpMode);
    PARAMETER_INITIALIZE(luxIndexSelection);
    PARAMETER_INITIALIZE(expSyncConfig);
    PARAMETER_INITIALIZE(mtrMixConfig);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECMultiCamTypeClass::AECMultiCamTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(mtrAndExpMode);
    PARAMETER_INITIALIZE(luxIndexSelection);
    PARAMETER_INITIALIZE(expSyncConfig);
    PARAMETER_INITIALIZE(mtrMixConfig);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECMultiCamTypeClass::~AECMultiCamTypeClass()
{
    UnloadAECMultiCamType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* AECMultiCamTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "aecMultiCamSync")) == 0)
    {
        name = "aecMultiCamSync";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load DynamicMixingZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECMultiCamTypeClass::LoadDynamicMixingZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    DynamicMixingZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->weight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load DynamicMixingConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECMultiCamTypeClass::LoadDynamicMixingConfigType(
    ParameterFileSymbolTableEntry* entry,
    DynamicMixingConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadDynamicMixingZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load StaticMixingConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECMultiCamTypeClass::LoadStaticMixingConfigType(
    ParameterFileSymbolTableEntry* entry,
    StaticMixingConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->lumaMixingWeight, alignment);
    result = result && entry->Read(&structure->targetMixingWeight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECMeteringMixConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECMultiCamTypeClass::LoadAECMeteringMixConfigType(
    ParameterFileSymbolTableEntry* entry,
    AECMeteringMixConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadStaticMixingConfigType(entry, &structure->staticMixingConfig, alignment);

    // Reading Array dynamicMixingConfig from symbol table
    {
        result = result && entry->Read(&structure->dynamicMixingConfigCount, alignment);
        structure->dynamicMixingConfigID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->dynamicMixingConfig = PARAMETER_NEW DynamicMixingConfigType[structure->dynamicMixingConfigCount];
        }
        if (!result || structure->dynamicMixingConfig == NULL)
        {
            structure->dynamicMixingConfigCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->dynamicMixingConfigCount; i++)
        {
            result = LoadDynamicMixingConfigType(pointerEntry, &structure->dynamicMixingConfig[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load MultiCamCCTExpCompType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECMultiCamTypeClass::LoadMultiCamCCTExpCompType(
    ParameterFileSymbolTableEntry* entry,
    MultiCamCCTExpCompType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && entry->Read(&structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AbsSensitivityValueType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECMultiCamTypeClass::LoadAbsSensitivityValueType(
    ParameterFileSymbolTableEntry* entry,
    AbsSensitivityValueType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && entry->Read(&structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECExposureSyncConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECMultiCamTypeClass::LoadAECExposureSyncConfigType(
    ParameterFileSymbolTableEntry* entry,
    AECExposureSyncConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableRelSensitivity, alignment);
    result = result && entry->Read(&structure->enableExposureTimeMatch, alignment);
    result = result && entry->Read(&structure->expCompMultiplier, alignment);

    // Reading Array refAbsSensitivity from symbol table
    {
        result = result && entry->Read(&structure->refAbsSensitivityCount, alignment);
        structure->refAbsSensitivityID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->refAbsSensitivity = PARAMETER_NEW AbsSensitivityValueType[structure->refAbsSensitivityCount];
        }
        if (!result || structure->refAbsSensitivity == NULL)
        {
            structure->refAbsSensitivityCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->refAbsSensitivityCount; i++)
        {
            result = LoadAbsSensitivityValueType(pointerEntry, &structure->refAbsSensitivity[i], alignment);
        }
    }
    result = result && entry->Read(&structure->enableCCTBasedExpComp, alignment);

    // Reading Array CCTBasedExpComp from symbol table
    {
        result = result && entry->Read(&structure->CCTBasedExpCompCount, alignment);
        structure->CCTBasedExpCompID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->CCTBasedExpComp = PARAMETER_NEW MultiCamCCTExpCompType[structure->CCTBasedExpCompCount];
        }
        if (!result || structure->CCTBasedExpComp == NULL)
        {
            structure->CCTBasedExpCompCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->CCTBasedExpCompCount; i++)
        {
            result = LoadMultiCamCCTExpCompType(pointerEntry, &structure->CCTBasedExpComp[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECMeteringAndExpModeType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECMultiCamTypeClass::LoadAECMeteringAndExpModeType(
    ParameterFileSymbolTableEntry* entry,
    AECMeteringAndExpModeType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->master = (aecglobalelements::AECMtrAndExpoConfigType)entry->ReadEnum(&result, alignment);
    structure->slave = (aecglobalelements::AECMtrAndExpoConfigType)entry->ReadEnum(&result, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECMultiCamType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECMultiCamTypeClass::LoadAECMultiCamType(
    ParameterFileSymbolTableEntry* entry,
    AECMultiCamType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && LoadAECMeteringAndExpModeType(entry, &structure->mtrAndExpMode, alignment);
    structure->luxIndexSelection = (aecglobalelements::AECDualCamSlaveLuxType)entry->ReadEnum(&result, alignment);
    result = result && LoadAECExposureSyncConfigType(entry, &structure->expSyncConfig, alignment);
    result = result && LoadAECMeteringMixConfigType(entry, &structure->mtrMixConfig, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECMultiCamTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECMultiCamType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECMultiCamTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECMultiCamType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECMeteringMixConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECMultiCamTypeClass::UnloadAECMeteringMixConfigType(
    AECMeteringMixConfigType* structure)
{
    PARAMETER_DELETE[] structure->dynamicMixingConfig;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECExposureSyncConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECMultiCamTypeClass::UnloadAECExposureSyncConfigType(
    AECExposureSyncConfigType* structure)
{
    PARAMETER_DELETE[] structure->refAbsSensitivity;
    PARAMETER_DELETE[] structure->CCTBasedExpComp;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECMultiCamType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECMultiCamTypeClass::UnloadAECMultiCamType(
    AECMultiCamType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadAECExposureSyncConfigType(&structure->expSyncConfig);
    UnloadAECMeteringMixConfigType(&structure->mtrMixConfig);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECMultiCamTypeClass::Unloadparameter_versionStruct(
    AECMultiCamType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* AECMultiCamTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    AECMultiCamTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW AECMultiCamTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadAECMultiCamType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AECSYNC_NAMESPACE_END
