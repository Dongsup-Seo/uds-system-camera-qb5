////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afdepthafelements.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "afdepthafelements.h"
#include "parametersetmanager.h"

AFDEPTHAFELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixDepthAFTypeClass::chromatixDepthAFTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(stats);
    PARAMETER_INITIALIZE(monitor);
    PARAMETER_INITIALIZE(converge);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixDepthAFTypeClass::chromatixDepthAFTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(stats);
    PARAMETER_INITIALIZE(monitor);
    PARAMETER_INITIALIZE(converge);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixDepthAFTypeClass::~chromatixDepthAFTypeClass()
{
    UnloadchromatixDepthAFType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixDepthAFTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "chromatixDepthAF")) == 0)
    {
        name = "chromatixDepthAF";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDepthAFFocusEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::LoadchromatixDepthAFFocusEntryType(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFFocusEntryType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->startPosition, alignment);
    result = result && entry->Read(&structure->endPosition, alignment);
    result = result && entry->Read(&structure->focusDoneThreshold, alignment);
    result = result && entry->Read(&structure->fineScanStepSize, alignment);
    result = result && entry->Read(&structure->stepsRangeNear, alignment);
    result = result && entry->Read(&structure->stepsRangeFar, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDepthAFFocusType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::LoadchromatixDepthAFFocusType(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFFocusType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array entries from symbol table
    {
        result = entry->Read(&structure->entriesCount, alignment);
        structure->entriesID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->entries = PARAMETER_NEW chromatixDepthAFFocusEntryType[structure->entriesCount];
        }
        if (!result || structure->entries == NULL)
        {
            structure->entriesCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->entriesCount; i++)
        {
            result = LoadchromatixDepthAFFocusEntryType(pointerEntry, &structure->entries[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDepthAFConverge
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::LoadchromatixDepthAFConverge(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFConverge* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->waitConfidenceRecoverCount, alignment);
    result = result && entry->Read(&structure->frameSkip, alignment);
    result = result && LoadchromatixDepthAFFocusType(entry, &structure->normalLight, alignment);
    result = result && LoadchromatixDepthAFFocusType(entry, &structure->lowlight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDepthAFDOFScalerType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::LoadchromatixDepthAFDOFScalerType(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFDOFScalerType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->normalizedLensPosition, alignment);
    result = result && entry->Read(&structure->DOFScaler, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDepthAFDOFScalerEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::LoadchromatixDepthAFDOFScalerEntryType(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFDOFScalerEntryType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array entries from symbol table
    {
        result = entry->Read(&structure->entriesCount, alignment);
        structure->entriesID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->entries = PARAMETER_NEW chromatixDepthAFDOFScalerType[structure->entriesCount];
        }
        if (!result || structure->entries == NULL)
        {
            structure->entriesCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->entriesCount; i++)
        {
            result = LoadchromatixDepthAFDOFScalerType(pointerEntry, &structure->entries[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDepthAFMonitor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::LoadchromatixDepthAFMonitor(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFMonitor* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadchromatixDepthAFDOFScalerEntryType(entry, &structure->DOFScalerTable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDepthAFWindowConfigure
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::LoadchromatixDepthAFWindowConfigure(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFWindowConfigure* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->horizontalGridCount, alignment);
    result = result && entry->Read(&structure->verticalGridCount, alignment);
    result = result && entry->Read(&structure->horizontalSkip, alignment);
    result = result && entry->Read(&structure->verticalSkip, alignment);
    result = result && entry->Read(&structure->minConfidentPixelPercentage, alignment);
    result = result && entry->Read(&structure->minConfidentGridPercentage, alignment);
    result = result && entry->Read(&structure->defocusPercentile, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDepthAFConfidenceEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::LoadchromatixDepthAFConfidenceEntryType(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFConfidenceEntryType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->startLuxIndex, alignment);
    result = result && entry->Read(&structure->endLuxIndex, alignment);
    result = result && entry->Read(&structure->threshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDepthAFConfidenceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::LoadchromatixDepthAFConfidenceType(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFConfidenceType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array entries from symbol table
    {
        result = entry->Read(&structure->entriesCount, alignment);
        structure->entriesID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->entries = PARAMETER_NEW chromatixDepthAFConfidenceEntryType[structure->entriesCount];
        }
        if (!result || structure->entries == NULL)
        {
            structure->entriesCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->entriesCount; i++)
        {
            result = LoadchromatixDepthAFConfidenceEntryType(pointerEntry, &structure->entries[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDepthAFFOVMapType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::LoadchromatixDepthAFFOVMapType(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFFOVMapType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->horizontalOffset, alignment);
    result = result && entry->Read(&structure->verticalOffset, alignment);
    result = result && entry->Read(&structure->horizontalCoverage, alignment);
    result = result && entry->Read(&structure->verticalCoverage, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDepthAFStats
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::LoadchromatixDepthAFStats(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFStats* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->minimalDistance, alignment);
    result = result && entry->Read(&structure->maximumDistance, alignment);
    result = result && LoadchromatixDepthAFFOVMapType(entry, &structure->fovMap, alignment);
    result = result && LoadchromatixDepthAFConfidenceType(entry, &structure->confidenceTable, alignment);
    result = result && LoadchromatixDepthAFWindowConfigure(entry, &structure->center, alignment);
    result = result && LoadchromatixDepthAFWindowConfigure(entry, &structure->peripheral, alignment);
    result = result && LoadchromatixDepthAFWindowConfigure(entry, &structure->touch, alignment);
    result = result && LoadchromatixDepthAFWindowConfigure(entry, &structure->face, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDepthAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::LoadchromatixDepthAFType(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && LoadchromatixDepthAFStats(entry, &structure->stats, alignment);
    result = result && LoadchromatixDepthAFMonitor(entry, &structure->monitor, alignment);
    result = result && LoadchromatixDepthAFConverge(entry, &structure->converge, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDepthAFTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixDepthAFType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixDepthAFFocusType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixDepthAFTypeClass::UnloadchromatixDepthAFFocusType(
    chromatixDepthAFFocusType* structure)
{
    PARAMETER_DELETE[] structure->entries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixDepthAFConverge
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixDepthAFTypeClass::UnloadchromatixDepthAFConverge(
    chromatixDepthAFConverge* structure)
{
    UnloadchromatixDepthAFFocusType(&structure->normalLight);
    UnloadchromatixDepthAFFocusType(&structure->lowlight);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixDepthAFDOFScalerEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixDepthAFTypeClass::UnloadchromatixDepthAFDOFScalerEntryType(
    chromatixDepthAFDOFScalerEntryType* structure)
{
    PARAMETER_DELETE[] structure->entries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixDepthAFMonitor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixDepthAFTypeClass::UnloadchromatixDepthAFMonitor(
    chromatixDepthAFMonitor* structure)
{
    UnloadchromatixDepthAFDOFScalerEntryType(&structure->DOFScalerTable);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixDepthAFConfidenceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixDepthAFTypeClass::UnloadchromatixDepthAFConfidenceType(
    chromatixDepthAFConfidenceType* structure)
{
    PARAMETER_DELETE[] structure->entries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixDepthAFStats
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixDepthAFTypeClass::UnloadchromatixDepthAFStats(
    chromatixDepthAFStats* structure)
{
    UnloadchromatixDepthAFConfidenceType(&structure->confidenceTable);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixDepthAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixDepthAFTypeClass::UnloadchromatixDepthAFType(
    chromatixDepthAFType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadchromatixDepthAFStats(&structure->stats);
    UnloadchromatixDepthAFMonitor(&structure->monitor);
    UnloadchromatixDepthAFConverge(&structure->converge);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixDepthAFTypeClass::Unloadparameter_versionStruct(
    chromatixDepthAFType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixDepthAFTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixDepthAFTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixDepthAFTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixDepthAFType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AFDEPTHAFELEMENTS_NAMESPACE_END
