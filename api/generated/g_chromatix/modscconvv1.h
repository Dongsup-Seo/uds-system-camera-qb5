////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  modscconvv1.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef MODSCCONVV1_H
#define MODSCCONVV1_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "globalelements.h"
#include "awbglobalelements.h"

#define MODSCCONVV1_NAMESPACE_BEGIN namespace modscconvv1 {
#define MODSCCONVV1_NAMESPACE_END }

MODSCCONVV1_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// awbFilterType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class awbFilterType
{
    NoFilter     = 0,
    FIRFilter    = 1,
    medianFilter = 2,
    IIRFilter    = 3
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// awbSCDTriggerType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class awbSCDTriggerType
{
    PercGain = 0,
    CCT      = 1,
    Lux      = 2,
    Gyro     = 3,
    Res1     = 4,
    Res2     = 5
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// awbAggregateType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class awbAggregateType
{
    SCBasedOnAnyOne = 0,
    SCBasedOnAll    = 1,
    Res1            = 2,
    Res2            = 3
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FIRFilterConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FIRFilterConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// samples
    ///
    /// Tuning Level:  often_tune
    /// Description:   Number of samples to consider for FIR filtering
    /// Default Value: 3
    /// Range:         [1,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  samples;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// coefficient - Array
    ///
    /// Tuning Level:  must_tune
    /// Description:   FIR filter coefficients. Number of coefficients should be same as number of samples.
    /// Default Value: 1
    /// Min Length:    1
    /// Max Length:    5
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 coefficientCount;
    UINT32 coefficientID;
    FLOAT* coefficient;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// MedianFilterConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct MedianFilterConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// samples
    ///
    /// Tuning Level:  often_tune
    /// Description:   Number of samples to consider for median filtering
    /// Default Value: 5
    /// Range:         [1,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 samples;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// IIRFilterConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct IIRFilterConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// samplesInput
    ///
    /// Tuning Level:  often_tune
    /// Description:   Number of input samples to consider for IIR filtering
    /// Default Value: 2
    /// Range:         [1,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  samplesInput;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// coeffInput - Array
    ///
    /// Tuning Level:  must_tune
    /// Description:   IIR filter input coefficients. IIR filter output is computed as: y[n] = (b0 * x[n] + b1 * x[n-1] + ...) -
    ///                (a1 * y[n-1] + ...) b is input coefficients and a is output coefficients. Number of coefficients should
    ///                be same as number of samples.
    /// Default Value: 0.2452
    /// Min Length:    1
    /// Max Length:    5
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 coeffInputCount;
    UINT32 coeffInputID;
    FLOAT* coeffInput;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// samplesOutput
    ///
    /// Tuning Level:  often_tune
    /// Description:   Number of output samples to consider for IIR filtering
    /// Default Value: 1
    /// Range:         [1,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  samplesOutput;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// coeffOutput - Array
    ///
    /// Tuning Level:  must_tune
    /// Description:   IIR filter output coefficients. IIR filter output is computed as: y[n] = (b0 * x[n] + b1 * x[n-1] + ...)
    ///                - (a1 * y[n-1] + ...) b is input coefficients and a is output coefficients. Number of coefficients should
    ///                be same as number of samples.
    /// Default Value: -0.5095
    /// Min Length:    1
    /// Max Length:    5
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 coeffOutputCount;
    UINT32 coeffOutputID;
    FLOAT* coeffOutput;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FilterConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FilterConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// type
    ///
    /// Tuning Level:  often_tune
    /// Description:   Filter type selection
    /// Default Value: NoFilter
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    awbFilterType          type;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fir
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FIRFilterConfigType    fir;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// iir
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    IIRFilterConfigType    iir;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// median
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MedianFilterConfigType median;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SCDetectorConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SCDetectorConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// type
    ///
    /// Tuning Level:  must_tune
    /// Description:   Scene change detector input type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    awbSCDTriggerType type;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fixedBaselineEn
    ///
    /// Tuning Level:  must_tune
    /// Description:   True indicates fixed value will be use, else baseline will be updated dynamically after rebase
    /// Default Value: true
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL              fixedBaselineEn;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fixedBaselineValue
    ///
    /// Tuning Level:  must_tune
    /// Description:   Fixed baseline value. It will be used only if fixed baseline is enabled.
    /// Default Value: 0
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             fixedBaselineValue;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// triggerTh
    ///
    /// Tuning Level:  must_tune
    /// Description:   Trigger threshold. If residual(input - baseline) is more than threshold, it will be considered as scene
    ///                change.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             triggerTh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// consCountTh
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Counting threshold for the residue is constantly above/below the trigger_threshold.
    /// Default Value: 5
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32             consCountTh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// postSCDFramesTh
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Min frames to analyze post SCD for checking scene is stable or not.
    /// Default Value: 5
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32             postSCDFramesTh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// postSCDStableTh
    ///
    /// Tuning Level:  often_tune
    /// Description:   Percentage threshold, if variation between frames is below this threshold indicates scene is stable (post
    ///                SCD).
    /// Default Value: 1
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             postSCDStableTh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// holdTime
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Post scene change, holding time will be ON for given time duration and it will be off automatically.
    /// Default Value: 2
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT             holdTime;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// strictHoldTime
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Post scene change, scene stable, do not reset holding time, wait till its get completed.
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL              strictHoldTime;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FilterDetectorConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FilterDetectorConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Tuning Level:  must_tune
    /// Description:   Enable scene change detector
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                 enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// filter
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FilterConfigType     filter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// detector
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SCDetectorConfigType detector;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SceneChangeDetectorConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SceneChangeDetectorConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Aggregate
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Aggregation policy. Scene change detection state transition is controlled using this parameter.
    /// Default Value: SCBasedOnAnyOne
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    awbAggregateType          Aggregate;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// filterDetector - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                    filterDetectorCount;
    UINT32                    filterDetectorID;
    FilterDetectorConfigType* filterDetector;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SCConvType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SCConvType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// slowConvReduceFactor
    ///
    /// Tuning Level:  often_tune
    /// Description:   In holding time, reduce the convergence by using this factor
    /// Default Value: 0.4
    /// Range:         [0.01,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT slowConvReduceFactor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fastConvBoostFactor
    ///
    /// Tuning Level:  often_tune
    /// Description:   Post scene change, once scene is stable use this factor for faster convergence.
    /// Default Value: 3
    /// Range:         [1,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT fastConvBoostFactor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fastConvergePercTh
    ///
    /// Tuning Level:  often_tune
    /// Description:   If percentage max gain change between current frame input and output of temporal filter is more than this
    ///                threshold, use fast convergence boost factor.
    /// Default Value: 0.5
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT fastConvergePercTh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// waitFramesBeforeSCStart
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Before starting the new scene change, wait for N frames.
    /// Default Value: 0
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 waitFramesBeforeSCStart;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixSCConvV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixSCConvV1Type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// moduleID
    ///
    /// Tuning Level:  never_tune
    /// Description:   Define module ID, sub module ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    awbglobalelements::moduleIDType                  moduleID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;
    BOOL                          enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// detector
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SceneChangeDetectorConfigType detector;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// converge
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SCConvType                    converge;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixSCConvV1TypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatixSCConvV1TypeClass : public ParameterModule, public chromatixSCConvV1Type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 7;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixSCConvV1TypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixSCConvV1TypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatixSCConvV1TypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FIRFilterConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFIRFilterConfigType(
        ParameterFileSymbolTableEntry* entry,
        FIRFilterConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load MedianFilterConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadMedianFilterConfigType(
        ParameterFileSymbolTableEntry* entry,
        MedianFilterConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load IIRFilterConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadIIRFilterConfigType(
        ParameterFileSymbolTableEntry* entry,
        IIRFilterConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FilterConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFilterConfigType(
        ParameterFileSymbolTableEntry* entry,
        FilterConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SCDetectorConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSCDetectorConfigType(
        ParameterFileSymbolTableEntry* entry,
        SCDetectorConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FilterDetectorConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFilterDetectorConfigType(
        ParameterFileSymbolTableEntry* entry,
        FilterDetectorConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SceneChangeDetectorConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSceneChangeDetectorConfigType(
        ParameterFileSymbolTableEntry* entry,
        SceneChangeDetectorConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SCConvType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSCConvType(
        ParameterFileSymbolTableEntry* entry,
        SCConvType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixSCConvV1Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixSCConvV1Type(
        ParameterFileSymbolTableEntry* entry,
        chromatixSCConvV1Type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixSCConvV1Type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload FIRFilterConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadFIRFilterConfigType(
        FIRFilterConfigType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload IIRFilterConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadIIRFilterConfigType(
        IIRFilterConfigType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload FilterConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadFilterConfigType(
        FilterConfigType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload FilterDetectorConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadFilterDetectorConfigType(
        FilterDetectorConfigType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload SceneChangeDetectorConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadSceneChangeDetectorConfigType(
        SceneChangeDetectorConfigType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixSCConvV1Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixSCConvV1Type(
        chromatixSCConvV1Type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatixSCConvV1TypeClass

MODSCCONVV1_NAMESPACE_END
#endif // MODSCCONVV1_H

