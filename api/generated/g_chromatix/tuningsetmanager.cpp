////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  tuningsetmanager.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#include "tuningsetmanager.h"

TuningSetManager::TuningSetManager()
{
    UINT32 index = 0;
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW demux_1_3_0::chromatix_demux13TypeClass("demux13_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW demux_1_3_0::chromatix_demux13TypeClass("demux13_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ds4to1_1_0_0::chromatix_ds4to1v10TypeClass("ds4to1v10_bps_full_dc4");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ds4to1_1_0_0::chromatix_ds4to1v10TypeClass("ds4to1v10_bps_dc4_dc16");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ds4to1_1_0_0::chromatix_ds4to1v10TypeClass("ds4to1v10_ife_full_dc4");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ds4to1_1_0_0::chromatix_ds4to1v10TypeClass("ds4to1v10_ife_dc4_dc16");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ds4to1_1_0_0::chromatix_ds4to1v10TypeClass("ds4to1v10_ife_disp_full_dc4");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ds4to1_1_0_0::chromatix_ds4to1v10TypeClass("ds4to1v10_ife_disp_dc4_dc16");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ds4to1_1_0_0::chromatix_ds4to1v10TypeClass("ds4to1v10_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW upscale_2_0_0::chromatix_upscale20TypeClass("upscale20_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ica_2_0_0::chromatix_ica20TypeClass("ica20_ife_module1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ica_2_0_0::chromatix_ica20TypeClass("ica20_ife_module2");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ica_2_0_0::chromatix_ica20TypeClass("ica20_ipe_module1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ica_2_0_0::chromatix_ica20TypeClass("ica20_ipe_module2");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW sce_1_1_0::chromatix_sce11TypeClass("sce11_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW hdr_2_0_0::chromatix_hdr20TypeClass("hdr20_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW gamma_1_5_0::chromatix_gamma15TypeClass("gamma15_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW hdr_3_0_0::chromatix_hdr30TypeClass("hdr30_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW hdr_3_0_0::chromatix_hdr30TypeClass("hdr30_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW abf_3_4_0::chromatix_abf34TypeClass("abf34_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ltm_1_3_0::chromatix_ltm13TypeClass("ltm13_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW lenr_1_0_0::chromatix_lenr10TypeClass("lenr10_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW cac_2_3_0::chromatix_cac23TypeClass("cac23_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW lsc_3_4_0::chromatix_lsc34TypeClass("lsc34_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW lsc_3_4_0::chromatix_lsc34TypeClass("lsc34_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW bpcbcc_5_0_0::chromatix_bpcbcc50TypeClass("bpcbcc50_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW bls_1_2_0::chromatix_bls12TypeClass("bls12_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW bls_1_2_0::chromatix_bls12TypeClass("bls12_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW hnr_1_0_0::chromatix_hnr10TypeClass("hnr10_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW hnr_1_0_0::chromatix_hnr10TypeClass("hnr10_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW cst_1_2_0::chromatix_cst12TypeClass("cst12_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW cst_1_2_0::chromatix_cst12TypeClass("cst12_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW cst_1_2_0::chromatix_cst12TypeClass("cst12_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW cs_2_0_0::chromatix_cs20TypeClass("cs20_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW linearization_3_4_0::chromatix_linearization34TypeClass("linearization34_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW linearization_3_4_0::chromatix_linearization34TypeClass("linearization34_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW hdr_2_3_0::chromatix_hdr23TypeClass("hdr23_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW abf_4_0_0::chromatix_abf40TypeClass("abf40_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW abf_4_0_0::chromatix_abf40TypeClass("abf40_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW hdr_2_2_0::chromatix_hdr22TypeClass("hdr22_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW hdr_2_2_0::chromatix_hdr22TypeClass("hdr22_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW tf_2_0_0::chromatix_tf20TypeClass("tf20_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW eis_1_0_0::chromatix_eis10TypeClass("eis10_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW eis_1_2_0::chromatix_eis12TypeClass("eis12_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW gra_1_0_0::chromatix_gra10TypeClass("gra10_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW asf_3_0_0::chromatix_asf30TypeClass("asf30_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW bincorr_1_0_0::chromatix_bincorr10TypeClass("bincorr10_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW bincorr_1_0_0::chromatix_bincorr10TypeClass("bincorr10_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW tintless_2_0_0::chromatix_tintless20TypeClass("tintless20_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW demosaic_3_6_0::chromatix_demosaic36TypeClass("demosaic36_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW demosaic_3_6_0::chromatix_demosaic36TypeClass("demosaic36_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW cc_1_2_0::chromatix_cc12TypeClass("cc12_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW gamma_1_6_0::chromatix_gamma16TypeClass("gamma16_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW gamma_1_6_0::chromatix_gamma16TypeClass("gamma16_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW cv_1_2_0::chromatix_cv12TypeClass("cv12_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW anr_1_0_0::chromatix_anr10TypeClass("anr10_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW tf_1_0_0::chromatix_tf10TypeClass("tf10_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW dsx_1_0_0::chromatix_dsx10TypeClass("dsx10_ife_video_full_dc4");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW gtm_1_0_0::chromatix_gtm10TypeClass("gtm10_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW gtm_1_0_0::chromatix_gtm10TypeClass("gtm10_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW lrme_1_0_0::chromatix_lrme10TypeClass("lrme10_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW hdrvideo_1_0_0::chromatix_hdrvideo10TypeClass("hdrvideo10_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW cvp_1_0_0::chromatix_cvp10TypeClass("cvp10_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW video_1_0_0::chromatix_video10TypeClass("video10_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW tdl_1_0_0::chromatix_tdl10TypeClass("tdl10_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW pdpc_1_1_0::chromatix_pdpc11TypeClass("pdpc11_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW linearization_3_3_0::chromatix_linearization33TypeClass("linearization33_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW cc_1_3_0::chromatix_cc13TypeClass("cc13_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW cc_1_3_0::chromatix_cc13TypeClass("cc13_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW cc_1_3_0::chromatix_cc13TypeClass("cc13_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW gic_3_0_0::chromatix_gic30TypeClass("gic30_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ltm_1_4_0::chromatix_ltm14TypeClass("ltm14_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ica_1_0_0::chromatix_ica10TypeClass("ica10_ipe_module1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ica_1_0_0::chromatix_ica10TypeClass("ica10_ipe_module2");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW eis_1_1_0::chromatix_eis11TypeClass("eis11_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW mf_1_1_0::chromatix_mf11TypeClass("mf11_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW tmc_1_0_0::chromatix_tmc10TypeClass("tmc10_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW pdpc_2_0_0::chromatix_pdpc20TypeClass("pdpc20_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW tmc_1_2_0::chromatix_tmc12TypeClass("tmc12_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW pedestal_1_3_0::chromatix_pedestal13TypeClass("pedestal13_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW pedestal_1_3_0::chromatix_pedestal13TypeClass("pedestal13_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW pdpc_3_0_0::chromatix_pdpc30TypeClass("pdpc30_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW pdpc_3_0_0::chromatix_pdpc30TypeClass("pdpc30_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ica_3_0_0::chromatix_ica30TypeClass("ica30_ipe_module1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ica_3_0_0::chromatix_ica30TypeClass("ica30_ipe_module2");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW shdr_1_0_0::chromatix_shdr10TypeClass("shdr10_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ldc_1_0_0::chromatix_ldc10TypeClass("ldc10_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW demosaic_3_7_0::chromatix_demosaic37TypeClass("demosaic37_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW tmc_1_1_0::chromatix_tmc11TypeClass("tmc11_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ds4to1_1_1_0::chromatix_ds4to1v11TypeClass("ds4to1v11_ife_video_dc4_dc16");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ds4to1_1_1_0::chromatix_ds4to1v11TypeClass("ds4to1v11_ife_disp_full_dc4");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ds4to1_1_1_0::chromatix_ds4to1v11TypeClass("ds4to1v11_ife_disp_dc4_dc16");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW ds4to1_1_1_0::chromatix_ds4to1v11TypeClass("ds4to1v11_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW cac_2_2_0::chromatix_cac22TypeClass("cac22_ipe");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW mf_1_0_0::chromatix_mf10TypeClass("mf10_sw");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW lsc_4_0_0::chromatix_lsc40TypeClass("lsc40_bps");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW lsc_4_0_0::chromatix_lsc40TypeClass("lsc40_ife");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW afhafelements::chromatixHAFTypeClass("chromatixHAF");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW afdciafelements::chromatixDCIAFTypeClass("chromatixDCIAF");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW afpdafelements::chromatixPDAFTypeClass("chromatixPDAF");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW afmonitorelements::chromatixAFMONITORTypeClass("chromatixAFMONITOR");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW afpdlibelements::chromatixPDLibTypeClass("chromatixPDLib");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW afbafelements::chromatixBAFTypeClass("chromatixBAF");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW afsoftwarestatelements::chromatixAFTuningSoftwareStatisticsTypeClass("chromatixAFTuningSoftwareStatistics");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW afcontrastafelements::chromatixContrastAFTypeClass("chromatixContrastAF");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW afextensionelements::chromatixAFExtensionTypeClass("chromatixAFExtension");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aftofelements::chromatixTOFTypeClass("chromatixTOF");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW afalgotuningelements::chromatixAFAlgoTuningTypeClass("chromatixAFAlgoTuning");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW afdepthafelements::chromatixDepthAFTypeClass("chromatixDepthAF");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modsagenv2::chromatixSAGenV2ArrayTypeClass("SAGenV2DataArray");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW moddav1::chromatixDAV1TypeClass("DAV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW moddistwvv1::chromatixDistWVV1TypeClass("SFDistWVV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modsfstatscrv1::chromatixSFStatScrV1TypeClass("SFStatScrV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modawbbestshotv1::chromatixAWBBestShotV1TypeClass("bestShotV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modparamextv1::chromatixExtensionParamV1TypeClass("AWBExtensionParam");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modcustrefptv1::chromatixCustRefPtV1typeClass("custRefPtV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modsaagwv1::chromatixSAAGWV1TypeClass("SAAGWV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modspecilluv1::chromatixspecilluv1typeClass("ledTorchV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modspecilluv1::chromatixspecilluv1typeClass("lcdFlashV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modilluwvv1::chromatixIlluWVV1TypeClass("SFIlluWVV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modawbinitv1::chromatixAWBInitV1TypeClass("initDataV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modmwbv1::chromatixMWBV1TypeClass("MWBGainV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modawbfaceassistv1::chromatixAWBFaceAssistV1TypeClass("faceAssistV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modgeneralwvv1::chromatixGeneralWVV1TypeClass("SFGeneralWVV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modscconvv1::chromatixSCConvV1TypeClass("awbSceneChangeConvergeV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modscconvv1::chromatixSCConvV1TypeClass("scConv");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modawbfaceprocessorv1::chromatixAWBFaceROIProcessorV1TypeClass("faceROIProcessorV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modrefptv1::chromatixRefPtV1TypeClass("refPtV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modtmpconvv1::chromatixTmpConvV1TypeClass("tmpConvV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modflashwv1::chromatixFlashWV1TypeClass("flashWV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modtrigladjv1::chromatixTriglAdjV1TypeClass("triglGAV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modsagenv1::chromatixSAGenV1ArrayTypeClass("SAGenV1DataArray");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modflashdecv1::chromatixFlashDecV1TypeClass("flashDecV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modbgstatsconfigv1::chromatixBGStatsConfigV1TypeClass("bgStatsConfigV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modmlczv2::chromatixMLCZV2TypeClass("SFMLCZV2");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modsaspatialgenv1::chromatixSASpatialGenV1ArrayTypeClass("SASpatialGenV1DataArray");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modsfsubsmpv1::chromatixSFSubSmpV1TypeClass("SFSubSmpV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modsensorcalv1::chromatixSenorCalV1TypeClass("sensorCalV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modhistctrlv1::chromatixHistCtrlV1TypeClass("histCtrlV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modmlczv3::chromatixMLCZV3TypeClass("SFMLCZV3");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW moddualcamsyncv1::chromatixdualcamSyncV1TypeClass("dualcamSyncV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modspectralsensorinfoassistawbv1::chromatixSpectralSensorInfoAssistV1TypeClass("SFSpectralSensorAssistV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modmlczv1::chromatixMLCZV1TypeClass("SFMLCZV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modsaagwv2::chromatixSAAGWV2TypeClass("SAAGWV2");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW modflashrefptv1::chromatixFlashRefPtV1TypeClass("flashRefPtV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW moddsfv1::chromatixDSFV1TypeClass("DSFV1");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecMetering::AECCoreMeteringTypeClass("Metering");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecParamExtension::ParamExtensionTypeClass("AECParamExtension");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecFace::AECFaceTypeClass("Face");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecStatsConfig::AECStatsConfigClass("StatsDefaultConfig");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecStartUp::AECStartUpTypeClass("StartUp");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecTouch::AECTouchTypeClass("Touch");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecConvergence::AECCoreConvergenceTypeClass("Convergence");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecDepth::AECDepthTypeClass("aecDepth");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecTracker::AECTrackerTypeClass("Tracker");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecSync::AECMultiCamTypeClass("aecMultiCamSync");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecSensorConfig::AECSensorHDRConfigClass("SensorHDRDefaultConfig");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecGyro::AECGyroTypeClass("aecGyro");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecFlash::AECFlashTypeClass("Flash");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecSkip::AECSkipCtrlTypeClass("aecSkipCtrl");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecArbitration::AECCoreArbitrationTypeClass("Arbitration");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecSnapshotCtrl::AECSnapshotCtrlTypeClass("SnapshotControl");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW aecExtension::AECCoreExtensionTypeClass("Extension");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW rerTuning::ChromatixRedEyeReductionClass("ChromatixRERTuningData");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW asdTuning::ChromatixASDTuningTypeClass("ChromatixASDTuningData");
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW afdTuning::chromatix_auto_flicker_detection_data_typeClass("ChromatixAFDTuningData");

    for (UINT32 i = 0; i < index; i++)
    {
        m_moduleMap[m_defaultModules[i]->Type] = (void*)m_defaultModules[i];
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// UpdateBinaryParameters
///
/// @brief Replaces exising parameters with the ones in a buffer. LoadBinaryParameters must be called first
///
/// @param buffer   Binary parameter buffer
/// @param length   Length of the binary parameter buffer
///
/// @return Node
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL TuningSetManager::UpdateBinaryParameters(
    UINT8* buffer,
    UINT64 length)
{
    BOOL result = Valid;

    if (result)
    {
        TuningSetManager* update = new TuningSetManager();

        if (update->LoadBinaryParameters(buffer, length))
        {
            UpdateParameters(update);
            PARAMETER_DELETE update;
            result = TRUE;
        }
    }

    return result;
}

demux_1_3_0::chromatix_demux13Type* TuningSetManager::GetModule_demux13_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"demux13_bps",
        modeBranch, modeCount);

    return (demux_1_3_0::chromatix_demux13Type*)(demux_1_3_0::chromatix_demux13TypeClass*)pModule;
}

demux_1_3_0::chromatix_demux13Type* TuningSetManager::GetModule_demux13_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"demux13_ife",
        modeBranch, modeCount);

    return (demux_1_3_0::chromatix_demux13Type*)(demux_1_3_0::chromatix_demux13TypeClass*)pModule;
}

ds4to1_1_0_0::chromatix_ds4to1v10Type* TuningSetManager::GetModule_ds4to1v10_bps_full_dc4(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ds4to1v10_bps_full_dc4",
        modeBranch, modeCount);

    return (ds4to1_1_0_0::chromatix_ds4to1v10Type*)(ds4to1_1_0_0::chromatix_ds4to1v10TypeClass*)pModule;
}

ds4to1_1_0_0::chromatix_ds4to1v10Type* TuningSetManager::GetModule_ds4to1v10_bps_dc4_dc16(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ds4to1v10_bps_dc4_dc16",
        modeBranch, modeCount);

    return (ds4to1_1_0_0::chromatix_ds4to1v10Type*)(ds4to1_1_0_0::chromatix_ds4to1v10TypeClass*)pModule;
}

ds4to1_1_0_0::chromatix_ds4to1v10Type* TuningSetManager::GetModule_ds4to1v10_ife_full_dc4(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ds4to1v10_ife_full_dc4",
        modeBranch, modeCount);

    return (ds4to1_1_0_0::chromatix_ds4to1v10Type*)(ds4to1_1_0_0::chromatix_ds4to1v10TypeClass*)pModule;
}

ds4to1_1_0_0::chromatix_ds4to1v10Type* TuningSetManager::GetModule_ds4to1v10_ife_dc4_dc16(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ds4to1v10_ife_dc4_dc16",
        modeBranch, modeCount);

    return (ds4to1_1_0_0::chromatix_ds4to1v10Type*)(ds4to1_1_0_0::chromatix_ds4to1v10TypeClass*)pModule;
}

ds4to1_1_0_0::chromatix_ds4to1v10Type* TuningSetManager::GetModule_ds4to1v10_ife_disp_full_dc4(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ds4to1v10_ife_disp_full_dc4",
        modeBranch, modeCount);

    return (ds4to1_1_0_0::chromatix_ds4to1v10Type*)(ds4to1_1_0_0::chromatix_ds4to1v10TypeClass*)pModule;
}

ds4to1_1_0_0::chromatix_ds4to1v10Type* TuningSetManager::GetModule_ds4to1v10_ife_disp_dc4_dc16(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ds4to1v10_ife_disp_dc4_dc16",
        modeBranch, modeCount);

    return (ds4to1_1_0_0::chromatix_ds4to1v10Type*)(ds4to1_1_0_0::chromatix_ds4to1v10TypeClass*)pModule;
}

ds4to1_1_0_0::chromatix_ds4to1v10Type* TuningSetManager::GetModule_ds4to1v10_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ds4to1v10_ipe",
        modeBranch, modeCount);

    return (ds4to1_1_0_0::chromatix_ds4to1v10Type*)(ds4to1_1_0_0::chromatix_ds4to1v10TypeClass*)pModule;
}

upscale_2_0_0::chromatix_upscale20Type* TuningSetManager::GetModule_upscale20_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"upscale20_ipe",
        modeBranch, modeCount);

    return (upscale_2_0_0::chromatix_upscale20Type*)(upscale_2_0_0::chromatix_upscale20TypeClass*)pModule;
}

ica_2_0_0::chromatix_ica20Type* TuningSetManager::GetModule_ica20_ife_module1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ica20_ife_module1",
        modeBranch, modeCount);

    return (ica_2_0_0::chromatix_ica20Type*)(ica_2_0_0::chromatix_ica20TypeClass*)pModule;
}

ica_2_0_0::chromatix_ica20Type* TuningSetManager::GetModule_ica20_ife_module2(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ica20_ife_module2",
        modeBranch, modeCount);

    return (ica_2_0_0::chromatix_ica20Type*)(ica_2_0_0::chromatix_ica20TypeClass*)pModule;
}

ica_2_0_0::chromatix_ica20Type* TuningSetManager::GetModule_ica20_ipe_module1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ica20_ipe_module1",
        modeBranch, modeCount);

    return (ica_2_0_0::chromatix_ica20Type*)(ica_2_0_0::chromatix_ica20TypeClass*)pModule;
}

ica_2_0_0::chromatix_ica20Type* TuningSetManager::GetModule_ica20_ipe_module2(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ica20_ipe_module2",
        modeBranch, modeCount);

    return (ica_2_0_0::chromatix_ica20Type*)(ica_2_0_0::chromatix_ica20TypeClass*)pModule;
}

sce_1_1_0::chromatix_sce11Type* TuningSetManager::GetModule_sce11_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"sce11_ipe",
        modeBranch, modeCount);

    return (sce_1_1_0::chromatix_sce11Type*)(sce_1_1_0::chromatix_sce11TypeClass*)pModule;
}

hdr_2_0_0::chromatix_hdr20Type* TuningSetManager::GetModule_hdr20_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"hdr20_ife",
        modeBranch, modeCount);

    return (hdr_2_0_0::chromatix_hdr20Type*)(hdr_2_0_0::chromatix_hdr20TypeClass*)pModule;
}

gamma_1_5_0::chromatix_gamma15Type* TuningSetManager::GetModule_gamma15_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"gamma15_ipe",
        modeBranch, modeCount);

    return (gamma_1_5_0::chromatix_gamma15Type*)(gamma_1_5_0::chromatix_gamma15TypeClass*)pModule;
}

hdr_3_0_0::chromatix_hdr30Type* TuningSetManager::GetModule_hdr30_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"hdr30_bps",
        modeBranch, modeCount);

    return (hdr_3_0_0::chromatix_hdr30Type*)(hdr_3_0_0::chromatix_hdr30TypeClass*)pModule;
}

hdr_3_0_0::chromatix_hdr30Type* TuningSetManager::GetModule_hdr30_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"hdr30_ife",
        modeBranch, modeCount);

    return (hdr_3_0_0::chromatix_hdr30Type*)(hdr_3_0_0::chromatix_hdr30TypeClass*)pModule;
}

abf_3_4_0::chromatix_abf34Type* TuningSetManager::GetModule_abf34_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"abf34_ife",
        modeBranch, modeCount);

    return (abf_3_4_0::chromatix_abf34Type*)(abf_3_4_0::chromatix_abf34TypeClass*)pModule;
}

ltm_1_3_0::chromatix_ltm13Type* TuningSetManager::GetModule_ltm13_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ltm13_ipe",
        modeBranch, modeCount);

    return (ltm_1_3_0::chromatix_ltm13Type*)(ltm_1_3_0::chromatix_ltm13TypeClass*)pModule;
}

lenr_1_0_0::chromatix_lenr10Type* TuningSetManager::GetModule_lenr10_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"lenr10_ipe",
        modeBranch, modeCount);

    return (lenr_1_0_0::chromatix_lenr10Type*)(lenr_1_0_0::chromatix_lenr10TypeClass*)pModule;
}

cac_2_3_0::chromatix_cac23Type* TuningSetManager::GetModule_cac23_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"cac23_ipe",
        modeBranch, modeCount);

    return (cac_2_3_0::chromatix_cac23Type*)(cac_2_3_0::chromatix_cac23TypeClass*)pModule;
}

lsc_3_4_0::chromatix_lsc34Type* TuningSetManager::GetModule_lsc34_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"lsc34_bps",
        modeBranch, modeCount);

    return (lsc_3_4_0::chromatix_lsc34Type*)(lsc_3_4_0::chromatix_lsc34TypeClass*)pModule;
}

lsc_3_4_0::chromatix_lsc34Type* TuningSetManager::GetModule_lsc34_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"lsc34_ife",
        modeBranch, modeCount);

    return (lsc_3_4_0::chromatix_lsc34Type*)(lsc_3_4_0::chromatix_lsc34TypeClass*)pModule;
}

bpcbcc_5_0_0::chromatix_bpcbcc50Type* TuningSetManager::GetModule_bpcbcc50_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"bpcbcc50_ife",
        modeBranch, modeCount);

    return (bpcbcc_5_0_0::chromatix_bpcbcc50Type*)(bpcbcc_5_0_0::chromatix_bpcbcc50TypeClass*)pModule;
}

bls_1_2_0::chromatix_bls12Type* TuningSetManager::GetModule_bls12_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"bls12_bps",
        modeBranch, modeCount);

    return (bls_1_2_0::chromatix_bls12Type*)(bls_1_2_0::chromatix_bls12TypeClass*)pModule;
}

bls_1_2_0::chromatix_bls12Type* TuningSetManager::GetModule_bls12_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"bls12_ife",
        modeBranch, modeCount);

    return (bls_1_2_0::chromatix_bls12Type*)(bls_1_2_0::chromatix_bls12TypeClass*)pModule;
}

hnr_1_0_0::chromatix_hnr10Type* TuningSetManager::GetModule_hnr10_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"hnr10_bps",
        modeBranch, modeCount);

    return (hnr_1_0_0::chromatix_hnr10Type*)(hnr_1_0_0::chromatix_hnr10TypeClass*)pModule;
}

hnr_1_0_0::chromatix_hnr10Type* TuningSetManager::GetModule_hnr10_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"hnr10_ipe",
        modeBranch, modeCount);

    return (hnr_1_0_0::chromatix_hnr10Type*)(hnr_1_0_0::chromatix_hnr10TypeClass*)pModule;
}

cst_1_2_0::chromatix_cst12Type* TuningSetManager::GetModule_cst12_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"cst12_bps",
        modeBranch, modeCount);

    return (cst_1_2_0::chromatix_cst12Type*)(cst_1_2_0::chromatix_cst12TypeClass*)pModule;
}

cst_1_2_0::chromatix_cst12Type* TuningSetManager::GetModule_cst12_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"cst12_ife",
        modeBranch, modeCount);

    return (cst_1_2_0::chromatix_cst12Type*)(cst_1_2_0::chromatix_cst12TypeClass*)pModule;
}

cst_1_2_0::chromatix_cst12Type* TuningSetManager::GetModule_cst12_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"cst12_ipe",
        modeBranch, modeCount);

    return (cst_1_2_0::chromatix_cst12Type*)(cst_1_2_0::chromatix_cst12TypeClass*)pModule;
}

cs_2_0_0::chromatix_cs20Type* TuningSetManager::GetModule_cs20_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"cs20_ipe",
        modeBranch, modeCount);

    return (cs_2_0_0::chromatix_cs20Type*)(cs_2_0_0::chromatix_cs20TypeClass*)pModule;
}

linearization_3_4_0::chromatix_linearization34Type* TuningSetManager::GetModule_linearization34_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"linearization34_bps",
        modeBranch, modeCount);

    return (linearization_3_4_0::chromatix_linearization34Type*)(linearization_3_4_0::chromatix_linearization34TypeClass*)pModule;
}

linearization_3_4_0::chromatix_linearization34Type* TuningSetManager::GetModule_linearization34_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"linearization34_ife",
        modeBranch, modeCount);

    return (linearization_3_4_0::chromatix_linearization34Type*)(linearization_3_4_0::chromatix_linearization34TypeClass*)pModule;
}

hdr_2_3_0::chromatix_hdr23Type* TuningSetManager::GetModule_hdr23_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"hdr23_ife",
        modeBranch, modeCount);

    return (hdr_2_3_0::chromatix_hdr23Type*)(hdr_2_3_0::chromatix_hdr23TypeClass*)pModule;
}

abf_4_0_0::chromatix_abf40Type* TuningSetManager::GetModule_abf40_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"abf40_bps",
        modeBranch, modeCount);

    return (abf_4_0_0::chromatix_abf40Type*)(abf_4_0_0::chromatix_abf40TypeClass*)pModule;
}

abf_4_0_0::chromatix_abf40Type* TuningSetManager::GetModule_abf40_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"abf40_ife",
        modeBranch, modeCount);

    return (abf_4_0_0::chromatix_abf40Type*)(abf_4_0_0::chromatix_abf40TypeClass*)pModule;
}

hdr_2_2_0::chromatix_hdr22Type* TuningSetManager::GetModule_hdr22_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"hdr22_bps",
        modeBranch, modeCount);

    return (hdr_2_2_0::chromatix_hdr22Type*)(hdr_2_2_0::chromatix_hdr22TypeClass*)pModule;
}

hdr_2_2_0::chromatix_hdr22Type* TuningSetManager::GetModule_hdr22_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"hdr22_ife",
        modeBranch, modeCount);

    return (hdr_2_2_0::chromatix_hdr22Type*)(hdr_2_2_0::chromatix_hdr22TypeClass*)pModule;
}

tf_2_0_0::chromatix_tf20Type* TuningSetManager::GetModule_tf20_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"tf20_ipe",
        modeBranch, modeCount);

    return (tf_2_0_0::chromatix_tf20Type*)(tf_2_0_0::chromatix_tf20TypeClass*)pModule;
}

eis_1_0_0::chromatix_eis10Type* TuningSetManager::GetModule_eis10_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"eis10_sw",
        modeBranch, modeCount);

    return (eis_1_0_0::chromatix_eis10Type*)(eis_1_0_0::chromatix_eis10TypeClass*)pModule;
}

eis_1_2_0::chromatix_eis12Type* TuningSetManager::GetModule_eis12_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"eis12_sw",
        modeBranch, modeCount);

    return (eis_1_2_0::chromatix_eis12Type*)(eis_1_2_0::chromatix_eis12TypeClass*)pModule;
}

gra_1_0_0::chromatix_gra10Type* TuningSetManager::GetModule_gra10_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"gra10_ipe",
        modeBranch, modeCount);

    return (gra_1_0_0::chromatix_gra10Type*)(gra_1_0_0::chromatix_gra10TypeClass*)pModule;
}

asf_3_0_0::chromatix_asf30Type* TuningSetManager::GetModule_asf30_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"asf30_ipe",
        modeBranch, modeCount);

    return (asf_3_0_0::chromatix_asf30Type*)(asf_3_0_0::chromatix_asf30TypeClass*)pModule;
}

bincorr_1_0_0::chromatix_bincorr10Type* TuningSetManager::GetModule_bincorr10_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"bincorr10_bps",
        modeBranch, modeCount);

    return (bincorr_1_0_0::chromatix_bincorr10Type*)(bincorr_1_0_0::chromatix_bincorr10TypeClass*)pModule;
}

bincorr_1_0_0::chromatix_bincorr10Type* TuningSetManager::GetModule_bincorr10_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"bincorr10_ife",
        modeBranch, modeCount);

    return (bincorr_1_0_0::chromatix_bincorr10Type*)(bincorr_1_0_0::chromatix_bincorr10TypeClass*)pModule;
}

tintless_2_0_0::chromatix_tintless20Type* TuningSetManager::GetModule_tintless20_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"tintless20_sw",
        modeBranch, modeCount);

    return (tintless_2_0_0::chromatix_tintless20Type*)(tintless_2_0_0::chromatix_tintless20TypeClass*)pModule;
}

demosaic_3_6_0::chromatix_demosaic36Type* TuningSetManager::GetModule_demosaic36_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"demosaic36_bps",
        modeBranch, modeCount);

    return (demosaic_3_6_0::chromatix_demosaic36Type*)(demosaic_3_6_0::chromatix_demosaic36TypeClass*)pModule;
}

demosaic_3_6_0::chromatix_demosaic36Type* TuningSetManager::GetModule_demosaic36_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"demosaic36_ife",
        modeBranch, modeCount);

    return (demosaic_3_6_0::chromatix_demosaic36Type*)(demosaic_3_6_0::chromatix_demosaic36TypeClass*)pModule;
}

cc_1_2_0::chromatix_cc12Type* TuningSetManager::GetModule_cc12_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"cc12_ife",
        modeBranch, modeCount);

    return (cc_1_2_0::chromatix_cc12Type*)(cc_1_2_0::chromatix_cc12TypeClass*)pModule;
}

gamma_1_6_0::chromatix_gamma16Type* TuningSetManager::GetModule_gamma16_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"gamma16_bps",
        modeBranch, modeCount);

    return (gamma_1_6_0::chromatix_gamma16Type*)(gamma_1_6_0::chromatix_gamma16TypeClass*)pModule;
}

gamma_1_6_0::chromatix_gamma16Type* TuningSetManager::GetModule_gamma16_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"gamma16_ife",
        modeBranch, modeCount);

    return (gamma_1_6_0::chromatix_gamma16Type*)(gamma_1_6_0::chromatix_gamma16TypeClass*)pModule;
}

cv_1_2_0::chromatix_cv12Type* TuningSetManager::GetModule_cv12_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"cv12_ipe",
        modeBranch, modeCount);

    return (cv_1_2_0::chromatix_cv12Type*)(cv_1_2_0::chromatix_cv12TypeClass*)pModule;
}

anr_1_0_0::chromatix_anr10Type* TuningSetManager::GetModule_anr10_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"anr10_ipe",
        modeBranch, modeCount);

    return (anr_1_0_0::chromatix_anr10Type*)(anr_1_0_0::chromatix_anr10TypeClass*)pModule;
}

tf_1_0_0::chromatix_tf10Type* TuningSetManager::GetModule_tf10_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"tf10_ipe",
        modeBranch, modeCount);

    return (tf_1_0_0::chromatix_tf10Type*)(tf_1_0_0::chromatix_tf10TypeClass*)pModule;
}

dsx_1_0_0::chromatix_dsx10Type* TuningSetManager::GetModule_dsx10_ife_video_full_dc4(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"dsx10_ife_video_full_dc4",
        modeBranch, modeCount);

    return (dsx_1_0_0::chromatix_dsx10Type*)(dsx_1_0_0::chromatix_dsx10TypeClass*)pModule;
}

gtm_1_0_0::chromatix_gtm10Type* TuningSetManager::GetModule_gtm10_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"gtm10_bps",
        modeBranch, modeCount);

    return (gtm_1_0_0::chromatix_gtm10Type*)(gtm_1_0_0::chromatix_gtm10TypeClass*)pModule;
}

gtm_1_0_0::chromatix_gtm10Type* TuningSetManager::GetModule_gtm10_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"gtm10_ife",
        modeBranch, modeCount);

    return (gtm_1_0_0::chromatix_gtm10Type*)(gtm_1_0_0::chromatix_gtm10TypeClass*)pModule;
}

lrme_1_0_0::chromatix_lrme10Type* TuningSetManager::GetModule_lrme10_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"lrme10_ipe",
        modeBranch, modeCount);

    return (lrme_1_0_0::chromatix_lrme10Type*)(lrme_1_0_0::chromatix_lrme10TypeClass*)pModule;
}

hdrvideo_1_0_0::chromatix_hdrvideo10Type* TuningSetManager::GetModule_hdrvideo10_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"hdrvideo10_sw",
        modeBranch, modeCount);

    return (hdrvideo_1_0_0::chromatix_hdrvideo10Type*)(hdrvideo_1_0_0::chromatix_hdrvideo10TypeClass*)pModule;
}

cvp_1_0_0::chromatix_cvp10Type* TuningSetManager::GetModule_cvp10_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"cvp10_ipe",
        modeBranch, modeCount);

    return (cvp_1_0_0::chromatix_cvp10Type*)(cvp_1_0_0::chromatix_cvp10TypeClass*)pModule;
}

video_1_0_0::chromatix_video10Type* TuningSetManager::GetModule_video10_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"video10_sw",
        modeBranch, modeCount);

    return (video_1_0_0::chromatix_video10Type*)(video_1_0_0::chromatix_video10TypeClass*)pModule;
}

tdl_1_0_0::chromatix_tdl10Type* TuningSetManager::GetModule_tdl10_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"tdl10_ipe",
        modeBranch, modeCount);

    return (tdl_1_0_0::chromatix_tdl10Type*)(tdl_1_0_0::chromatix_tdl10TypeClass*)pModule;
}

pdpc_1_1_0::chromatix_pdpc11Type* TuningSetManager::GetModule_pdpc11_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"pdpc11_ife",
        modeBranch, modeCount);

    return (pdpc_1_1_0::chromatix_pdpc11Type*)(pdpc_1_1_0::chromatix_pdpc11TypeClass*)pModule;
}

linearization_3_3_0::chromatix_linearization33Type* TuningSetManager::GetModule_linearization33_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"linearization33_ife",
        modeBranch, modeCount);

    return (linearization_3_3_0::chromatix_linearization33Type*)(linearization_3_3_0::chromatix_linearization33TypeClass*)pModule;
}

cc_1_3_0::chromatix_cc13Type* TuningSetManager::GetModule_cc13_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"cc13_bps",
        modeBranch, modeCount);

    return (cc_1_3_0::chromatix_cc13Type*)(cc_1_3_0::chromatix_cc13TypeClass*)pModule;
}

cc_1_3_0::chromatix_cc13Type* TuningSetManager::GetModule_cc13_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"cc13_ife",
        modeBranch, modeCount);

    return (cc_1_3_0::chromatix_cc13Type*)(cc_1_3_0::chromatix_cc13TypeClass*)pModule;
}

cc_1_3_0::chromatix_cc13Type* TuningSetManager::GetModule_cc13_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"cc13_ipe",
        modeBranch, modeCount);

    return (cc_1_3_0::chromatix_cc13Type*)(cc_1_3_0::chromatix_cc13TypeClass*)pModule;
}

gic_3_0_0::chromatix_gic30Type* TuningSetManager::GetModule_gic30_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"gic30_bps",
        modeBranch, modeCount);

    return (gic_3_0_0::chromatix_gic30Type*)(gic_3_0_0::chromatix_gic30TypeClass*)pModule;
}

ltm_1_4_0::chromatix_ltm14Type* TuningSetManager::GetModule_ltm14_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ltm14_ipe",
        modeBranch, modeCount);

    return (ltm_1_4_0::chromatix_ltm14Type*)(ltm_1_4_0::chromatix_ltm14TypeClass*)pModule;
}

ica_1_0_0::chromatix_ica10Type* TuningSetManager::GetModule_ica10_ipe_module1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ica10_ipe_module1",
        modeBranch, modeCount);

    return (ica_1_0_0::chromatix_ica10Type*)(ica_1_0_0::chromatix_ica10TypeClass*)pModule;
}

ica_1_0_0::chromatix_ica10Type* TuningSetManager::GetModule_ica10_ipe_module2(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ica10_ipe_module2",
        modeBranch, modeCount);

    return (ica_1_0_0::chromatix_ica10Type*)(ica_1_0_0::chromatix_ica10TypeClass*)pModule;
}

eis_1_1_0::chromatix_eis11Type* TuningSetManager::GetModule_eis11_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"eis11_sw",
        modeBranch, modeCount);

    return (eis_1_1_0::chromatix_eis11Type*)(eis_1_1_0::chromatix_eis11TypeClass*)pModule;
}

mf_1_1_0::chromatix_mf11Type* TuningSetManager::GetModule_mf11_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"mf11_sw",
        modeBranch, modeCount);

    return (mf_1_1_0::chromatix_mf11Type*)(mf_1_1_0::chromatix_mf11TypeClass*)pModule;
}

tmc_1_0_0::chromatix_tmc10Type* TuningSetManager::GetModule_tmc10_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"tmc10_sw",
        modeBranch, modeCount);

    return (tmc_1_0_0::chromatix_tmc10Type*)(tmc_1_0_0::chromatix_tmc10TypeClass*)pModule;
}

pdpc_2_0_0::chromatix_pdpc20Type* TuningSetManager::GetModule_pdpc20_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"pdpc20_bps",
        modeBranch, modeCount);

    return (pdpc_2_0_0::chromatix_pdpc20Type*)(pdpc_2_0_0::chromatix_pdpc20TypeClass*)pModule;
}

tmc_1_2_0::chromatix_tmc12Type* TuningSetManager::GetModule_tmc12_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"tmc12_sw",
        modeBranch, modeCount);

    return (tmc_1_2_0::chromatix_tmc12Type*)(tmc_1_2_0::chromatix_tmc12TypeClass*)pModule;
}

pedestal_1_3_0::chromatix_pedestal13Type* TuningSetManager::GetModule_pedestal13_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"pedestal13_bps",
        modeBranch, modeCount);

    return (pedestal_1_3_0::chromatix_pedestal13Type*)(pedestal_1_3_0::chromatix_pedestal13TypeClass*)pModule;
}

pedestal_1_3_0::chromatix_pedestal13Type* TuningSetManager::GetModule_pedestal13_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"pedestal13_ife",
        modeBranch, modeCount);

    return (pedestal_1_3_0::chromatix_pedestal13Type*)(pedestal_1_3_0::chromatix_pedestal13TypeClass*)pModule;
}

pdpc_3_0_0::chromatix_pdpc30Type* TuningSetManager::GetModule_pdpc30_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"pdpc30_bps",
        modeBranch, modeCount);

    return (pdpc_3_0_0::chromatix_pdpc30Type*)(pdpc_3_0_0::chromatix_pdpc30TypeClass*)pModule;
}

pdpc_3_0_0::chromatix_pdpc30Type* TuningSetManager::GetModule_pdpc30_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"pdpc30_ife",
        modeBranch, modeCount);

    return (pdpc_3_0_0::chromatix_pdpc30Type*)(pdpc_3_0_0::chromatix_pdpc30TypeClass*)pModule;
}

ica_3_0_0::chromatix_ica30Type* TuningSetManager::GetModule_ica30_ipe_module1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ica30_ipe_module1",
        modeBranch, modeCount);

    return (ica_3_0_0::chromatix_ica30Type*)(ica_3_0_0::chromatix_ica30TypeClass*)pModule;
}

ica_3_0_0::chromatix_ica30Type* TuningSetManager::GetModule_ica30_ipe_module2(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ica30_ipe_module2",
        modeBranch, modeCount);

    return (ica_3_0_0::chromatix_ica30Type*)(ica_3_0_0::chromatix_ica30TypeClass*)pModule;
}

shdr_1_0_0::chromatix_shdr10Type* TuningSetManager::GetModule_shdr10_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"shdr10_sw",
        modeBranch, modeCount);

    return (shdr_1_0_0::chromatix_shdr10Type*)(shdr_1_0_0::chromatix_shdr10TypeClass*)pModule;
}

ldc_1_0_0::chromatix_ldc10Type* TuningSetManager::GetModule_ldc10_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ldc10_sw",
        modeBranch, modeCount);

    return (ldc_1_0_0::chromatix_ldc10Type*)(ldc_1_0_0::chromatix_ldc10TypeClass*)pModule;
}

demosaic_3_7_0::chromatix_demosaic37Type* TuningSetManager::GetModule_demosaic37_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"demosaic37_ife",
        modeBranch, modeCount);

    return (demosaic_3_7_0::chromatix_demosaic37Type*)(demosaic_3_7_0::chromatix_demosaic37TypeClass*)pModule;
}

tmc_1_1_0::chromatix_tmc11Type* TuningSetManager::GetModule_tmc11_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"tmc11_sw",
        modeBranch, modeCount);

    return (tmc_1_1_0::chromatix_tmc11Type*)(tmc_1_1_0::chromatix_tmc11TypeClass*)pModule;
}

ds4to1_1_1_0::chromatix_ds4to1v11Type* TuningSetManager::GetModule_ds4to1v11_ife_video_dc4_dc16(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ds4to1v11_ife_video_dc4_dc16",
        modeBranch, modeCount);

    return (ds4to1_1_1_0::chromatix_ds4to1v11Type*)(ds4to1_1_1_0::chromatix_ds4to1v11TypeClass*)pModule;
}

ds4to1_1_1_0::chromatix_ds4to1v11Type* TuningSetManager::GetModule_ds4to1v11_ife_disp_full_dc4(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ds4to1v11_ife_disp_full_dc4",
        modeBranch, modeCount);

    return (ds4to1_1_1_0::chromatix_ds4to1v11Type*)(ds4to1_1_1_0::chromatix_ds4to1v11TypeClass*)pModule;
}

ds4to1_1_1_0::chromatix_ds4to1v11Type* TuningSetManager::GetModule_ds4to1v11_ife_disp_dc4_dc16(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ds4to1v11_ife_disp_dc4_dc16",
        modeBranch, modeCount);

    return (ds4to1_1_1_0::chromatix_ds4to1v11Type*)(ds4to1_1_1_0::chromatix_ds4to1v11TypeClass*)pModule;
}

ds4to1_1_1_0::chromatix_ds4to1v11Type* TuningSetManager::GetModule_ds4to1v11_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ds4to1v11_ipe",
        modeBranch, modeCount);

    return (ds4to1_1_1_0::chromatix_ds4to1v11Type*)(ds4to1_1_1_0::chromatix_ds4to1v11TypeClass*)pModule;
}

cac_2_2_0::chromatix_cac22Type* TuningSetManager::GetModule_cac22_ipe(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"cac22_ipe",
        modeBranch, modeCount);

    return (cac_2_2_0::chromatix_cac22Type*)(cac_2_2_0::chromatix_cac22TypeClass*)pModule;
}

mf_1_0_0::chromatix_mf10Type* TuningSetManager::GetModule_mf10_sw(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"mf10_sw",
        modeBranch, modeCount);

    return (mf_1_0_0::chromatix_mf10Type*)(mf_1_0_0::chromatix_mf10TypeClass*)pModule;
}

lsc_4_0_0::chromatix_lsc40Type* TuningSetManager::GetModule_lsc40_bps(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"lsc40_bps",
        modeBranch, modeCount);

    return (lsc_4_0_0::chromatix_lsc40Type*)(lsc_4_0_0::chromatix_lsc40TypeClass*)pModule;
}

lsc_4_0_0::chromatix_lsc40Type* TuningSetManager::GetModule_lsc40_ife(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"lsc40_ife",
        modeBranch, modeCount);

    return (lsc_4_0_0::chromatix_lsc40Type*)(lsc_4_0_0::chromatix_lsc40TypeClass*)pModule;
}

afhafelements::chromatixHAFType* TuningSetManager::GetModule_chromatixHAF(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"chromatixHAF",
        modeBranch, modeCount);

    return (afhafelements::chromatixHAFType*)(afhafelements::chromatixHAFTypeClass*)pModule;
}

afdciafelements::chromatixDCIAFType* TuningSetManager::GetModule_chromatixDCIAF(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"chromatixDCIAF",
        modeBranch, modeCount);

    return (afdciafelements::chromatixDCIAFType*)(afdciafelements::chromatixDCIAFTypeClass*)pModule;
}

afpdafelements::chromatixPDAFType* TuningSetManager::GetModule_chromatixPDAF(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"chromatixPDAF",
        modeBranch, modeCount);

    return (afpdafelements::chromatixPDAFType*)(afpdafelements::chromatixPDAFTypeClass*)pModule;
}

afmonitorelements::chromatixAFMONITORType* TuningSetManager::GetModule_chromatixAFMONITOR(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"chromatixAFMONITOR",
        modeBranch, modeCount);

    return (afmonitorelements::chromatixAFMONITORType*)(afmonitorelements::chromatixAFMONITORTypeClass*)pModule;
}

afpdlibelements::chromatixPDLibType* TuningSetManager::GetModule_chromatixPDLib(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"chromatixPDLib",
        modeBranch, modeCount);

    return (afpdlibelements::chromatixPDLibType*)(afpdlibelements::chromatixPDLibTypeClass*)pModule;
}

afbafelements::chromatixBAFType* TuningSetManager::GetModule_chromatixBAF(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"chromatixBAF",
        modeBranch, modeCount);

    return (afbafelements::chromatixBAFType*)(afbafelements::chromatixBAFTypeClass*)pModule;
}

afsoftwarestatelements::chromatixAFTuningSoftwareStatisticsType* TuningSetManager::GetModule_chromatixAFTuningSoftwareStatistics(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"chromatixAFTuningSoftwareStatistics",
        modeBranch, modeCount);

    return (afsoftwarestatelements::chromatixAFTuningSoftwareStatisticsType*)(afsoftwarestatelements::chromatixAFTuningSoftwareStatisticsTypeClass*)pModule;
}

afcontrastafelements::chromatixContrastAFType* TuningSetManager::GetModule_chromatixContrastAF(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"chromatixContrastAF",
        modeBranch, modeCount);

    return (afcontrastafelements::chromatixContrastAFType*)(afcontrastafelements::chromatixContrastAFTypeClass*)pModule;
}

afextensionelements::chromatixAFExtensionType* TuningSetManager::GetModule_chromatixAFExtension(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"chromatixAFExtension",
        modeBranch, modeCount);

    return (afextensionelements::chromatixAFExtensionType*)(afextensionelements::chromatixAFExtensionTypeClass*)pModule;
}

aftofelements::chromatixTOFType* TuningSetManager::GetModule_chromatixTOF(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"chromatixTOF",
        modeBranch, modeCount);

    return (aftofelements::chromatixTOFType*)(aftofelements::chromatixTOFTypeClass*)pModule;
}

afalgotuningelements::chromatixAFAlgoTuningType* TuningSetManager::GetModule_chromatixAFAlgoTuning(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"chromatixAFAlgoTuning",
        modeBranch, modeCount);

    return (afalgotuningelements::chromatixAFAlgoTuningType*)(afalgotuningelements::chromatixAFAlgoTuningTypeClass*)pModule;
}

afdepthafelements::chromatixDepthAFType* TuningSetManager::GetModule_chromatixDepthAF(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"chromatixDepthAF",
        modeBranch, modeCount);

    return (afdepthafelements::chromatixDepthAFType*)(afdepthafelements::chromatixDepthAFTypeClass*)pModule;
}

modsagenv2::chromatixSAGenV2ArrayType* TuningSetManager::GetModule_SAGenV2DataArray(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SAGenV2DataArray",
        modeBranch, modeCount);

    return (modsagenv2::chromatixSAGenV2ArrayType*)(modsagenv2::chromatixSAGenV2ArrayTypeClass*)pModule;
}

moddav1::chromatixDAV1Type* TuningSetManager::GetModule_DAV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"DAV1",
        modeBranch, modeCount);

    return (moddav1::chromatixDAV1Type*)(moddav1::chromatixDAV1TypeClass*)pModule;
}

moddistwvv1::chromatixDistWVV1Type* TuningSetManager::GetModule_SFDistWVV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SFDistWVV1",
        modeBranch, modeCount);

    return (moddistwvv1::chromatixDistWVV1Type*)(moddistwvv1::chromatixDistWVV1TypeClass*)pModule;
}

modsfstatscrv1::chromatixSFStatScrV1Type* TuningSetManager::GetModule_SFStatScrV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SFStatScrV1",
        modeBranch, modeCount);

    return (modsfstatscrv1::chromatixSFStatScrV1Type*)(modsfstatscrv1::chromatixSFStatScrV1TypeClass*)pModule;
}

modawbbestshotv1::chromatixAWBBestShotV1Type* TuningSetManager::GetModule_bestShotV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"bestShotV1",
        modeBranch, modeCount);

    return (modawbbestshotv1::chromatixAWBBestShotV1Type*)(modawbbestshotv1::chromatixAWBBestShotV1TypeClass*)pModule;
}

modparamextv1::chromatixExtensionParamV1Type* TuningSetManager::GetModule_AWBExtensionParam(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"AWBExtensionParam",
        modeBranch, modeCount);

    return (modparamextv1::chromatixExtensionParamV1Type*)(modparamextv1::chromatixExtensionParamV1TypeClass*)pModule;
}

modcustrefptv1::chromatixCustRefPtV1type* TuningSetManager::GetModule_custRefPtV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"custRefPtV1",
        modeBranch, modeCount);

    return (modcustrefptv1::chromatixCustRefPtV1type*)(modcustrefptv1::chromatixCustRefPtV1typeClass*)pModule;
}

modsaagwv1::chromatixSAAGWV1Type* TuningSetManager::GetModule_SAAGWV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SAAGWV1",
        modeBranch, modeCount);

    return (modsaagwv1::chromatixSAAGWV1Type*)(modsaagwv1::chromatixSAAGWV1TypeClass*)pModule;
}

modspecilluv1::chromatixspecilluv1type* TuningSetManager::GetModule_ledTorchV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ledTorchV1",
        modeBranch, modeCount);

    return (modspecilluv1::chromatixspecilluv1type*)(modspecilluv1::chromatixspecilluv1typeClass*)pModule;
}

modspecilluv1::chromatixspecilluv1type* TuningSetManager::GetModule_lcdFlashV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"lcdFlashV1",
        modeBranch, modeCount);

    return (modspecilluv1::chromatixspecilluv1type*)(modspecilluv1::chromatixspecilluv1typeClass*)pModule;
}

modilluwvv1::chromatixIlluWVV1Type* TuningSetManager::GetModule_SFIlluWVV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SFIlluWVV1",
        modeBranch, modeCount);

    return (modilluwvv1::chromatixIlluWVV1Type*)(modilluwvv1::chromatixIlluWVV1TypeClass*)pModule;
}

modawbinitv1::chromatixAWBInitV1Type* TuningSetManager::GetModule_initDataV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"initDataV1",
        modeBranch, modeCount);

    return (modawbinitv1::chromatixAWBInitV1Type*)(modawbinitv1::chromatixAWBInitV1TypeClass*)pModule;
}

modmwbv1::chromatixMWBV1Type* TuningSetManager::GetModule_MWBGainV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"MWBGainV1",
        modeBranch, modeCount);

    return (modmwbv1::chromatixMWBV1Type*)(modmwbv1::chromatixMWBV1TypeClass*)pModule;
}

modawbfaceassistv1::chromatixAWBFaceAssistV1Type* TuningSetManager::GetModule_faceAssistV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"faceAssistV1",
        modeBranch, modeCount);

    return (modawbfaceassistv1::chromatixAWBFaceAssistV1Type*)(modawbfaceassistv1::chromatixAWBFaceAssistV1TypeClass*)pModule;
}

modgeneralwvv1::chromatixGeneralWVV1Type* TuningSetManager::GetModule_SFGeneralWVV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SFGeneralWVV1",
        modeBranch, modeCount);

    return (modgeneralwvv1::chromatixGeneralWVV1Type*)(modgeneralwvv1::chromatixGeneralWVV1TypeClass*)pModule;
}

modscconvv1::chromatixSCConvV1Type* TuningSetManager::GetModule_awbSceneChangeConvergeV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"awbSceneChangeConvergeV1",
        modeBranch, modeCount);

    return (modscconvv1::chromatixSCConvV1Type*)(modscconvv1::chromatixSCConvV1TypeClass*)pModule;
}

modscconvv1::chromatixSCConvV1Type* TuningSetManager::GetModule_scConv(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"scConv",
        modeBranch, modeCount);

    return (modscconvv1::chromatixSCConvV1Type*)(modscconvv1::chromatixSCConvV1TypeClass*)pModule;
}

modawbfaceprocessorv1::chromatixAWBFaceROIProcessorV1Type* TuningSetManager::GetModule_faceROIProcessorV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"faceROIProcessorV1",
        modeBranch, modeCount);

    return (modawbfaceprocessorv1::chromatixAWBFaceROIProcessorV1Type*)(modawbfaceprocessorv1::chromatixAWBFaceROIProcessorV1TypeClass*)pModule;
}

modrefptv1::chromatixRefPtV1Type* TuningSetManager::GetModule_refPtV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"refPtV1",
        modeBranch, modeCount);

    return (modrefptv1::chromatixRefPtV1Type*)(modrefptv1::chromatixRefPtV1TypeClass*)pModule;
}

modtmpconvv1::chromatixTmpConvV1Type* TuningSetManager::GetModule_tmpConvV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"tmpConvV1",
        modeBranch, modeCount);

    return (modtmpconvv1::chromatixTmpConvV1Type*)(modtmpconvv1::chromatixTmpConvV1TypeClass*)pModule;
}

modflashwv1::chromatixFlashWV1Type* TuningSetManager::GetModule_flashWV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"flashWV1",
        modeBranch, modeCount);

    return (modflashwv1::chromatixFlashWV1Type*)(modflashwv1::chromatixFlashWV1TypeClass*)pModule;
}

modtrigladjv1::chromatixTriglAdjV1Type* TuningSetManager::GetModule_triglGAV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"triglGAV1",
        modeBranch, modeCount);

    return (modtrigladjv1::chromatixTriglAdjV1Type*)(modtrigladjv1::chromatixTriglAdjV1TypeClass*)pModule;
}

modsagenv1::chromatixSAGenV1ArrayType* TuningSetManager::GetModule_SAGenV1DataArray(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SAGenV1DataArray",
        modeBranch, modeCount);

    return (modsagenv1::chromatixSAGenV1ArrayType*)(modsagenv1::chromatixSAGenV1ArrayTypeClass*)pModule;
}

modflashdecv1::chromatixFlashDecV1Type* TuningSetManager::GetModule_flashDecV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"flashDecV1",
        modeBranch, modeCount);

    return (modflashdecv1::chromatixFlashDecV1Type*)(modflashdecv1::chromatixFlashDecV1TypeClass*)pModule;
}

modbgstatsconfigv1::chromatixBGStatsConfigV1Type* TuningSetManager::GetModule_bgStatsConfigV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"bgStatsConfigV1",
        modeBranch, modeCount);

    return (modbgstatsconfigv1::chromatixBGStatsConfigV1Type*)(modbgstatsconfigv1::chromatixBGStatsConfigV1TypeClass*)pModule;
}

modmlczv2::chromatixMLCZV2Type* TuningSetManager::GetModule_SFMLCZV2(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SFMLCZV2",
        modeBranch, modeCount);

    return (modmlczv2::chromatixMLCZV2Type*)(modmlczv2::chromatixMLCZV2TypeClass*)pModule;
}

modsaspatialgenv1::chromatixSASpatialGenV1ArrayType* TuningSetManager::GetModule_SASpatialGenV1DataArray(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SASpatialGenV1DataArray",
        modeBranch, modeCount);

    return (modsaspatialgenv1::chromatixSASpatialGenV1ArrayType*)(modsaspatialgenv1::chromatixSASpatialGenV1ArrayTypeClass*)pModule;
}

modsfsubsmpv1::chromatixSFSubSmpV1Type* TuningSetManager::GetModule_SFSubSmpV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SFSubSmpV1",
        modeBranch, modeCount);

    return (modsfsubsmpv1::chromatixSFSubSmpV1Type*)(modsfsubsmpv1::chromatixSFSubSmpV1TypeClass*)pModule;
}

modsensorcalv1::chromatixSenorCalV1Type* TuningSetManager::GetModule_sensorCalV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"sensorCalV1",
        modeBranch, modeCount);

    return (modsensorcalv1::chromatixSenorCalV1Type*)(modsensorcalv1::chromatixSenorCalV1TypeClass*)pModule;
}

modhistctrlv1::chromatixHistCtrlV1Type* TuningSetManager::GetModule_histCtrlV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"histCtrlV1",
        modeBranch, modeCount);

    return (modhistctrlv1::chromatixHistCtrlV1Type*)(modhistctrlv1::chromatixHistCtrlV1TypeClass*)pModule;
}

modmlczv3::chromatixMLCZV3Type* TuningSetManager::GetModule_SFMLCZV3(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SFMLCZV3",
        modeBranch, modeCount);

    return (modmlczv3::chromatixMLCZV3Type*)(modmlczv3::chromatixMLCZV3TypeClass*)pModule;
}

moddualcamsyncv1::chromatixdualcamSyncV1Type* TuningSetManager::GetModule_dualcamSyncV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"dualcamSyncV1",
        modeBranch, modeCount);

    return (moddualcamsyncv1::chromatixdualcamSyncV1Type*)(moddualcamsyncv1::chromatixdualcamSyncV1TypeClass*)pModule;
}

modspectralsensorinfoassistawbv1::chromatixSpectralSensorInfoAssistV1Type* TuningSetManager::GetModule_SFSpectralSensorAssistV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SFSpectralSensorAssistV1",
        modeBranch, modeCount);

    return (modspectralsensorinfoassistawbv1::chromatixSpectralSensorInfoAssistV1Type*)(modspectralsensorinfoassistawbv1::chromatixSpectralSensorInfoAssistV1TypeClass*)pModule;
}

modmlczv1::chromatixMLCZV1Type* TuningSetManager::GetModule_SFMLCZV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SFMLCZV1",
        modeBranch, modeCount);

    return (modmlczv1::chromatixMLCZV1Type*)(modmlczv1::chromatixMLCZV1TypeClass*)pModule;
}

modsaagwv2::chromatixSAAGWV2Type* TuningSetManager::GetModule_SAAGWV2(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SAAGWV2",
        modeBranch, modeCount);

    return (modsaagwv2::chromatixSAAGWV2Type*)(modsaagwv2::chromatixSAAGWV2TypeClass*)pModule;
}

modflashrefptv1::chromatixFlashRefPtV1Type* TuningSetManager::GetModule_flashRefPtV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"flashRefPtV1",
        modeBranch, modeCount);

    return (modflashrefptv1::chromatixFlashRefPtV1Type*)(modflashrefptv1::chromatixFlashRefPtV1TypeClass*)pModule;
}

moddsfv1::chromatixDSFV1Type* TuningSetManager::GetModule_DSFV1(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"DSFV1",
        modeBranch, modeCount);

    return (moddsfv1::chromatixDSFV1Type*)(moddsfv1::chromatixDSFV1TypeClass*)pModule;
}

aecMetering::AECCoreMeteringType* TuningSetManager::GetModule_Metering(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"Metering",
        modeBranch, modeCount);

    return (aecMetering::AECCoreMeteringType*)(aecMetering::AECCoreMeteringTypeClass*)pModule;
}

aecParamExtension::ParamExtensionType* TuningSetManager::GetModule_AECParamExtension(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"AECParamExtension",
        modeBranch, modeCount);

    return (aecParamExtension::ParamExtensionType*)(aecParamExtension::ParamExtensionTypeClass*)pModule;
}

aecFace::AECFaceType* TuningSetManager::GetModule_Face(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"Face",
        modeBranch, modeCount);

    return (aecFace::AECFaceType*)(aecFace::AECFaceTypeClass*)pModule;
}

aecStatsConfig::AECStatsConfig* TuningSetManager::GetModule_StatsDefaultConfig(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"StatsDefaultConfig",
        modeBranch, modeCount);

    return (aecStatsConfig::AECStatsConfig*)(aecStatsConfig::AECStatsConfigClass*)pModule;
}

aecStartUp::AECStartUpType* TuningSetManager::GetModule_StartUp(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"StartUp",
        modeBranch, modeCount);

    return (aecStartUp::AECStartUpType*)(aecStartUp::AECStartUpTypeClass*)pModule;
}

aecTouch::AECTouchType* TuningSetManager::GetModule_Touch(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"Touch",
        modeBranch, modeCount);

    return (aecTouch::AECTouchType*)(aecTouch::AECTouchTypeClass*)pModule;
}

aecConvergence::AECCoreConvergenceType* TuningSetManager::GetModule_Convergence(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"Convergence",
        modeBranch, modeCount);

    return (aecConvergence::AECCoreConvergenceType*)(aecConvergence::AECCoreConvergenceTypeClass*)pModule;
}

aecDepth::AECDepthType* TuningSetManager::GetModule_aecDepth(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"aecDepth",
        modeBranch, modeCount);

    return (aecDepth::AECDepthType*)(aecDepth::AECDepthTypeClass*)pModule;
}

aecTracker::AECTrackerType* TuningSetManager::GetModule_Tracker(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"Tracker",
        modeBranch, modeCount);

    return (aecTracker::AECTrackerType*)(aecTracker::AECTrackerTypeClass*)pModule;
}

aecSync::AECMultiCamType* TuningSetManager::GetModule_aecMultiCamSync(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"aecMultiCamSync",
        modeBranch, modeCount);

    return (aecSync::AECMultiCamType*)(aecSync::AECMultiCamTypeClass*)pModule;
}

aecSensorConfig::AECSensorHDRConfig* TuningSetManager::GetModule_SensorHDRDefaultConfig(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SensorHDRDefaultConfig",
        modeBranch, modeCount);

    return (aecSensorConfig::AECSensorHDRConfig*)(aecSensorConfig::AECSensorHDRConfigClass*)pModule;
}

aecGyro::AECGyroType* TuningSetManager::GetModule_aecGyro(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"aecGyro",
        modeBranch, modeCount);

    return (aecGyro::AECGyroType*)(aecGyro::AECGyroTypeClass*)pModule;
}

aecFlash::AECFlashType* TuningSetManager::GetModule_Flash(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"Flash",
        modeBranch, modeCount);

    return (aecFlash::AECFlashType*)(aecFlash::AECFlashTypeClass*)pModule;
}

aecSkip::AECSkipCtrlType* TuningSetManager::GetModule_aecSkipCtrl(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"aecSkipCtrl",
        modeBranch, modeCount);

    return (aecSkip::AECSkipCtrlType*)(aecSkip::AECSkipCtrlTypeClass*)pModule;
}

aecArbitration::AECCoreArbitrationType* TuningSetManager::GetModule_Arbitration(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"Arbitration",
        modeBranch, modeCount);

    return (aecArbitration::AECCoreArbitrationType*)(aecArbitration::AECCoreArbitrationTypeClass*)pModule;
}

aecSnapshotCtrl::AECSnapshotCtrlType* TuningSetManager::GetModule_SnapshotControl(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"SnapshotControl",
        modeBranch, modeCount);

    return (aecSnapshotCtrl::AECSnapshotCtrlType*)(aecSnapshotCtrl::AECSnapshotCtrlTypeClass*)pModule;
}

aecExtension::AECCoreExtensionType* TuningSetManager::GetModule_Extension(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"Extension",
        modeBranch, modeCount);

    return (aecExtension::AECCoreExtensionType*)(aecExtension::AECCoreExtensionTypeClass*)pModule;
}

rerTuning::ChromatixRedEyeReduction* TuningSetManager::GetModule_ChromatixRERTuningData(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ChromatixRERTuningData",
        modeBranch, modeCount);

    return (rerTuning::ChromatixRedEyeReduction*)(rerTuning::ChromatixRedEyeReductionClass*)pModule;
}

asdTuning::ChromatixASDTuningType* TuningSetManager::GetModule_ChromatixASDTuningData(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ChromatixASDTuningData",
        modeBranch, modeCount);

    return (asdTuning::ChromatixASDTuningType*)(asdTuning::ChromatixASDTuningTypeClass*)pModule;
}

afdTuning::chromatix_auto_flicker_detection_data_type* TuningSetManager::GetModule_ChromatixAFDTuningData(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"ChromatixAFDTuningData",
        modeBranch, modeCount);

    return (afdTuning::chromatix_auto_flicker_detection_data_type*)(afdTuning::chromatix_auto_flicker_detection_data_typeClass*)pModule;
}

