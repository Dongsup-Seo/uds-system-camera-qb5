////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecsensorconfig.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AECSENSORCONFIG_H
#define AECSENSORCONFIG_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "globalelements.h"
#include "aecglobalelements.h"

#define AECSENSORCONFIG_NAMESPACE_BEGIN namespace aecSensorConfig {
#define AECSENSORCONFIG_NAMESPACE_END }

AECSENSORCONFIG_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LumaCalculationType
/// Comments:       Core Stats Configuration Tuning Definition
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class LumaCalculationType
{
    LumaCalculationTypeGridPrio = 0,
    LumaCalculationTypeHistPrio = 1
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECSensorHDRConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECSensorHDRConfig
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SensorLumaComp
    ///
    /// Tuning Level:  never_tune
    /// Description:   factor to do luma compensation due to LSC loss
    /// Type:          float
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               SensorLumaComp;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// esRatio
    ///
    /// Tuning Level:  never_tune
    /// Description:   ratio of L/M and M/S
    /// Type:          float
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               esRatio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LumaCalculationConfig
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Select Type2 Luma calculation configuration type. LumaCalculationTypeGridPrio means use grid stats;
    ///                LumaCalculationTypeHistPrio means use histogram stats. Default value: LumaCalculationTypeHistPrio
    /// Range:         [0,1]
    /// Comments:       Core Stats Configuration Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    LumaCalculationType LumaCalculationConfig;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECSensorHDRConfigClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class AECSensorHDRConfigClass : public ParameterModule, public AECSensorHDRConfig
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 8;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECSensorHDRConfigClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECSensorHDRConfigClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~AECSensorHDRConfigClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECSensorHDRConfig
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECSensorHDRConfig(
        ParameterFileSymbolTableEntry* entry,
        AECSensorHDRConfig* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECSensorHDRConfig::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECSensorHDRConfig::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECSensorHDRConfig
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECSensorHDRConfig(
        AECSensorHDRConfig* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        AECSensorHDRConfig::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class AECSensorHDRConfigClass

AECSENSORCONFIG_NAMESPACE_END
#endif // AECSENSORCONFIG_H

