////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  video_1_0_0.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef VIDEO_1_0_0_H
#define VIDEO_1_0_0_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "ispglobalelements.h"

#define VIDEO_1_0_0_NAMESPACE_BEGIN namespace video_1_0_0 {
#define VIDEO_1_0_0_NAMESPACE_END }

VIDEO_1_0_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_video10_reserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_video10_reserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// general
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct generalStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_1
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 1.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Hide in GUI ! Linear interpolation.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_1;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_2
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 2.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Hide in GUI ! Linear interpolation.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_2;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_3
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 3.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Hide in GUI ! Linear interpolation.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_3;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_4
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 4.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Hide in GUI ! Nearest neighbor interpolation: discrete values allowed.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_4;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_5
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 5.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Hide in GUI ! Nearest neighbor interpolation: discrete values allowed.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_5;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_6
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 6.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Hide in GUI ! Nearest neighbor interpolation: discrete values allowed.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_6;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_lut_param_1_tab
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved Lut parameter 1.
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Length:        32
        /// Conversion:    No Conversion needed
        /// Notes:         Hide in GUI ! Linear interpolation.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct res_lut_param_1_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// res_lut_param_1 - Array
            ///
            /// Tuning Level:  never_tune
            /// Default Value: 0.0
            /// Length:        32
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            FLOAT res_lut_param_1[32];
        } res_lut_param_1_tab;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_lut_param_2_tab
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved Lut parameter 2.
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Length:        32
        /// Conversion:    No Conversion needed
        /// Notes:         Hide in GUI ! Nearest neighbor interpolation: discrete values allowed.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct res_lut_param_2_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// res_lut_param_2 - Array
            ///
            /// Tuning Level:  never_tune
            /// Default Value: 0.0
            /// Length:        32
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            FLOAT res_lut_param_2[32];
        } res_lut_param_2_tab;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_lut_param_3_tab
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved Lut parameter 3.
        /// Default Value: 0
        /// Range:         [0, 4294967295]
        /// Bit Depth:     32u
        /// Length:        16
        /// Conversion:    No Conversion needed
        /// Notes:         Hide in GUI ! Nearest neighbor interpolation: discrete values allowed.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct res_lut_param_3_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// res_lut_param_3 - Array
            ///
            /// Tuning Level:  never_tune
            /// Default Value: 0
            /// Length:        16
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32 res_lut_param_3[16];
        } res_lut_param_3_tab;
    } general;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fusion
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct fusionStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mode
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   Alignment mode. 0: image based only. 1: gyro based only. 2: auto calculate.
        /// Type:          uint
        /// Default Value: 2
        /// Range:         [0, 2]
        /// Bit Depth:     2u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 mode;
    } fusion;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sat
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct satStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// sat_enable
        ///
        /// Tuning Level:  often_tune
        /// Description:   SAT mode indication. 0: SAT is disabled. 1: SAT is enabled.
        /// Type:          uint
        /// Default Value: 0
        /// Range:         [0, 1]
        /// Bit Depth:     1u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 sat_enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// min_margin_ratio
        ///
        /// Tuning Level:  often_tune
        /// Description:   Min margin ratio at sensor DZ = 1.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [0.0, 0.1]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  min_margin_ratio;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// max_margin_ratio
        ///
        /// Tuning Level:  often_tune
        /// Description:   Max margin at sensor dz_for_max_margin_ratio. Should be bigger than min_margin_ratio .
        /// Type:          float
        /// Default Value: 0.1
        /// Range:         [0.0, 0.1]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  max_margin_ratio;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// dz_for_max_margin_ratio
        ///
        /// Tuning Level:  often_tune
        /// Description:   If digital zoom is higher that dz_for_max_margin_ratio, . sat_margin = max_margin_ratio. Else if digital
        ///                zoom is equal to 1, . sat_margin = min_margin_ratio. Else, use linear interpolation.
        /// Type:          float
        /// Default Value: 2.0
        /// Range:         [1.0, 16.0]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  dz_for_max_margin_ratio;
    } sat;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// video10_rgn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct video10_rgn_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// general
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct generalStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// max_vsr
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   The max ICA1 scale ratio in VSR mode.
        /// Type:          float
        /// Default Value: 1.0
        /// Range:         [1.0, 3.0]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Nearest neighbor interpolation: discrete values allowed.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT max_vsr;
    } general;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fusion
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct fusionStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// image_conf_high_threshold
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   RANSAC confidence high threshold. . Will switch from gyro to image based only if RANSAC confidence is
        ///                above this threshold. If both image_conf_high_threshold and image_conf_low_threshold are both equal to
        ///                257, gyro based alignment is always taken. If both of these parameters are set to -1, image based
        ///                alignment is always taken.
        /// Type:          int
        /// Default Value: 150
        /// Range:         [-1, 257]
        /// Bit Depth:     10s
        /// Conversion:    No Conversion needed
        /// Notes:         Nearest neighbor interpolation: discrete values allowed.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT image_conf_high_threshold;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// image_conf_low_threshold
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   Low threshold of RANSAC confidence. Will switch from image based to gyro only if RANSAC confidence is
        ///                below this threshold. If both image_conf_high_threshold and image_conf_low_threshold are both equal to
        ///                257, gyro based alignment is always taken. If both of these parameters are set to -1, image based
        ///                alignment is always taken.
        /// Type:          int
        /// Default Value: 100
        /// Range:         [-1, 257]
        /// Bit Depth:     10s
        /// Conversion:    No Conversion needed
        /// Notes:         Nearest neighbor interpolation: discrete values allowed.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT image_conf_low_threshold;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// absolute_motion_threshold
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   Threshold in pixels in 8Kx6K resolution. Absolute motion below this value will be considered as no
        ///                motion.
        /// Type:          float
        /// Default Value: 1
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Linear interpolation.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT absolute_motion_threshold;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// absolute_motion_confidence_threshold
        ///
        /// Tuning Level:  often_tune
        /// Description:   Threshold above which absolute motion is valid.
        /// Type:          uint
        /// Default Value: 100
        /// Range:         [0, 256]
        /// Bit Depth:     9u
        /// Conversion:    No Conversion needed
        /// Notes:         Nearest neighbor interpolation: discrete values allowed.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT absolute_motion_confidence_threshold;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// min_age
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   Minimum alignment type frames. Will switch between gyro and image based only if did not change type for
        ///                this number of frames.
        /// Type:          uint
        /// Default Value: 10
        /// Range:         [0, 4294967295]
        /// Bit Depth:     32u
        /// Conversion:    No Conversion needed
        /// Notes:         Nearest neighbor interpolation: discrete values allowed.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT min_age;
    } fusion;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_video10_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_video10_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::trigger_pt_type_aec  aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// video10_rgn_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    video10_rgn_dataType video10_rgn_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_video10_pre_scale_ratio_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_video10_pre_scale_ratio_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// pre_scale_ratio_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type      pre_scale_ratio_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// pre_scale_ratio_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct pre_scale_ratio_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_video10_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                    mod_video10_aec_dataCount;
        UINT32                    mod_video10_aec_dataID;
        mod_video10_aec_dataType* mod_video10_aec_data;
    } pre_scale_ratio_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_video10_hdr_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_video10_hdr_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type_aec_hdr hdr_aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct hdr_aec_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_video10_pre_scale_ratio_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                                mod_video10_pre_scale_ratio_dataCount;
        UINT32                                mod_video10_pre_scale_ratio_dataID;
        mod_video10_pre_scale_ratio_dataType* mod_video10_pre_scale_ratio_data;
    } hdr_aec_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_video10_lens_zoom_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_video10_lens_zoom_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lens_zoom_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type lens_zoom_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lens_zoom_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lens_zoom_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_video10_hdr_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                        mod_video10_hdr_aec_dataCount;
        UINT32                        mod_video10_hdr_aec_dataID;
        mod_video10_hdr_aec_dataType* mod_video10_hdr_aec_data;
    } lens_zoom_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_video10_lens_posn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_video10_lens_posn_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lens_posn_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type lens_posn_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lens_posn_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lens_posn_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_video10_lens_zoom_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                          mod_video10_lens_zoom_dataCount;
        UINT32                          mod_video10_lens_zoom_dataID;
        mod_video10_lens_zoom_dataType* mod_video10_lens_zoom_data;
    } lens_posn_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_video10_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_video10_coreType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mod_video10_lens_posn_data - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          mod_video10_lens_posn_dataCount;
    UINT32                          mod_video10_lens_posn_dataID;
    mod_video10_lens_posn_dataType* mod_video10_lens_posn_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_video10Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_video10Type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_variables
    ///
    /// Default Value: control_lens_position, control_lens_zoom, control_aec_exp_sensitivity_ratio, control_pre_scale_ratio, control_gain
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_variablesStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// control_var_type - Array
        /// Default Value: control_lens_position, control_lens_zoom, control_aec_exp_sensitivity_ratio, control_pre_scale_ratio, control_gain
        /// Length:        5
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        enum class control_var_typeEnum
        {
            control_lux_idx                   = 0,
            control_gain                      = 1,
            control_exp_time_ratio            = 3,
            control_aec_exp_sensitivity_ratio = 4,
            control_lens_position             = 8,
            control_lens_zoom                 = 13,
            control_pre_scale_ratio           = 14
        } control_var_type[5];
    } control_variables;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_method
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_methodStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_exp_control
        /// Default Value: control_gain
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_type     aec_exp_control;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_hdr_control
        /// Default Value: control_aec_exp_sensitivity_ratio
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_hdr_type aec_hdr_control;
    } control_method;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_video10_reserve
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_video10_reserveType chromatix_video10_reserve;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_video10_core
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_video10_coreType    chromatix_video10_core;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_video10TypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatix_video10TypeClass : public ParameterModule, public chromatix_video10Type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 1;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_video10TypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_video10TypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatix_video10TypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_video10_reserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_video10_reserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10_reserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_video10_reserveType_generalStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_video10_reserveType_generalStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10_reserveType::generalStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_video10_reserveType_generalStruct_res_lut_param_1_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_video10_reserveType_generalStruct_res_lut_param_1_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10_reserveType::generalStruct::res_lut_param_1_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_video10_reserveType_generalStruct_res_lut_param_2_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_video10_reserveType_generalStruct_res_lut_param_2_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10_reserveType::generalStruct::res_lut_param_2_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_video10_reserveType_generalStruct_res_lut_param_3_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_video10_reserveType_generalStruct_res_lut_param_3_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10_reserveType::generalStruct::res_lut_param_3_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_video10_reserveType_fusionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_video10_reserveType_fusionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10_reserveType::fusionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_video10_reserveType_satStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_video10_reserveType_satStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10_reserveType::satStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load video10_rgn_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadvideo10_rgn_dataType(
        ParameterFileSymbolTableEntry* entry,
        video10_rgn_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load video10_rgn_dataType_generalStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadvideo10_rgn_dataType_generalStruct(
        ParameterFileSymbolTableEntry* entry,
        video10_rgn_dataType::generalStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load video10_rgn_dataType_fusionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadvideo10_rgn_dataType_fusionStruct(
        ParameterFileSymbolTableEntry* entry,
        video10_rgn_dataType::fusionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_video10_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_video10_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_video10_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_video10_pre_scale_ratio_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_video10_pre_scale_ratio_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_video10_pre_scale_ratio_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_video10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_video10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_video10_pre_scale_ratio_dataType::pre_scale_ratio_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_video10_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_video10_hdr_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_video10_hdr_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_video10_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_video10_hdr_aec_dataType_hdr_aec_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_video10_hdr_aec_dataType::hdr_aec_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_video10_lens_zoom_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_video10_lens_zoom_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_video10_lens_zoom_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_video10_lens_zoom_dataType_lens_zoom_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_video10_lens_zoom_dataType_lens_zoom_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_video10_lens_zoom_dataType::lens_zoom_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_video10_lens_posn_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_video10_lens_posn_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_video10_lens_posn_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_video10_lens_posn_dataType_lens_posn_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_video10_lens_posn_dataType_lens_posn_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_video10_lens_posn_dataType::lens_posn_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_video10_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_video10_coreType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10_coreType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_video10Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_video10Type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10Type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10Type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10Type::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_variablesStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_variablesStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10Type::control_variablesStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_methodStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_methodStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_video10Type::control_methodStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_video10_pre_scale_ratio_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_video10_pre_scale_ratio_dataType(
        mod_video10_pre_scale_ratio_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_video10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_video10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct(
        mod_video10_pre_scale_ratio_dataType::pre_scale_ratio_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_video10_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_video10_hdr_aec_dataType(
        mod_video10_hdr_aec_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_video10_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_video10_hdr_aec_dataType_hdr_aec_dataStruct(
        mod_video10_hdr_aec_dataType::hdr_aec_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_video10_lens_zoom_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_video10_lens_zoom_dataType(
        mod_video10_lens_zoom_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_video10_lens_zoom_dataType_lens_zoom_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_video10_lens_zoom_dataType_lens_zoom_dataStruct(
        mod_video10_lens_zoom_dataType::lens_zoom_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_video10_lens_posn_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_video10_lens_posn_dataType(
        mod_video10_lens_posn_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_video10_lens_posn_dataType_lens_posn_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_video10_lens_posn_dataType_lens_posn_dataStruct(
        mod_video10_lens_posn_dataType::lens_posn_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_video10_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_video10_coreType(
        chromatix_video10_coreType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_video10Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_video10Type(
        chromatix_video10Type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatix_video10Type::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatix_video10TypeClass

VIDEO_1_0_0_NAMESPACE_END
#endif // VIDEO_1_0_0_H

