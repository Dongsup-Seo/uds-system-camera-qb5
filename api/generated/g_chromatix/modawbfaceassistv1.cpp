////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  modawbfaceassistv1.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "modawbfaceassistv1.h"
#include "parametersetmanager.h"

MODAWBFACEASSISTV1_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixAWBFaceAssistV1TypeClass::chromatixAWBFaceAssistV1TypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(moduleID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(enableFlag);
    PARAMETER_INITIALIZE(faceAssistSAWeight);
    PARAMETER_INITIALIZE(FaceROICtrl);
    PARAMETER_INITIALIZE(faceDetectCtrl);
    PARAMETER_INITIALIZE(ConvSpeed);
    PARAMETER_INITIALIZE(darkThresholdData);
    PARAMETER_INITIALIZE(SatThresholdData);
    PARAMETER_INITIALIZE(confidenceLevelCount);
    PARAMETER_INITIALIZE(confidenceLevelID);
    PARAMETER_INITIALIZE(confidenceLevel);
    PARAMETER_INITIALIZE(darkSkinTargetPt);
    PARAMETER_INITIALIZE(lightSkinTargetPt);
    PARAMETER_INITIALIZE(skinTypeInterpWeightCount);
    PARAMETER_INITIALIZE(skinTypeInterpWeightID);
    PARAMETER_INITIALIZE(skinTypeInterpWeight);
    PARAMETER_INITIALIZE(AWBGainLockCtrl);
    PARAMETER_INITIALIZE(CbCrHighThreshold);
    PARAMETER_INITIALIZE(CbCrLowThreshold);
    PARAMETER_INITIALIZE(SkinStatsScreening);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixAWBFaceAssistV1TypeClass::chromatixAWBFaceAssistV1TypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(moduleID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(enableFlag);
    PARAMETER_INITIALIZE(faceAssistSAWeight);
    PARAMETER_INITIALIZE(FaceROICtrl);
    PARAMETER_INITIALIZE(faceDetectCtrl);
    PARAMETER_INITIALIZE(ConvSpeed);
    PARAMETER_INITIALIZE(darkThresholdData);
    PARAMETER_INITIALIZE(SatThresholdData);
    PARAMETER_INITIALIZE(confidenceLevel);
    PARAMETER_INITIALIZE(darkSkinTargetPt);
    PARAMETER_INITIALIZE(lightSkinTargetPt);
    PARAMETER_INITIALIZE(skinTypeInterpWeight);
    PARAMETER_INITIALIZE(AWBGainLockCtrl);
    PARAMETER_INITIALIZE(CbCrHighThreshold);
    PARAMETER_INITIALIZE(CbCrLowThreshold);
    PARAMETER_INITIALIZE(SkinStatsScreening);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixAWBFaceAssistV1TypeClass::~chromatixAWBFaceAssistV1TypeClass()
{
    UnloadchromatixAWBFaceAssistV1Type(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixAWBFaceAssistV1TypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "faceAssistV1")) == 0)
    {
        name = "faceAssistV1";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFaceAssistV1TargetDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAWBFaceAssistV1TypeClass::LoadmodFaceAssistV1TargetDataType(
    ParameterFileSymbolTableEntry* entry,
    modFaceAssistV1TargetDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 2; i++)
    {
        structure->triggerType[i] = (awbFaceSATriggerCtrlType)entry->ReadEnum(&result, alignment);
    }
    result = result && awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbglobalelements::awbSATargetLevel2Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbSATargetLevel2Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFaceAssistV1ConfidenceDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAWBFaceAssistV1TypeClass::LoadmodFaceAssistV1ConfidenceDataType(
    ParameterFileSymbolTableEntry* entry,
    modFaceAssistV1ConfidenceDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 2; i++)
    {
        structure->triggerType[i] = (awbFaceSATriggerCtrlType)entry->ReadEnum(&result, alignment);
    }
    result = result && awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbglobalelements::awbSAConfidenceLevel2Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbSAConfidenceLevel2Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFaceAssistV1StatThresholdDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAWBFaceAssistV1TypeClass::LoadmodFaceAssistV1StatThresholdDataType(
    ParameterFileSymbolTableEntry* entry,
    modFaceAssistV1StatThresholdDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbglobalelements::awbTriggerDataRGBType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbTriggerDataRGBType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFaceAssistV1FaceDetectCtrlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAWBFaceAssistV1TypeClass::LoadmodFaceAssistV1FaceDetectCtrlType(
    ParameterFileSymbolTableEntry* entry,
    modFaceAssistV1FaceDetectCtrlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->detectCntThreshold, alignment);
    result = result && entry->Read(&structure->detectCntThresForConvChange, alignment);
    result = result && entry->Read(&structure->nonDetectCntThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFaceAssistV1FaceROICtrlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAWBFaceAssistV1TypeClass::LoadmodFaceAssistV1FaceROICtrlType(
    ParameterFileSymbolTableEntry* entry,
    modFaceAssistV1FaceROICtrlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->ROIXScale, alignment);
    result = result && entry->Read(&structure->ROIYScale, alignment);
    result = result && entry->Read(&structure->FaceSelectThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFaceAssistV1CbCrDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAWBFaceAssistV1TypeClass::LoadmodFaceAssistV1CbCrDataType(
    ParameterFileSymbolTableEntry* entry,
    modFaceAssistV1CbCrDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 2; i++)
    {
        structure->triggerType[i] = (awbFaceSATriggerCtrlType)entry->ReadEnum(&result, alignment);
    }
    result = result && awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbglobalelements::awbCbCrLevel2Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbCbCrLevel2Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFaceAssistV1CbCrDiffDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAWBFaceAssistV1TypeClass::LoadmodFaceAssistV1CbCrDiffDataType(
    ParameterFileSymbolTableEntry* entry,
    modFaceAssistV1CbCrDiffDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 2; i++)
    {
        structure->triggerType[i] = (awbFaceSATriggerCtrlType)entry->ReadEnum(&result, alignment);
    }
    result = result && awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbglobalelements::awbCbCrDiffLevel2Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbCbCrDiffLevel2Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFaceAssistV1OutlierDistType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAWBFaceAssistV1TypeClass::LoadmodFaceAssistV1OutlierDistType(
    ParameterFileSymbolTableEntry* entry,
    modFaceAssistV1OutlierDistType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 2; i++)
    {
        structure->triggerType[i] = (awbFaceSATriggerCtrlType)entry->ReadEnum(&result, alignment);
    }
    result = result && awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbglobalelements::awbOutlierDist2Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbOutlierDist2Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFaceAssistV1AWBGainLockCtrlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAWBFaceAssistV1TypeClass::LoadmodFaceAssistV1AWBGainLockCtrlType(
    ParameterFileSymbolTableEntry* entry,
    modFaceAssistV1AWBGainLockCtrlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->AWBGainLockEnable, alignment);
    result = result && entry->Read(&structure->RGainPctDev, alignment);
    result = result && entry->Read(&structure->BGainPctDev, alignment);
    result = result && entry->Read(&structure->AWBGainStableCount, alignment);
    result = result && entry->Read(&structure->AWBGainLockCount, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFaceAssistV1SkinStatsScreeningType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAWBFaceAssistV1TypeClass::LoadmodFaceAssistV1SkinStatsScreeningType(
    ParameterFileSymbolTableEntry* entry,
    modFaceAssistV1SkinStatsScreeningType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->StatsOutlierDistanceFilterEnable, alignment);
    result = result && entry->Read(&structure->LockDecisionOutlierDistanceFilterEnable, alignment);
    result = result && LoadmodFaceAssistV1OutlierDistType(entry, &structure->StatsOutlierDistanceScreening, alignment);
    result = result && LoadmodFaceAssistV1OutlierDistType(entry, &structure->lockDecisionPointOutlierDistanceScreening, alignment);
    result = result && entry->Read(&structure->ChromaFilterEnable, alignment);
    result = result && LoadmodFaceAssistV1CbCrDiffDataType(entry, &structure->CrCbDiffForChromaFilter, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAWBFaceAssistV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAWBFaceAssistV1TypeClass::LoadchromatixAWBFaceAssistV1Type(
    ParameterFileSymbolTableEntry* entry,
    chromatixAWBFaceAssistV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadmoduleIDType(entry, &structure->moduleID, alignment);
    result = result && Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && entry->Read(&structure->enableFlag, alignment);
    result = result && entry->Read(&structure->faceAssistSAWeight, alignment);
    result = result && LoadmodFaceAssistV1FaceROICtrlType(entry, &structure->FaceROICtrl, alignment);
    result = result && LoadmodFaceAssistV1FaceDetectCtrlType(entry, &structure->faceDetectCtrl, alignment);
    result = result && entry->Read(&structure->ConvSpeed, alignment);
    result = result && LoadmodFaceAssistV1StatThresholdDataType(entry, &structure->darkThresholdData, alignment);
    result = result && LoadmodFaceAssistV1StatThresholdDataType(entry, &structure->SatThresholdData, alignment);

    // Reading Array confidenceLevel from symbol table
    {
        result = result && entry->Read(&structure->confidenceLevelCount, alignment);
        structure->confidenceLevelID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->confidenceLevel = PARAMETER_NEW modFaceAssistV1ConfidenceDataType[structure->confidenceLevelCount];
        }
        if (!result || structure->confidenceLevel == NULL)
        {
            structure->confidenceLevelCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->confidenceLevelCount; i++)
        {
            result = LoadmodFaceAssistV1ConfidenceDataType(pointerEntry, &structure->confidenceLevel[i], alignment);
        }
    }
    result = result && LoadmodFaceAssistV1TargetDataType(entry, &structure->darkSkinTargetPt, alignment);
    result = result && LoadmodFaceAssistV1TargetDataType(entry, &structure->lightSkinTargetPt, alignment);

    // Reading Array skinTypeInterpWeight from symbol table
    {
        result = result && entry->Read(&structure->skinTypeInterpWeightCount, alignment);
        structure->skinTypeInterpWeightID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->skinTypeInterpWeight = PARAMETER_NEW modFaceAssistV1ConfidenceDataType[structure->skinTypeInterpWeightCount];
        }
        if (!result || structure->skinTypeInterpWeight == NULL)
        {
            structure->skinTypeInterpWeightCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->skinTypeInterpWeightCount; i++)
        {
            result = LoadmodFaceAssistV1ConfidenceDataType(pointerEntry, &structure->skinTypeInterpWeight[i], alignment);
        }
    }
    result = result && LoadmodFaceAssistV1AWBGainLockCtrlType(entry, &structure->AWBGainLockCtrl, alignment);
    result = result && LoadmodFaceAssistV1CbCrDataType(entry, &structure->CbCrHighThreshold, alignment);
    result = result && LoadmodFaceAssistV1CbCrDataType(entry, &structure->CbCrLowThreshold, alignment);
    result = result && LoadmodFaceAssistV1SkinStatsScreeningType(entry, &structure->SkinStatsScreening, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAWBFaceAssistV1TypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAWBFaceAssistV1Type::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFaceAssistV1TargetDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAWBFaceAssistV1TypeClass::UnloadmodFaceAssistV1TargetDataType(
    modFaceAssistV1TargetDataType* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        awbglobalelements::awbglobalelementsClass::UnloadawbSATargetLevel2Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFaceAssistV1ConfidenceDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAWBFaceAssistV1TypeClass::UnloadmodFaceAssistV1ConfidenceDataType(
    modFaceAssistV1ConfidenceDataType* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        awbglobalelements::awbglobalelementsClass::UnloadawbSAConfidenceLevel2Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFaceAssistV1StatThresholdDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAWBFaceAssistV1TypeClass::UnloadmodFaceAssistV1StatThresholdDataType(
    modFaceAssistV1StatThresholdDataType* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFaceAssistV1CbCrDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAWBFaceAssistV1TypeClass::UnloadmodFaceAssistV1CbCrDataType(
    modFaceAssistV1CbCrDataType* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        awbglobalelements::awbglobalelementsClass::UnloadawbCbCrLevel2Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFaceAssistV1CbCrDiffDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAWBFaceAssistV1TypeClass::UnloadmodFaceAssistV1CbCrDiffDataType(
    modFaceAssistV1CbCrDiffDataType* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        awbglobalelements::awbglobalelementsClass::UnloadawbCbCrDiffLevel2Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFaceAssistV1OutlierDistType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAWBFaceAssistV1TypeClass::UnloadmodFaceAssistV1OutlierDistType(
    modFaceAssistV1OutlierDistType* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        awbglobalelements::awbglobalelementsClass::UnloadawbOutlierDist2Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFaceAssistV1SkinStatsScreeningType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAWBFaceAssistV1TypeClass::UnloadmodFaceAssistV1SkinStatsScreeningType(
    modFaceAssistV1SkinStatsScreeningType* structure)
{
    UnloadmodFaceAssistV1OutlierDistType(&structure->StatsOutlierDistanceScreening);
    UnloadmodFaceAssistV1OutlierDistType(&structure->lockDecisionPointOutlierDistanceScreening);
    UnloadmodFaceAssistV1CbCrDiffDataType(&structure->CrCbDiffForChromaFilter);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixAWBFaceAssistV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAWBFaceAssistV1TypeClass::UnloadchromatixAWBFaceAssistV1Type(
    chromatixAWBFaceAssistV1Type* structure)
{
    UnloadmodFaceAssistV1StatThresholdDataType(&structure->darkThresholdData);
    UnloadmodFaceAssistV1StatThresholdDataType(&structure->SatThresholdData);
    for (UINT32 i = 0; i < structure->confidenceLevelCount; i++)
    {
        UnloadmodFaceAssistV1ConfidenceDataType(&structure->confidenceLevel[i]);
    }
    PARAMETER_DELETE[] structure->confidenceLevel;
    UnloadmodFaceAssistV1TargetDataType(&structure->darkSkinTargetPt);
    UnloadmodFaceAssistV1TargetDataType(&structure->lightSkinTargetPt);
    for (UINT32 i = 0; i < structure->skinTypeInterpWeightCount; i++)
    {
        UnloadmodFaceAssistV1ConfidenceDataType(&structure->skinTypeInterpWeight[i]);
    }
    PARAMETER_DELETE[] structure->skinTypeInterpWeight;
    UnloadmodFaceAssistV1CbCrDataType(&structure->CbCrHighThreshold);
    UnloadmodFaceAssistV1CbCrDataType(&structure->CbCrLowThreshold);
    UnloadmodFaceAssistV1SkinStatsScreeningType(&structure->SkinStatsScreening);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixAWBFaceAssistV1TypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixAWBFaceAssistV1TypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixAWBFaceAssistV1TypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixAWBFaceAssistV1Type(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


MODAWBFACEASSISTV1_NAMESPACE_END
