////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecmetering.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AECMETERING_H
#define AECMETERING_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "globalelements.h"
#include "aecglobalelements.h"

#define AECMETERING_NAMESPACE_BEGIN namespace aecMetering {
#define AECMETERING_NAMESPACE_END }

AECMETERING_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NonLinearEstimateType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct NonLinearEstimateType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableNonLinearEstimate
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Flag to enable non linear luma target calculation
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL  enableNonLinearEstimate;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// errPct
    ///
    /// Tuning Level:  never_tune
    /// Description:   Min error percentage to fulfill
    /// Type:          float
    /// Default Value: 0.1
    /// Range:         [0.001,0.2]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT errPct;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxIterations
    ///
    /// Tuning Level:  never_tune
    /// Description:   maximum number of iterations allowed to calculate non linear estimate if errPct criterion cannot be
    ///                fulfilled
    /// Type:          int
    /// Default Value: 10
    /// Range:         [1,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 maxIterations;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AdvHistTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AdvHistTargetType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// nonLinHistTgt
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    NonLinearEstimateType nonLinHistTgt;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SuppressNonLinearZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SuppressNonLinearZoneDataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// outputGain
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   remaps input luma gain to output gain
    /// Type:          float
    /// Range:         [1.0,100.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT outputGain;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SuppressNonLinearZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SuppressNonLinearZoneType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ///
    /// Description:   luma gain start and end values that define trigger region
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType              zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData
    ///
    /// Description:   Triggered data: output gain assigned based on input gain
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SuppressNonLinearZoneDataType zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SuppressNonLinearType
///
/// Description:   Suppress difference between non linear luma target and linear lux-based luma target
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SuppressNonLinearType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// suppressNonLinearZone - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                     suppressNonLinearZoneCount;
    UINT32                     suppressNonLinearZoneID;
    SuppressNonLinearZoneType* suppressNonLinearZone;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AdvLuxTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AdvLuxTargetType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// nonLinLuxTgt
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    NonLinearEstimateType nonLinLuxTgt;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableForYOnly
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enables non linear lux target only if Y histogram is available
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                  enableForYOnly;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// suppressNonLinearLuma
    ///
    /// Description:   Suppress difference between non linear luma target and linear lux-based luma target
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SuppressNonLinearType suppressNonLinearLuma;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AdvancedTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AdvancedTargetType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// advLuxTgt
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AdvLuxTargetType  advLuxTgt;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// advHistTgt
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AdvHistTargetType advHistTgt;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DynamicEVLockType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DynamicEVLockType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Tuning Level:  offen_tune
    /// Description:   Feature enable flag for dynamic EV lock based on scene change
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL  enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// convDelayOffset
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Number of frames to delay the scene change rebase. Luma convergence takes few frame to settle,
    ///                convergence offset ensures luma is settle / within range before rebase the base line in scene change
    ///                detection
    /// Type:          int
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 convDelayOffset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SCConsTh
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Consecutive count threshold for scene change detection.
    /// Type:          int
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 SCConsTh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SCRatio
    ///
    /// Tuning Level:  offen_tune
    /// Description:   Ratio of current luma and scene change baseline. If current frame ratio goes beyond threshold then SC is
    ///                detected
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT SCRatio;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// EVLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct EVLumaTargetType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stepsPerEV
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Number of steps for each full EV (1 stop) in the EVCompTable.
    /// Type:          int
    /// Range:         [1,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32             stepsPerEV;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minEVValue
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   minimal EV values (starting point) in the EVCompTable.
    /// Type:          int
    /// Range:         [-3,0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32             minEVValue;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxEVValue
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   maximal EV values (ending point) in the EVCompTable.
    /// Type:          int
    /// Range:         [0,3]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32             maxEVValue;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// EVCompTable
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Luma target scaling ratios for the particular EV value.
    /// Type:          float
    /// Range:         [0, 5]
    /// Length:        49
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct EVCompTableStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// EVCompTableElements - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Length:        49
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT EVCompTableElements[49];
    } EVCompTable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dynamicEVLock
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicEVLockType dynamicEVLock;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ExtrmClrLumaTargetZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ExtrmClrLumaTargetZoneDataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// channelAdjRatio - Array
    ///
    /// Tuning Level:  often_tune
    /// Description:   Target adjustment ratio for each color channel in the sequence of R/G/B.
    /// Type:          float
    /// Range:         [0.4,1.0]
    /// Length:        3
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT channelAdjRatio[3];
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ExtrmClrLumaTargetZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ExtrmClrLumaTargetZoneType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType               zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ExtrmClrLumaTargetZoneDataType zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ExtrmClrThresRangeType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ExtrmClrThresRangeType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thres
    ///
    /// Tuning Level:  often_tune
    /// Description:   Threshold for determining if color ratios (rg, bg) is extreme.
    /// Type:          float
    /// Range:         [0,3]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT thres;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// interpPct
    ///
    /// Tuning Level:  often_tune
    /// Description:   Interpolation percentage (extends both direction from thres) to make stable transition in detection.
    /// Type:          float
    /// Range:         [0,0.2]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT interpPct;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ExtrmClrLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ExtrmClrLumaTargetType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableExtrmClr
    ///
    /// Tuning Level:  often_tune
    /// Description:   Flag to enable extreme color luma target adjustment.
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                        enableExtrmClr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresRed
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Threshold on RG ratio to determine if a stats is red.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ExtrmClrThresRangeType      thresRed;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresGreenR
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Threshold on RG ratio to determine if a stats is green.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ExtrmClrThresRangeType      thresGreenR;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresGreenB
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Threshold on BG ratio to determine if a stats is green.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ExtrmClrThresRangeType      thresGreenB;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresGreenCenter
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Threshold on RG/BG jointly to determine if a stats is green.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ExtrmClrThresRangeType      thresGreenCenter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresBlue
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Threshold on BG ratio to determine if a stats is blue.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ExtrmClrThresRangeType      thresBlue;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresColorStatsPct
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   A range in terms of percentage of color stats to determine whether to apply full target adjustment, or no
    ///                target adjustment.
    /// Range:         [0.0,1.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType                thresColorStatsPct;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresLumaLow
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Effect of the color stats is discounted if the luma value is below the said threshold.
    /// Type:          float
    /// Range:         [0,25]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                       thresLumaLow;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresLumaHigh
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Effect of the color stats is discounted if the luma value is above the said threshold.
    /// Type:          float
    /// Range:         [150,255]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                       thresLumaHigh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// extrmClrLumaTargetZone - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                      extrmClrLumaTargetZoneCount;
    UINT32                      extrmClrLumaTargetZoneID;
    ExtrmClrLumaTargetZoneType* extrmClrLumaTargetZone;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ADRCGainAdjustZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ADRCGainAdjustZoneDataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tolerance
    ///
    /// Tuning Level:  often_tune
    /// Description:   This parameter determines the range to adjust ADRC gain.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT tolerance;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ADRCGainAdjustZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ADRCGainAdjustZoneType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType           zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ADRCGainAdjustZoneDataType zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SensorHDRGainAdjustType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SensorHDRGainAdjustType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableADRGGainAdjust
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Setting this flag to adjust ADRC gain to avoid flicker.
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                    enableADRGGainAdjust;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ADRCGainAdjustZone - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                  ADRCGainAdjustZoneCount;
    UINT32                  ADRCGainAdjustZoneID;
    ADRCGainAdjustZoneType* ADRCGainAdjustZone;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// HistLumaTargetZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct HistLumaTargetZoneDataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minTargetAdjRatio
    ///
    /// Tuning Level:  often_tune
    /// Description:   Minimal target adjust ratio for safe exposure.
    /// Type:          float
    /// Range:         [0.6, 1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        minTargetAdjRatio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxTargetAdjRatio
    ///
    /// Tuning Level:  often_tune
    /// Description:   Maximal target adjust ratio for safe exposure.
    /// Type:          float
    /// Range:         [1.0, 2.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        maxTargetAdjRatio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// satRefLow
    ///
    /// Tuning Level:  often_tune
    /// Description:   Saturation low reference point, which sets the minimal brightness for saturation position.
    /// Type:          float
    /// Range:         [0,255]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        satRefLow;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// satRefHigh
    ///
    /// Tuning Level:  often_tune
    /// Description:   Saturation high reference point, which sets the maximal brightness for saturation position.
    /// Type:          float
    /// Range:         [0,255]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        satRefHigh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// darkRefLow
    ///
    /// Tuning Level:  often_tune
    /// Description:   Dark low reference point, which sets the minimal brightness for dark position.
    /// Type:          float
    /// Range:         [0,255]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        darkRefLow;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// darkRefHigh
    ///
    /// Tuning Level:  never_tune
    /// Description:   This one is not recommended to be used.
    /// Type:          float
    /// Range:         [0,255]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        darkRefHigh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// histSatPushupRange - Array
    ///
    /// Description:   The percentage range of pixels to be used to calculate saturation position for push up (flat scene
    ///                compensation). R/G/B channels get to specify independent ranges.
    /// Range:         [0.0,0.5]
    /// Length:        3
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType histSatPushupRange[3];

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// histSatPushdownRange - Array
    ///
    /// Description:   The percentage range of pixels to be used to calculate saturation position for push down (saturation
    ///                prevention). R/G/B channels get to specify independent ranges.
    /// Range:         [0.0,0.5]
    /// Length:        3
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType histSatPushdownRange[3];

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// histDarkRange - Array
    ///
    /// Description:   The percentage range of pixels to be used to calculate dark position. R/G/B channels get to specify
    ///                independent ranges.
    /// Range:         [0.0,0.5]
    /// Length:        3
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType histDarkRange[3];

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxDRCGain
    ///
    /// Tuning Level:  often_tune
    /// Description:   This parameter determines the max ratio between long and short exposure.
    /// Type:          float
    /// Default Value: 2.0
    /// Range:         [1,256]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        maxDRCGain;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxADRCGain
    ///
    /// Tuning Level:  often_tune
    /// Description:   This parameter determines the max ratio between safe and short exposure. Works together with
    ///                maxDarkBoostGain and is capped by maxDRCGain
    /// Type:          float
    /// Default Value: 2.0
    /// Range:         [1,256]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        maxADRCGain;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxDarkBoostGain
    ///
    /// Tuning Level:  often_tune
    /// Description:   This parameter determines the max ratio between long and safe exposure. Works together with maxADRCGain
    ///                and is capped by maxDRCGain
    /// Type:          float
    /// Default Value: 1.0
    /// Range:         [1,256]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        maxDarkBoostGain;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// HistLumaTargetZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct HistLumaTargetZoneType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType           zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    HistLumaTargetZoneDataType zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// HistLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct HistLumaTargetType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableHistMetering
    ///
    /// Tuning Level:  often_tune
    /// Description:   Flag to enable histogram luma target calculation.
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                        enableHistMetering;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableADRC
    ///
    /// Tuning Level:  often_tune
    /// Description:   Setting this flag enables ADRC.
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                        enableADRC;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableNonLinearTargetEstimate
    ///
    /// Tuning Level:  often_tune
    /// Description:   deprecated
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                        enableNonLinearTargetEstimate;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableDarkBoost
    ///
    /// Tuning Level:  often_tune
    /// Description:   Setting this flag enables boosting dark area with tone mapping. ADRC enable is pre-requisite.
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                        enableDarkBoost;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableAntiBandingPrioOverADRC
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Setting this flag makes sure antibanding range is not reduced with ADRC enabled.
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                        enableAntiBandingPrioOverADRC;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// antiBandingPrioTriggerRange
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The index range to gradually allow ADRC to regain full allowance when antibanding becomes unavailable due
    ///                to scene brightness.
    /// Type:          float
    /// Range:         [0,30]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                       antiBandingPrioTriggerRange;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// targetFilterFactor
    ///
    /// Tuning Level:  never_tune
    /// Description:   Luma target filter factor for this feature.
    /// Type:          float
    /// Range:         [0,0.99]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                       targetFilterFactor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// histLumaTargetZone - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                      histLumaTargetZoneCount;
    UINT32                      histLumaTargetZoneID;
    HistLumaTargetZoneType*     histLumaTargetZone;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableWBClipping
    ///
    /// Tuning Level:  never_tune
    /// Description:   When working with RGB HDR BHIST: this flag clips histogram values after applying WB gains
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                        enableWBClipping;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableBinGrouping
    ///
    /// Tuning Level:  never_tune
    /// Description:   Allow grouping of histogram bins to optimize calculations
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                        enableBinGrouping;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// EVHandling
    /// Default Value: Freeze
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::HistogramTargetEVMethodType EVHandling;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SensorHDRGainAdjust
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SensorHDRGainAdjustType     SensorHDRGainAdjust;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECLumaTargetType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// luxLumaTarget
    ///
    /// Description:   Luma target tuning structure, which is shared between normal and flash use case.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::LuxLumaTargetType      luxLumaTarget;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// histLumaTarget
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    HistLumaTargetType     histLumaTarget;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// extrmClrLumaTarget
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ExtrmClrLumaTargetType extrmClrLumaTarget;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// EVLumaTarget
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    EVLumaTargetType       EVLumaTarget;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// advancedTarget
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AdvancedTargetType     advancedTarget;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// RgnAdjZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct RgnAdjZoneDataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresBrightRgn
    ///
    /// Tuning Level:  often_tune
    /// Description:   Threshold pair to determine if a region is bright.
    /// Range:         [0,255]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType thresBrightRgn;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresDarkRgn
    ///
    /// Tuning Level:  often_tune
    /// Description:   Threshold pair to determine if a region is dark.
    /// Range:         [0,255]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType     thresDarkRgn;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// weightBrightRgnAdj
    ///
    /// Tuning Level:  often_tune
    /// Description:   Additional weight to be applied to a bright region.
    /// Type:          float
    /// Range:         [0, 2]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            weightBrightRgnAdj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// weightDarkRgnAdj
    ///
    /// Tuning Level:  often_tune
    /// Description:   Additional weight to be applied to a dark region.
    /// Type:          float
    /// Range:         [0,1.5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            weightDarkRgnAdj;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// RgnAdjZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct RgnAdjZoneType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType   zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    RgnAdjZoneDataType zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// RgnAdjType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct RgnAdjType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableBrightRgnAdj
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable adjustment of weights on bright stats region in luma calculation.
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL            enableBrightRgnAdj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableDarkRgnAdj
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable adjustment of weights on dark stats region in luma calculation.
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL            enableDarkRgnAdj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minTableWeightForBright
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Minimum metering table weight for bright region adjustment.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT           minTableWeightForBright;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxStatsPctForBright
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Maximum percentage of bright stats that can be weight adjusted.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT           maxStatsPctForBright;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minTableWeightForDark
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Minimum metering table weight for dark region adjustment.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT           minTableWeightForDark;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxStatsPctForDark
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Maximum percentage of dark stats that can be weight adjusted.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT           maxStatsPctForDark;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// rgnAdjZone - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32          rgnAdjZoneCount;
    UINT32          rgnAdjZoneID;
    RgnAdjZoneType* rgnAdjZone;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// MtrTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct MtrTableType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// centerWeighted
    ///
    /// Tuning Level:  often_tune
    /// Description:   Center weighted metering weight table.
    /// Type:          float
    /// Range:         [0,1]
    /// Length:        256
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct centerWeightedStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// weights - Array
        ///
        /// Tuning Level:  often_tune
        /// Length:        256
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT weights[256];
    } centerWeighted;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// spotWeighted
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Spot metering weight table.
    /// Type:          float
    /// Range:         [0,1]
    /// Length:        256
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct spotWeightedStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// weights - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Length:        256
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT weights[256];
    } spotWeighted;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LumaWeightType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LumaWeightType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// weight - Array
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   An array of 3 elements in the sequence of R,G,B weights for luma computation.
    /// Type:          float
    /// Range:         [0, 1]
    /// Length:        3
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT weight[3];

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableColorAndSensorComp
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable usage of AWB gain to compensate module and illumination difference.
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL  enableColorAndSensorComp;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// refGain - Array
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Reference AWB gain used to adjust luma computation weights.
    /// Type:          float
    /// Range:         [0, 3]
    /// Length:        3
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT refGain[3];
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// IndexCalcType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct IndexCalcType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableLuxIndexComp
    ///
    /// Tuning Level:  often_tune
    /// Description:   The flag enables lux index normalization across different sensor modes and headers.
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                    enableLuxIndexComp;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// refSensitivityForExpIndexZero
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The reference sensitivity value which is used to compare with the current table sensitivity at index 0.
    /// Type:          float
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                   refSensitivityForExpIndexZero;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// luxIndexFilterFactor
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Temporal filter factor for lux index to stabilize its value.
    /// Type:          float
    /// Range:         [0,0.99]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                   luxIndexFilterFactor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bayerGridSubsmplSelect
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::AECBayerGridSubsmplType bayerGridSubsmplSelect;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECLumaCalcType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECLumaCalcType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// indexCalc
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    IndexCalcType  indexCalc;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lumaWeight
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    LumaWeightType lumaWeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mtrTables
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MtrTableType   mtrTables;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lumaRgnAdj
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    RgnAdjType     lumaRgnAdj;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECCoreMeteringType
/// Comments:       Core Metering Tuning Definition
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECCoreMeteringType
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mtrLumaCalc
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECLumaCalcType   mtrLumaCalc;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mtrLumaTarget
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECLumaTargetType mtrLumaTarget;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECCoreMeteringTypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class AECCoreMeteringTypeClass : public ParameterModule, public AECCoreMeteringType
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 8;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECCoreMeteringTypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECCoreMeteringTypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~AECCoreMeteringTypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load NonLinearEstimateType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadNonLinearEstimateType(
        ParameterFileSymbolTableEntry* entry,
        NonLinearEstimateType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AdvHistTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAdvHistTargetType(
        ParameterFileSymbolTableEntry* entry,
        AdvHistTargetType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SuppressNonLinearZoneDataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSuppressNonLinearZoneDataType(
        ParameterFileSymbolTableEntry* entry,
        SuppressNonLinearZoneDataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SuppressNonLinearZoneType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSuppressNonLinearZoneType(
        ParameterFileSymbolTableEntry* entry,
        SuppressNonLinearZoneType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SuppressNonLinearType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSuppressNonLinearType(
        ParameterFileSymbolTableEntry* entry,
        SuppressNonLinearType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AdvLuxTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAdvLuxTargetType(
        ParameterFileSymbolTableEntry* entry,
        AdvLuxTargetType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AdvancedTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAdvancedTargetType(
        ParameterFileSymbolTableEntry* entry,
        AdvancedTargetType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load DynamicEVLockType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadDynamicEVLockType(
        ParameterFileSymbolTableEntry* entry,
        DynamicEVLockType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load EVLumaTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadEVLumaTargetType(
        ParameterFileSymbolTableEntry* entry,
        EVLumaTargetType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load EVLumaTargetType_EVCompTableStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadEVLumaTargetType_EVCompTableStruct(
        ParameterFileSymbolTableEntry* entry,
        EVLumaTargetType::EVCompTableStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load ExtrmClrLumaTargetZoneDataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadExtrmClrLumaTargetZoneDataType(
        ParameterFileSymbolTableEntry* entry,
        ExtrmClrLumaTargetZoneDataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load ExtrmClrLumaTargetZoneType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadExtrmClrLumaTargetZoneType(
        ParameterFileSymbolTableEntry* entry,
        ExtrmClrLumaTargetZoneType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load ExtrmClrThresRangeType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadExtrmClrThresRangeType(
        ParameterFileSymbolTableEntry* entry,
        ExtrmClrThresRangeType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load ExtrmClrLumaTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadExtrmClrLumaTargetType(
        ParameterFileSymbolTableEntry* entry,
        ExtrmClrLumaTargetType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load ADRCGainAdjustZoneDataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadADRCGainAdjustZoneDataType(
        ParameterFileSymbolTableEntry* entry,
        ADRCGainAdjustZoneDataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load ADRCGainAdjustZoneType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadADRCGainAdjustZoneType(
        ParameterFileSymbolTableEntry* entry,
        ADRCGainAdjustZoneType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SensorHDRGainAdjustType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSensorHDRGainAdjustType(
        ParameterFileSymbolTableEntry* entry,
        SensorHDRGainAdjustType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load HistLumaTargetZoneDataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadHistLumaTargetZoneDataType(
        ParameterFileSymbolTableEntry* entry,
        HistLumaTargetZoneDataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load HistLumaTargetZoneType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadHistLumaTargetZoneType(
        ParameterFileSymbolTableEntry* entry,
        HistLumaTargetZoneType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load HistLumaTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadHistLumaTargetType(
        ParameterFileSymbolTableEntry* entry,
        HistLumaTargetType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECLumaTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECLumaTargetType(
        ParameterFileSymbolTableEntry* entry,
        AECLumaTargetType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load RgnAdjZoneDataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadRgnAdjZoneDataType(
        ParameterFileSymbolTableEntry* entry,
        RgnAdjZoneDataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load RgnAdjZoneType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadRgnAdjZoneType(
        ParameterFileSymbolTableEntry* entry,
        RgnAdjZoneType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load RgnAdjType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadRgnAdjType(
        ParameterFileSymbolTableEntry* entry,
        RgnAdjType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load MtrTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadMtrTableType(
        ParameterFileSymbolTableEntry* entry,
        MtrTableType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load MtrTableType_centerWeightedStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadMtrTableType_centerWeightedStruct(
        ParameterFileSymbolTableEntry* entry,
        MtrTableType::centerWeightedStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load MtrTableType_spotWeightedStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadMtrTableType_spotWeightedStruct(
        ParameterFileSymbolTableEntry* entry,
        MtrTableType::spotWeightedStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LumaWeightType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLumaWeightType(
        ParameterFileSymbolTableEntry* entry,
        LumaWeightType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load IndexCalcType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadIndexCalcType(
        ParameterFileSymbolTableEntry* entry,
        IndexCalcType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECLumaCalcType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECLumaCalcType(
        ParameterFileSymbolTableEntry* entry,
        AECLumaCalcType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECCoreMeteringType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECCoreMeteringType(
        ParameterFileSymbolTableEntry* entry,
        AECCoreMeteringType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECCoreMeteringType::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECCoreMeteringType::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload SuppressNonLinearType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadSuppressNonLinearType(
        SuppressNonLinearType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AdvLuxTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAdvLuxTargetType(
        AdvLuxTargetType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AdvancedTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAdvancedTargetType(
        AdvancedTargetType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload ExtrmClrLumaTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadExtrmClrLumaTargetType(
        ExtrmClrLumaTargetType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload SensorHDRGainAdjustType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadSensorHDRGainAdjustType(
        SensorHDRGainAdjustType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload HistLumaTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadHistLumaTargetType(
        HistLumaTargetType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECLumaTargetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECLumaTargetType(
        AECLumaTargetType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload RgnAdjType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadRgnAdjType(
        RgnAdjType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECLumaCalcType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECLumaCalcType(
        AECLumaCalcType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECCoreMeteringType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECCoreMeteringType(
        AECCoreMeteringType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        AECCoreMeteringType::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class AECCoreMeteringTypeClass

AECMETERING_NAMESPACE_END
#endif // AECMETERING_H

