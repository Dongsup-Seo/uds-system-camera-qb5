////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afdciafelements.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "afdciafelements.h"
#include "parametersetmanager.h"

AFDCIAFELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixDCIAFTypeClass::chromatixDCIAFTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(monitorEnable);
    PARAMETER_INITIALIZE(monitorFrequency);
    PARAMETER_INITIALIZE(searchFrequency);
    PARAMETER_INITIALIZE(baselineMM);
    PARAMETER_INITIALIZE(auxDirection);
    PARAMETER_INITIALIZE(macroEstimateLimitCM);
    PARAMETER_INITIALIZE(alignmentCheckEnable);
    PARAMETER_INITIALIZE(jumpToStartLimit);
    PARAMETER_INITIALIZE(numNearSteps);
    PARAMETER_INITIALIZE(numFarSteps);
    PARAMETER_INITIALIZE(dciafStepSize);
    PARAMETER_INITIALIZE(motionDataUseEnable);
    PARAMETER_INITIALIZE(sceneChangeLensPositionThreshold);
    PARAMETER_INITIALIZE(panningStableLensPositionThreshold);
    PARAMETER_INITIALIZE(panningStableDurationMSBright);
    PARAMETER_INITIALIZE(panningStableDurationMSLow);
    PARAMETER_INITIALIZE(maxLowLightWaitMs);
    PARAMETER_INITIALIZE(maxNormalLightWaitMs);
    PARAMETER_INITIALIZE(jumpWithNoSkip);
    PARAMETER_INITIALIZE(skipframesBeforeFineSearch);
    PARAMETER_INITIALIZE(distanceThresholdMacroRegionInMM);
    PARAMETER_INITIALIZE(distanceThresholdNonMacroFactor);
    PARAMETER_INITIALIZE(lowLightThreshold);
    PARAMETER_INITIALIZE(useFineSearchExtension);
    PARAMETER_INITIALIZE(macroRegionThresholdInMM);
    PARAMETER_INITIALIZE(farRegionThresholdInMM);
    PARAMETER_INITIALIZE(normalLightFineSearchInfoCount);
    PARAMETER_INITIALIZE(normalLightFineSearchInfoID);
    PARAMETER_INITIALIZE(normalLightFineSearchInfo);
    PARAMETER_INITIALIZE(lowLightFineSearchInfoCount);
    PARAMETER_INITIALIZE(lowLightFineSearchInfoID);
    PARAMETER_INITIALIZE(lowLightFineSearchInfo);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixDCIAFTypeClass::chromatixDCIAFTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(monitorEnable);
    PARAMETER_INITIALIZE(monitorFrequency);
    PARAMETER_INITIALIZE(searchFrequency);
    PARAMETER_INITIALIZE(baselineMM);
    PARAMETER_INITIALIZE(auxDirection);
    PARAMETER_INITIALIZE(macroEstimateLimitCM);
    PARAMETER_INITIALIZE(alignmentCheckEnable);
    PARAMETER_INITIALIZE(jumpToStartLimit);
    PARAMETER_INITIALIZE(numNearSteps);
    PARAMETER_INITIALIZE(numFarSteps);
    PARAMETER_INITIALIZE(dciafStepSize);
    PARAMETER_INITIALIZE(motionDataUseEnable);
    PARAMETER_INITIALIZE(sceneChangeLensPositionThreshold);
    PARAMETER_INITIALIZE(panningStableLensPositionThreshold);
    PARAMETER_INITIALIZE(panningStableDurationMSBright);
    PARAMETER_INITIALIZE(panningStableDurationMSLow);
    PARAMETER_INITIALIZE(maxLowLightWaitMs);
    PARAMETER_INITIALIZE(maxNormalLightWaitMs);
    PARAMETER_INITIALIZE(jumpWithNoSkip);
    PARAMETER_INITIALIZE(skipframesBeforeFineSearch);
    PARAMETER_INITIALIZE(distanceThresholdMacroRegionInMM);
    PARAMETER_INITIALIZE(distanceThresholdNonMacroFactor);
    PARAMETER_INITIALIZE(lowLightThreshold);
    PARAMETER_INITIALIZE(useFineSearchExtension);
    PARAMETER_INITIALIZE(macroRegionThresholdInMM);
    PARAMETER_INITIALIZE(farRegionThresholdInMM);
    PARAMETER_INITIALIZE(normalLightFineSearchInfo);
    PARAMETER_INITIALIZE(lowLightFineSearchInfo);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixDCIAFTypeClass::~chromatixDCIAFTypeClass()
{
    UnloadchromatixDCIAFType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixDCIAFTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "chromatixDCIAF")) == 0)
    {
        name = "chromatixDCIAF";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFDCIAFFineSearchStepInfoType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDCIAFTypeClass::LoadchromatixAFDCIAFFineSearchStepInfoType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFDCIAFFineSearchStepInfoType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->stepSize, alignment);
    result = result && entry->Read(&structure->farSteps, alignment);
    result = result && entry->Read(&structure->nearSteps, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixDCIAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDCIAFTypeClass::LoadchromatixDCIAFType(
    ParameterFileSymbolTableEntry* entry,
    chromatixDCIAFType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && entry->Read(&structure->monitorEnable, alignment);
    result = result && entry->Read(&structure->monitorFrequency, alignment);
    result = result && entry->Read(&structure->searchFrequency, alignment);
    result = result && entry->Read(&structure->baselineMM, alignment);
    structure->auxDirection = (chromatixAFCameraOrientationType)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->macroEstimateLimitCM, alignment);
    result = result && entry->Read(&structure->alignmentCheckEnable, alignment);
    result = result && entry->Read(&structure->jumpToStartLimit, alignment);
    result = result && entry->Read(&structure->numNearSteps, alignment);
    result = result && entry->Read(&structure->numFarSteps, alignment);
    result = result && entry->Read(&structure->dciafStepSize, alignment);
    result = result && entry->Read(&structure->motionDataUseEnable, alignment);
    result = result && entry->Read(&structure->sceneChangeLensPositionThreshold, alignment);
    result = result && entry->Read(&structure->panningStableLensPositionThreshold, alignment);
    result = result && entry->Read(&structure->panningStableDurationMSBright, alignment);
    result = result && entry->Read(&structure->panningStableDurationMSLow, alignment);
    result = result && entry->Read(&structure->maxLowLightWaitMs, alignment);
    result = result && entry->Read(&structure->maxNormalLightWaitMs, alignment);
    result = result && entry->Read(&structure->jumpWithNoSkip, alignment);
    result = result && entry->Read(&structure->skipframesBeforeFineSearch, alignment);
    result = result && entry->Read(&structure->distanceThresholdMacroRegionInMM, alignment);
    result = result && entry->Read(&structure->distanceThresholdNonMacroFactor, alignment);
    result = result && entry->Read(&structure->lowLightThreshold, alignment);
    result = result && entry->Read(&structure->useFineSearchExtension, alignment);
    result = result && entry->Read(&structure->macroRegionThresholdInMM, alignment);
    result = result && entry->Read(&structure->farRegionThresholdInMM, alignment);

    // Reading Array normalLightFineSearchInfo from symbol table
    {
        result = result && entry->Read(&structure->normalLightFineSearchInfoCount, alignment);
        structure->normalLightFineSearchInfoID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->normalLightFineSearchInfo = PARAMETER_NEW chromatixAFDCIAFFineSearchStepInfoType[structure->normalLightFineSearchInfoCount];
        }
        if (!result || structure->normalLightFineSearchInfo == NULL)
        {
            structure->normalLightFineSearchInfoCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->normalLightFineSearchInfoCount; i++)
        {
            result = LoadchromatixAFDCIAFFineSearchStepInfoType(pointerEntry, &structure->normalLightFineSearchInfo[i], alignment);
        }
    }

    // Reading Array lowLightFineSearchInfo from symbol table
    {
        result = result && entry->Read(&structure->lowLightFineSearchInfoCount, alignment);
        structure->lowLightFineSearchInfoID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->lowLightFineSearchInfo = PARAMETER_NEW chromatixAFDCIAFFineSearchStepInfoType[structure->lowLightFineSearchInfoCount];
        }
        if (!result || structure->lowLightFineSearchInfo == NULL)
        {
            structure->lowLightFineSearchInfoCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->lowLightFineSearchInfoCount; i++)
        {
            result = LoadchromatixAFDCIAFFineSearchStepInfoType(pointerEntry, &structure->lowLightFineSearchInfo[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDCIAFTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixDCIAFType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixDCIAFTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixDCIAFType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixDCIAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixDCIAFTypeClass::UnloadchromatixDCIAFType(
    chromatixDCIAFType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    PARAMETER_DELETE[] structure->normalLightFineSearchInfo;
    PARAMETER_DELETE[] structure->lowLightFineSearchInfo;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixDCIAFTypeClass::Unloadparameter_versionStruct(
    chromatixDCIAFType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixDCIAFTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixDCIAFTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixDCIAFTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixDCIAFType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AFDCIAFELEMENTS_NAMESPACE_END
