////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afmonitorelements.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AFMONITORELEMENTS_H
#define AFMONITORELEMENTS_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "afglobalelements.h"
#include "statsglobalelements.h"

#define AFMONITORELEMENTS_NAMESPACE_BEGIN namespace afmonitorelements {
#define AFMONITORELEMENTS_NAMESPACE_END }

AFMONITORELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixIirFltrCfgType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixIirFltrCfgType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   Flag to enable IIR filter or not.
    /// Type:          int
    /// Range:         [0, 1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// numOfSamples
    ///
    /// Description:   Length of the IIR filter
    /// Type:          int
    /// Range:         [2,2]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 numOfSamples;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// coeffNumerator
    ///
    /// Description:   IIR filter coefficient in numerator. An first order IIR filter is designed, the coefficients in numerator
    ///                and denominator are typically required. This parameter defines the coefficient in the numerator.
    /// Type:          float
    /// Range:         [unbounded,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT coeffNumerator;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// coeffDenominator
    ///
    /// Description:   IIR filter coefficient in denominator. An first order IIR filter is designed, the coefficients in
    ///                numerator and denominator are typically required. This parameter defines the coefficient in the
    ///                denominator.
    /// Type:          float
    /// Range:         [unbounded,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT coeffDenominator;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixMvavgFltrCfgType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixMvavgFltrCfgType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   Flag to enable moving average filter or not.
    /// Type:          int
    /// Range:         [0, 1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// numOfSamples
    ///
    /// Description:   Length of the moving average filter.
    /// Type:          int
    /// Range:         [0, 10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 numOfSamples;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixMedianFltrCfgType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixMedianFltrCfgType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   Flag to enable median filter or not.
    /// Type:          int
    /// Range:         [0, 1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// numOfSamples
    ///
    /// Description:   Length of the median filter.
    /// Type:          int
    /// Range:         [0, 10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 numOfSamples;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixSensProfileType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixSensProfileType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// triggerThreshold
    ///
    /// Description:   Threshold for the value monitor detection. The threshold is defined as the absolute difference between
    ///                metafilter output and reference baseline.
    /// Type:          float
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                      triggerThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// consecutiveCountThreshold
    ///
    /// Description:    DEPRECATED. Instead use highCountThreshold/lowCountThreshold based on VMInitSTATE. e residue is
    ///                constantly above/below the trigger_threshold. While VM_DETECTOR_UNSTABLE is chosen, the counting
    ///                threshold means the number of counts that residual(absolute difference between signal and baseline) is
    ///                above the threshold. While VM_DETECTOR_STABLE is chosen, the counting threshold means the number of
    ///                counts that residual (absolute difference between signal and baseline) is below the threshold.
    /// Type:          int
    /// Default Value: -1
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                      consecutiveCountThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// frameToArmed
    ///
    /// Description:   Number of frames for starting the scene change detection.
    /// Type:          int
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                      frameToArmed;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// highCountThreshold
    ///
    /// Description:   Counting threshold for the residue is constantly above the trigger_threshold.-1 means disabled. If
    ///                VMInitState is VMSTATEHIGH, tuning this can hold the previous decision
    /// Type:          int
    /// Default Value: -1
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                      highCountThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lowCountThreshold
    ///
    /// Description:   Counting threshold for the residue is constantly below the trigger_threshold.-1 means disabled. If
    ///                VMInitState is VMSTATELOW, tuning this can hold the previous decision
    /// Type:          int
    /// Default Value: -1
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                      lowCountThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// medianFltrCfg
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixMedianFltrCfgType medianFltrCfg;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mvavgFltrCfg
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixMvavgFltrCfgType  mvavgFltrCfg;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// IIRFltrCfg
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixIirFltrCfgType    IIRFltrCfg;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAbsoluteModeCfgType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixAbsoluteModeCfgType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   While absolute mode is enabled, i.e., enable=1, value monitor will use the the baseline value as a
    ///                reference baseline. While absolute is disabled, i.e., enable=0, value monitor will adaptively update
    ///                reference baseline according to the metafilter output (referring to frame2armed)
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// baseline
    ///
    /// Description:   This parameter is utilized as absolute mode is enabled. While absolute mode is enabled, value monitor
    ///                will use this parameter as reference baseline.
    /// Type:          float
    /// Range:         [unbounded,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT baseline;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixVMStateEnum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixVMStateEnum
{
    VMSTATEINVALID = 0,
    VMSTATELOW     = 1,
    VMSTATEHIGH    = 2
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixDetectorTypeEnum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixDetectorTypeEnum
{
    VMDetectorInvalid  = 0,
    VMDetectorStable   = 1,
    VMDetectorUnstable = 2
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixVMSetTypeEnum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixVMSetTypeEnum
{
    VmSetTypeSADR                  = 0,
    VmSetTypeSADPanning            = 1,
    VmSetTypeGyro                  = 2,
    VmSetTypeGyroPanning           = 3,
    VmSetTypeDefocusLow            = 4,
    VmSetTypeDefocusHigh           = 5,
    VmSetTypeTOFConfidenceHigh     = 6,
    VmSetTypePDAFConfidence        = 7,
    VmSetTypeDistance              = 8,
    VmSetTypeFV                    = 9,
    VmSetTypeTOFConfidenceMedium   = 10,
    VmSetTypeFaceTriggerHold       = 11,
    VmSetTypeCAFSceneChangeHold    = 12,
    VmSetTypeDepthAFDefocusPanning = 13,
    VmSetTypeDepthAFCustom1        = 14,
    VmSetTypeDepthAFCustom2        = 15,
    VmSetTypeDepthAFCustom3        = 16,
    VmSetTypeDepthAFCustom4        = 17,
    VmSetTypeDepthAFCustom5        = 18,
    VmSetTypeDepthAFCustom6        = 19,
    VmSetTypeDepthAFCustom7        = 20,
    VmSetTypeDepthAFCustom8        = 21,
    VmSetTypeDepthAFCustom9        = 22,
    VmSetTypeDepthAFCustom10       = 23,
    VmSetTypeMax                   = 24
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixValueMonitorType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixValueMonitorType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// VMSetType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixVMSetTypeEnum       VMSetType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// detectionType
    ///
    /// Description:   DEPRECATED. Instead use VMInitState to control stable/unstable mode
    /// Type:          chromatixDetectorTypeEnum
    /// Default Value: VMDetectorInvalid
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixDetectorTypeEnum    detectionType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// VMInitState
    ///
    /// Description:   Initial State of value monitor.Set it to VMSTATELOW/VMSTATEHIGH to get previous unstable/stable detector
    /// Type:          chromatixVMStateEnum
    /// Default Value: VMSTATEINVALID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixVMStateEnum         VMInitState;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// absoluteModeCfg
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAbsoluteModeCfgType absoluteModeCfg;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensProfileLow
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixSensProfileType     sensProfileLow;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensProfileMed
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixSensProfileType     sensProfileMed;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensProfileHigh
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixSensProfileType     sensProfileHigh;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixValueMonitorBankType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixValueMonitorBankType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// valueMonitor - Array
    /// Min Length:    1
    /// Max Length:    36
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                     valueMonitorCount;
    UINT32                     valueMonitorID;
    chromatixValueMonitorType* valueMonitor;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// sensitivityTrigger
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct sensitivityTrigger
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// AECTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::trigger_pt_type_aec AECTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// value
    ///
    /// Description:   sensitivity value to determine the value monitor settings
    /// Type:          int
    /// Default Value: 50
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               value;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// sensitivitySetting
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct sensitivitySetting
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// VMType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixVMSetTypeEnum VMType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// value
    ///
    /// Description:   sensitivity value to determine the value monitor settings
    /// Type:          int
    /// Default Value: 50
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                  value;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensitivityTriggerSet - Array
    /// Min Length:    0
    /// Max Length:    3
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                 sensitivityTriggerSetCount;
    UINT32                 sensitivityTriggerSetID;
    sensitivityTrigger*    sensitivityTriggerSet;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTopoDepthAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTopoDepthAFType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusLow
    ///
    /// Description:   Defocus low for defocus value monitor
    /// Type:          int
    /// Default Value: 50
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               defocusLow;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusHigh
    ///
    /// Description:   Sensitivity for DepthAF defocus high value monitor
    /// Type:          int
    /// Default Value: 50
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               defocusHigh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusPanning
    ///
    /// Description:   Sensitivity for depthaf defocus panning value monitor
    /// Type:          int
    /// Default Value: 50
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               defocusPanning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sadPanning
    ///
    /// Description:   sensitivity for Depth AF SAD Panning value monitor
    /// Type:          int
    /// Default Value: 50
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               sadPanning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gyroPanning
    ///
    /// Description:   sensitivity for Depth AF gyro Panning value monitor
    /// Type:          int
    /// Default Value: 50
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               gyroPanning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DepthAFTopoReservedSensitivity - Array
    ///
    /// Description:   Reserved sensitivity value for DepthAF topo
    /// Type:          int
    /// Default Value: 0
    /// Range:         [0, 100]
    /// Min Length:    1
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32              DepthAFTopoReservedSensitivityCount;
    UINT32              DepthAFTopoReservedSensitivityID;
    INT32*              DepthAFTopoReservedSensitivity;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensitivityTriggerArr - Array
    /// Min Length:    0
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32              sensitivityTriggerArrCount;
    UINT32              sensitivityTriggerArrID;
    sensitivitySetting* sensitivityTriggerArr;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTopoDefaultMixerType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTopoDefaultMixerType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// secondarySceneChangeCntThres
    ///
    /// Description:   Value for the CAF scene change count threshold.
    /// Type:          int
    /// Range:         [0,10000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               secondarySceneChangeCntThres;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// secondaryUnstableCntThres
    ///
    /// Description:   Value for the CAF unstable count threshold.
    /// Type:          int
    /// Range:         [0,10000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               secondaryUnstableCntThres;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gyroEnable
    ///
    /// Description:   Flag to enable gyro or not.
    /// Range:         [0, 1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type    gyroEnable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensitivityTriggerArr - Array
    /// Min Length:    0
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32              sensitivityTriggerArrCount;
    UINT32              sensitivityTriggerArrID;
    sensitivitySetting* sensitivityTriggerArr;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTopoDCIAFEnum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixTopoDCIAFEnum
{
    DCIAFTopoProfileSimple   = 0,
    DCIAFTopoProfileAdvanced = 1,
    DCIAFTopoProfileMax      = 2
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTopoDCIAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTopoDCIAFType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// profileIndex
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTopoDCIAFEnum profileIndex;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// distance
    ///
    /// Description:   Sensitivity value for DCIAF distance value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                  distance;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// confidence
    ///
    /// Description:   Sensitivity value for DCIAF confidence value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                  confidence;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SADR
    ///
    /// Description:   Sensitivity value for SADR value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                  SADR;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gyro
    ///
    /// Description:   Sensitivity value for gyro value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                  gyro;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SADPanning
    ///
    /// Description:   Sensitivity value for SAD panning value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                  SADPanning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gyroPanning
    ///
    /// Description:   Sensitivity value for gyro panning value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                  gyroPanning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DCIAFTopoReservedSensitivity - Array
    ///
    /// Description:   Reserved sensitivity value for DCIAF topo
    /// Type:          int
    /// Default Value: 0
    /// Range:         [0, 100]
    /// Min Length:    1
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                 DCIAFTopoReservedSensitivityCount;
    UINT32                 DCIAFTopoReservedSensitivityID;
    INT32*                 DCIAFTopoReservedSensitivity;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensitivityTriggerArr - Array
    /// Min Length:    0
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                 sensitivityTriggerArrCount;
    UINT32                 sensitivityTriggerArrID;
    sensitivitySetting*    sensitivityTriggerArr;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTopoTOFEnum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixTopoTOFEnum
{
    TOFTopoProfileSimple   = 0,
    TOFTopoProfileAdvanced = 1,
    TOFTopoProfileMax      = 2
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTopoTOFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTopoTOFType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// profileIndex
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTopoTOFEnum profileIndex;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// distance
    ///
    /// Description:   Sensitivity value for distance value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                distance;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOFconfidenceHigh
    ///
    /// Description:   Sensitivity value for TOFconfidenceHigh value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                TOFconfidenceHigh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOFconfidenceMedium
    ///
    /// Description:   Sensitivity value for TOFconfidenceMedium value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                TOFconfidenceMedium;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SADPanning
    ///
    /// Description:   Sensitivity value for SAD panning value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                SADPanning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gyroPanning
    ///
    /// Description:   Sensitivity value for gyro panning value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                gyroPanning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOFTopoReservedSensitivity - Array
    ///
    /// Description:   Reserved sensitivity value for TOF topo
    /// Type:          int
    /// Default Value: 0
    /// Range:         [0, 100]
    /// Min Length:    1
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32               TOFTopoReservedSensitivityCount;
    UINT32               TOFTopoReservedSensitivityID;
    INT32*               TOFTopoReservedSensitivity;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensitivityTriggerArr - Array
    /// Min Length:    0
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32               sensitivityTriggerArrCount;
    UINT32               sensitivityTriggerArrID;
    sensitivitySetting*  sensitivityTriggerArr;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTopoPDAFEnum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixTopoPDAFEnum
{
    PDAFTopoProfileSparse         = 0,
    PDAFTopoProfile2PD            = 1,
    PDAFTopoProfileSparseAdvanced = 2,
    PDAFTopoProfile2PDAdvanced    = 3,
    PDAFTopoProfileAdvanced       = 4,
    PDAFTOPOProfileMAX            = 5
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTopoPDAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTopoPDAFType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// profileIndex
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTopoPDAFEnum profileIndex;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusLow
    ///
    /// Description:   Sensitivity value for defocusLow value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                 defocusLow;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusHigh
    ///
    /// Description:   Sensitivity value for defocusHigh value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                 defocusHigh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDAFconfidence
    ///
    /// Description:   Sensitivity value for PDAFconfidence value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                 PDAFconfidence;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SADPanning
    ///
    /// Description:   Sensitivity value for SAD panning value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                 SADPanning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gyroPanning
    ///
    /// Description:   Sensitivity value for gyro panning value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                 gyroPanning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDAFTopoReservedSensitivity - Array
    ///
    /// Description:   Reserved sensitivity value for PDAF topo
    /// Type:          int
    /// Default Value: 0
    /// Range:         [0, 100]
    /// Min Length:    1
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                PDAFTopoReservedSensitivityCount;
    UINT32                PDAFTopoReservedSensitivityID;
    INT32*                PDAFTopoReservedSensitivity;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensitivityTriggerArr - Array
    /// Min Length:    0
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                sensitivityTriggerArrCount;
    UINT32                sensitivityTriggerArrID;
    sensitivitySetting*   sensitivityTriggerArr;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTopoCAFEnum
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixTopoCAFEnum
{
    CAFTopoProfileSimple   = 0,
    CAFTopoProfileAdvanced = 1,
    CAFTopoProfileMax      = 2
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTopoCAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTopoCAFType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// profileIndex
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTopoCAFEnum profileIndex;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SADR
    ///
    /// Description:   Sensitivity value for SADR value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                SADR;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gyro
    ///
    /// Description:   Sensitivity value for gyro value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                gyro;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gyroPanning
    ///
    /// Description:   Sensitivity value for gyroPanning value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                gyroPanning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SADPanning
    ///
    /// Description:   Sensitivity value for SADPanning value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                SADPanning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FV
    ///
    /// Description:   Sensitivity value for FV value monitor.
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                FV;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceTriggerHold
    ///
    /// Description:   Sensitivity value for faceTriggerHold value monitor
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                faceTriggerHold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CAFSceneChangeHold
    ///
    /// Description:   Sensitivity value for CAFSceneChangeHold value monitor
    /// Type:          int
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                CAFSceneChangeHold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CAFTopoReservedSensitivity - Array
    ///
    /// Description:   Reserved sensitivity value for CAF topo
    /// Type:          int
    /// Default Value: 0
    /// Range:         [0, 100]
    /// Min Length:    1
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32               CAFTopoReservedSensitivityCount;
    UINT32               CAFTopoReservedSensitivityID;
    INT32*               CAFTopoReservedSensitivity;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensitivityTriggerArr - Array
    /// Min Length:    0
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32               sensitivityTriggerArrCount;
    UINT32               sensitivityTriggerArrID;
    sensitivitySetting*  sensitivityTriggerArr;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixMonitorAlgoConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixMonitorAlgoConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// topoCAF
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTopoCAFType          topoCAF;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// topoPDAF
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTopoPDAFType         topoPDAF;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// topoTOF
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTopoTOFType          topoTOF;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// topoDCIAF
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTopoDCIAFType        topoDCIAF;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// topoDefaultMixer
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTopoDefaultMixerType topoDefaultMixer;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// topoDepthAF
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTopoDepthAFType      topoDepthAF;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFMONITORType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixAFMONITORType
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// monitorAlgoConfig
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixMonitorAlgoConfigType monitorAlgoConfig;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// valueMonitorBank
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixValueMonitorBankType  valueMonitorBank;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFMONITORTypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatixAFMONITORTypeClass : public ParameterModule, public chromatixAFMONITORType
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 9;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAFMONITORTypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAFMONITORTypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatixAFMONITORTypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixIirFltrCfgType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixIirFltrCfgType(
        ParameterFileSymbolTableEntry* entry,
        chromatixIirFltrCfgType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixMvavgFltrCfgType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixMvavgFltrCfgType(
        ParameterFileSymbolTableEntry* entry,
        chromatixMvavgFltrCfgType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixMedianFltrCfgType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixMedianFltrCfgType(
        ParameterFileSymbolTableEntry* entry,
        chromatixMedianFltrCfgType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixSensProfileType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixSensProfileType(
        ParameterFileSymbolTableEntry* entry,
        chromatixSensProfileType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAbsoluteModeCfgType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAbsoluteModeCfgType(
        ParameterFileSymbolTableEntry* entry,
        chromatixAbsoluteModeCfgType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixValueMonitorType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixValueMonitorType(
        ParameterFileSymbolTableEntry* entry,
        chromatixValueMonitorType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixValueMonitorBankType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixValueMonitorBankType(
        ParameterFileSymbolTableEntry* entry,
        chromatixValueMonitorBankType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load sensitivityTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadsensitivityTrigger(
        ParameterFileSymbolTableEntry* entry,
        sensitivityTrigger* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load sensitivitySetting
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadsensitivitySetting(
        ParameterFileSymbolTableEntry* entry,
        sensitivitySetting* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTopoDepthAFType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTopoDepthAFType(
        ParameterFileSymbolTableEntry* entry,
        chromatixTopoDepthAFType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTopoDefaultMixerType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTopoDefaultMixerType(
        ParameterFileSymbolTableEntry* entry,
        chromatixTopoDefaultMixerType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTopoDCIAFType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTopoDCIAFType(
        ParameterFileSymbolTableEntry* entry,
        chromatixTopoDCIAFType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTopoTOFType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTopoTOFType(
        ParameterFileSymbolTableEntry* entry,
        chromatixTopoTOFType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTopoPDAFType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTopoPDAFType(
        ParameterFileSymbolTableEntry* entry,
        chromatixTopoPDAFType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTopoCAFType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTopoCAFType(
        ParameterFileSymbolTableEntry* entry,
        chromatixTopoCAFType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixMonitorAlgoConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixMonitorAlgoConfigType(
        ParameterFileSymbolTableEntry* entry,
        chromatixMonitorAlgoConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFMONITORType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFMONITORType(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFMONITORType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFMONITORType::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFMONITORType::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixValueMonitorBankType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixValueMonitorBankType(
        chromatixValueMonitorBankType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload sensitivitySetting
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadsensitivitySetting(
        sensitivitySetting* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixTopoDepthAFType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixTopoDepthAFType(
        chromatixTopoDepthAFType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixTopoDefaultMixerType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixTopoDefaultMixerType(
        chromatixTopoDefaultMixerType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixTopoDCIAFType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixTopoDCIAFType(
        chromatixTopoDCIAFType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixTopoTOFType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixTopoTOFType(
        chromatixTopoTOFType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixTopoPDAFType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixTopoPDAFType(
        chromatixTopoPDAFType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixTopoCAFType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixTopoCAFType(
        chromatixTopoCAFType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixMonitorAlgoConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixMonitorAlgoConfigType(
        chromatixMonitorAlgoConfigType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixAFMONITORType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixAFMONITORType(
        chromatixAFMONITORType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatixAFMONITORType::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatixAFMONITORTypeClass

AFMONITORELEMENTS_NAMESPACE_END
#endif // AFMONITORELEMENTS_H

