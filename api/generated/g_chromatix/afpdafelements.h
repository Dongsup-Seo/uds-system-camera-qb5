////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afpdafelements.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AFPDAFELEMENTS_H
#define AFPDAFELEMENTS_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "afglobalelements.h"
#include "statsroidifference.h"

#define AFPDAFELEMENTS_NAMESPACE_BEGIN namespace afpdafelements {
#define AFPDAFELEMENTS_NAMESPACE_END }

AFPDAFELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDFocusTableEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDFocusTableEntryType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocus
    ///
    /// Description:   Defocus in logical lens position unit
    /// Type:          int
    /// Range:         [0,500]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 defocus;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// movePercent
    ///
    /// Description:   Percentage lens movement to target lens position
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT movePercent;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDFocusTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDFocusTableType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// focusEntries - Array
    /// Min Length:    1
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          focusEntriesCount;
    UINT32                          focusEntriesID;
    chromatixPDFocusTableEntryType* focusEntries;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAdvancedSparsePDControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixAdvancedSparsePDControlType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableForSparsePD
    ///
    /// Description:   Flag to control if apply Advanced Sparse PD search algorithm for normal sparse PD (not advanced sparse
    ///                PD) input, if this flag is enabled, will use high confidence table as threshold to control when feature
    ///                kickin
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                      enableForSparsePD;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skipFineScan
    ///
    /// Description:   Skip contrast-based fine scan following PDAF focus convergence
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type          skipFineScan;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// focusDoneThreshold
    ///
    /// Description:   Minimum absolute defocus value below which focus converge is deemed to be done
    /// Type:          int
    /// Range:         [0,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                     focusDoneThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// focusTable
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDFocusTableType focusTable;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDForceEnterFineSearchType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDForceEnterFineSearchType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   Force enabling or disabling of contrast-based fine scan
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL   enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// directionReverseCountThreshold
    ///
    /// Description:   TODO_DESCRIPTION
    /// Type:          uint
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 directionReverseCountThreshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromaitxPDConvergeDoneFilterType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromaitxPDConvergeDoneFilterType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   Flag to enable temproal filter applied to target lens position during focus converge
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL   enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// length
    ///
    /// Description:   Length of moving average filter applied to target lens position during focus converge
    /// Type:          uint
    /// Range:         [1,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 length;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// threshold
    ///
    /// Description:   Threshold used to assess focus done condition. If the difference between target lens position and the
    ///                next lens position is less then this threshold then focus convergence is done
    /// Type:          uint
    /// Range:         [1,900]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 threshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDTrackControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDTrackControlType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// trackROIProcess
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct trackROIProcessStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// trackROIRoughStable
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        statsroidifference::chromatixStatsROIDifferenceType trackROIRoughStable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// trackROIStrictStable
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        statsroidifference::chromatixStatsROIDifferenceType trackROIStrictStable;
    } trackROIProcess;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minMoveThreshold
    ///
    /// Description:   While running object tracking for 2PD, if defocus is less than this threshold then focus search will not
    ///                be re-triggered
    /// Type:          uint
    /// Default Value: 3
    /// Range:         [0,7]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32          minMoveThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusFilter
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct defocusFilterStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Description:   object tracking 2PD, temporal filter to calculate average target position and use target positon to
        ///                calculate average defocus and next position
        /// Type:          bool
        /// Default Value: true
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BOOL   enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// length
        ///
        /// Description:   object tracking 2PD, length of moving average filter applied to target lens position
        /// Type:          uint
        /// Default Value: 3
        /// Range:         [1,10]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 length;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// confidenceHighThreshold
        ///
        /// Description:   object tracking 2PD, if confidence is above this threshold then lens is moved to 100% of defocus. If
        ///                confidence is lower than min_conf the lens is not moved. If confidence is between this threshold and
        ///                min_conf then the lens is moved by interpolated percentage
        /// Type:          uint
        /// Default Value: 700
        /// Range:         [0,1023]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 confidenceHighThreshold;
    } defocusFilter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fallback
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct fallbackStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Description:   object tracking 2PD is always in converge state. This flag is used to enable fallback in some
        ///                specification condition. If object fallback condition is met and this flag is enable then fallback to
        ///                contrast-based AF is invoked
        /// Type:          bool
        /// Default Value: false
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BOOL   enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// fallbackROISizeThreshold
        ///
        /// Description:   object tracking 2PD, enter fallback status if one of ROI dimension is small than this threshold
        /// Type:          uint
        /// Default Value: 200
        /// Range:         [0,4032]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 fallbackROISizeThreshold;
    } fallback;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDTouchControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDTouchControlType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// offCenterThreshold
    ///
    /// Description:   Radius distance from touch ROI to center ROI in terms of dist divided by CAMIF radius. This value is a
    ///                percentage of camif radius. Image center PD perforamnce is better than corner. When defocus is large
    ///                enough, corner image PD may not accurate enough and hit over-shoot situation. This threshold to divide
    ///                FOV to two zone: center/corner. If corner zone defocus is large lens is moved incrementally
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            offCenterThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skipSearchIfSceneInFocus
    ///
    /// Description:   flag to enable PDAF skip refocus if scene is already in focus.
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type skipSearchIfSceneInFocus;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDFaceControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDFaceControlType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceROIProcess
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct faceROIProcessStruct
    {
        globalelements::enable_flag_type                ROIProcessEnable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// ROIRoughStable
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        statsroidifference::chromatixStatsROIDifferenceType ROIRoughStable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// ROIStrictStable
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        statsroidifference::chromatixStatsROIDifferenceType ROIStrictStable;
    } faceROIProcess;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minMoveThreshold
    ///
    /// Description:   While running face tracking for 2PD, if defocus is less than this threshold then focus search will not be
    ///                re-triggered
    /// Type:          uint
    /// Range:         [0,7]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                   minMoveThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROIMoveConvergeSuppress
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct ROIMoveConvergeSuppressStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Description:   Enable flag for face 2pd ROI move converge suppress
        /// Type:          bool
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BOOL   enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// stableCountThreshold
        ///
        /// Description:   Stable counter threshold for face 2PD roi move converge suppress.Once face ROI is less than moving
        ///                threshold for continuous frames over the counter PDAF will resume converging
        /// Type:          uint
        /// Range:         [1,100]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 stableCountThreshold;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// moveThresholdInX
        ///
        /// Description:   Face tracking 2PD, if ROI is moving over defined X threshold, then converge suppress will occur
        /// Type:          float
        /// Range:         [0.1,1.0]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  moveThresholdInX;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// moveThresholdInY
        ///
        /// Description:   Face tracking 2PD, if ROI is moving over defined Y threshold, then converge suppress will occur
        /// Type:          float
        /// Range:         [0.1,1.0]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  moveThresholdInY;
    } ROIMoveConvergeSuppress;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusFilter
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct defocusFilterStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Description:   Face tracking 2PD, temporal filter to calculate average target position and use target positon to
        ///                calculate average defocus and next position
        /// Type:          bool
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BOOL   enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// length
        ///
        /// Description:   Face tracking 2PD, length of moving average filter applied to target lens position
        /// Type:          uint
        /// Range:         [1,10]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 length;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// confidenceHighThreshold
        ///
        /// Description:   Face tracking 2PD, if confidence is above this threshold then lens is moved to 100% of defocus. If
        ///                confidence is lower than min_conf the lens is not moved. If confidence is between this threshold and
        ///                min_conf then the lens is moved by interpolated percentage
        /// Type:          uint
        /// Range:         [0,1023]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 confidenceHighThreshold;
    } defocusFilter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fallback
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct fallbackStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Description:   Face tracking 2PD is always in converge state. This flag is used to enable fallback in some specification
        ///                condition. If face fallback condition is met and this flag is enable then fallback to contrast-based AF
        ///                is invoked
        /// Type:          bool
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BOOL   enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// fallbackROISizeThreshold
        ///
        /// Description:   Face tracking 2PD, enter fallback status if one of ROI dimension is small than this threshold
        /// Type:          uint
        /// Range:         [0,4032]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 fallbackROISizeThreshold;
    } fallback;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceChangeRefocusTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct faceChangeRefocusTriggerStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Description:   Enable face PDAF face change refocus trigger. When face change criteria is satisfied then scene change
        ///                flag will be raised and PDAF refocus will be triggered.
        /// Type:          bool
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BOOL   enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// roiChangeThreshPercentage
        ///
        /// Description:   When face ROI vs. reference ROI has moved more than thresh percentage, face refocus will trigger.
        ///                Percentage is calculated by face ROI move delta divide by CAMIF width or height.
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  roiChangeThreshPercentage;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// roiSizeStableThresh
        ///
        /// Description:   When current face ROI vs. last frame face ROI moves less than this pixel threshold, we report face
        ///                regains stability. This is not a percentage.
        /// Type:          uint
        /// Range:         [0,100]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 roiSizeStableThresh;
    } faceChangeRefocusTrigger;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDMultiwindowType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDMultiwindowType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   Enables multi-window auto focus
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// HClipRatioNormalLight
    ///
    /// Description:   Normalized x coordinate of top-left corner of multi-window ROI under modest to bright light conditions.
    ///                (x,y) = (0,0) means top-left corner of full field of view.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            HClipRatioNormalLight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// VClipRatioNormalLight
    ///
    /// Description:   Normalized y coordinate of top-left corner of multi-window ROI under modest to bright light conditions.
    ///                (x,y) = (0,0) means top-left corner of full field of view.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            VClipRatioNormalLight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// HClipRatioLowLight
    ///
    /// Description:   Normalized x coordinate of top-left corner of multi-window ROI under low light conditions. (x,y) = (0,0)
    ///                means top-left corner of full field of view.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            HClipRatioLowLight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// VClipRatioLowLight
    ///
    /// Description:   Normalized y coordinate of top-left corner of multi-window ROI under low light conditions. (x,y) = (0,0)
    ///                means top-left corner of full field of view.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            VClipRatioLowLight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// HNumWindows
    ///
    /// Description:   Horizontal grid size of multi-window ROI.
    /// Type:          float
    /// Range:         [1,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            HNumWindows;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// VNumWindows
    ///
    /// Description:   Vertical grid size of multi-window ROI.
    /// Type:          float
    /// Range:         [1,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            VNumWindows;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDPercentile
    ///
    /// Description:   Pd_percentile Description: Nth Percentile of the valid windows to select from.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            PDPercentile;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusThreshold
    ///
    /// Description:   Windows within this threshold of the best window will be selected for contrast AF to calcuate FV.
    /// Type:          int
    /// Range:         [0,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            defocusThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// confidenceThMultiple
    ///
    /// Description:   the confidence threshold for mw grids will be the min-conf * ConfidenceThMultiple.
    /// Type:          float
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            confidenceThMultiple;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// multiDepthDetect
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct multiDepthDetectStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// percentile
        ///
        /// Description:   after sorting, will use this percentile to get the detect size for multi-depth detection.
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT percentile;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// detectThLow
        ///
        /// Description:   depth difference from multi-depth detection lower than this threshold when in muti-depth mode ,transition
        ///                to not muti-depth condition.
        /// Type:          float
        /// Range:         [0,500]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT detectThLow;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// detectThHigh
        ///
        /// Description:   depth difference from multi-depth detection higher than this threshold when in not multi-depth mode ,
        ///                transition to multi-depth condition.
        /// Type:          float
        /// Range:         [0,500]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT detectThHigh;
    } multiDepthDetect;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lowLightDetect
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lowLightDetectStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// gainThLow
        ///
        /// Description:   aec gain lower than this threshold when in lowlight mode , transition to normal light MW condition.
        /// Type:          float
        /// Range:         [0,60]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT gainThLow;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// gainThHigh
        ///
        /// Description:   aec gain higher than this threshold when in normal light mode , transition to low light MW condition.
        /// Type:          float
        /// Range:         [0,60]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT gainThHigh;
    } lowLightDetect;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lockToPeripheralDuringSearch
    ///
    /// Description:   flag whether to lock the roi to Peripheral during search on the Peripheral
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type lockToPeripheralDuringSearch;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// activZoomControl
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct activZoomControlStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Description:   Multi-window PDAF will only enable if zoom level is less than mw_active_zoom_threshold.If zoom level is
        ///                higher than this threshold, then PDAF will be configured to 1x1 ROI instead to ensure enough pixels
        ///                located inside. This is flag to enable/disable the mechanism. If this is disabled, then all zoom level
        ///                will run multi-window PDAF, which may have hunting effect at high zoom level.
        /// Type:          int
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        globalelements::enable_flag_type enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// zoomThreshold
        ///
        /// Description:   Multi-window PDAF will only enable if zoom level is less than this threshold.If zoom level level higher
        ///                than this threshold, then PDAF will be configured to 1x1 to ensure enough pixels is located inside.
        /// Type:          float
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            zoomThreshold;
    } activZoomControl;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDInternalType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDInternalType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// type
    ///
    /// Description:   PDAF sensor type used
    /// Type:          int
    /// Range:         [1,3]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               type;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// initialPosition
    ///
    /// Description:   Initial lens position when camera turns on
    /// Type:          int
    /// Range:         [0,500]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               initialPosition;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDAFEnableFaceCAFPriority
    ///
    /// Description:   Flag to enable feature where contrast-based auto focus is invoked if face is detected
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type    PDAFEnableFaceCAFPriority;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// incDefocusThresholdPreviousError
    ///
    /// Description:   Increase defocus threshold by this parameter in logical lens units if previous iteration of focus
    ///                converge resulted in error
    /// Type:          float
    /// Range:         [0,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               incDefocusThresholdPreviousError;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fineScanRangeEnhance
    ///
    /// Description:   When enabled this feature decreases the estimated fine scan range by 25%
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               fineScanRangeEnhance;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// softRegionThresholdMultiplier
    ///
    /// Description:   Description: If defocus value is less than defocus threshold and above soft defocus threshold, then scene
    ///                change determines if PDAF focus convergence is to be triggered Constraints: Soft threshold defocus is the
    ///                calculated by defocusThreshold(tuning) multiplied by softRegionThresholdMultiplier. Decreasing this
    ///                number may cause PDAF to be more sensitive to defocus condition that is accompanied by a scene change.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               softRegionThresholdMultiplier;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableSoftConfidenceThreshold
    ///
    /// Description:   Description: Enables feature which allow the minimum confidence level to slightly decrease during focus
    ///                convergence due to increased aliasing Constraints: Enable this feature if PDAF frequently transitions to
    ///                contrast-based AF in the midst of focus convergence. Generally disabled for Type 1 and enabled for Type 2
    ///                and 3
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type    enableSoftConfidenceThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// softConfidenceThresholdDelta
    ///
    /// Description:   Description: Represents the decrease in minimum confidence level allowed during focus convergence if
    ///                enableSoftConfidenceThreshold is enabled Constraints: Increasing this number allows PDAF to employ lower
    ///                minimum confidence level during focus converge. Setting this number higher than the minimum confidence
    ///                level causes minimum confidence level requirement to be omitted during focus converge; hence, a care
    ///                needs to be taken in revising this parameter.
    /// Type:          float
    /// Range:         [0,200]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               softConfidenceThresholdDelta;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// softConfidenceFocus_pnt
    ///
    /// Description:   Description: Represents the scaler by which PDAF focus convergence slows down for PD samples whose
    ///                confidence level resides between minimum confidence level and (minimum confidence level -
    ///                softConfidenceThresholdDelta) Constraints: Decreasing this number causes PDAF to perform focus
    ///                convergence more slowly for PD samples whose confidence level lies between minimum confidence level and
    ///                (minimum confidence level - softConfidenceThresholdDelta)
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               softConfidenceFocus_pnt;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableSoftRegionThresholdHigh
    ///
    /// Description:   Description: It is a boolean flag which indicate if softdefocusThresholdHigh will be used as a parameter
    ///                to trigger focus in soft region when soft region threshold hig(enableSoftRegionThresholdHigh) is enabled.
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type    enableSoftRegionThresholdHigh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// softRegionThresholdHighMultiplier
    ///
    /// Description:   Description: Defocus multiplier to make defocus threshold higher. Please refer to
    ///                enableSoftRegionThresholdHigh image.
    /// Type:          float
    /// Range:         [2,6]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               softRegionThresholdHighMultiplier;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// softSceneChangeCount
    ///
    /// Description:   Description: number of scene changed reported by AF continues.
    /// Type:          int
    /// Range:         [1,6]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               softSceneChangeCount;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// cafStableFrameAllow
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct cafStableFrameAllowStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Description:   flag for caf stable frame allow enable/disable
        /// Type:          int
        /// Default Value: 0
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        globalelements::enable_flag_type enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// frameCount
        ///
        /// Description:   frame count for caf stable wait threshold
        /// Type:          uint
        /// Range:         [1,200]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           frameCount;
    } cafStableFrameAllow;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDPreprocessingType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDPreprocessingType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   Enables selective filtering of PD sample based on confidence level and abs(PD)
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableDoNotUseDefocusSampleByPD
    ///
    /// Description:   Enables rejection of PD stat if abs(PD) exceeds this threshold
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type enableDoNotUseDefocusSampleByPD;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableIncMinConfidenceThresholdByPD
    ///
    /// Description:   Enables increasing of minimimum confidence level if abs(PD) is above certain threshold
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type enableIncMinConfidenceThresholdByPD;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDMaxLimitDoNotUseDefocusSample
    ///
    /// Description:   Minimum threshold applied to abs(PD) above which the corresponding defocus sample is not used
    /// Type:          float
    /// Range:         [12,32]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            PDMaxLimitDoNotUseDefocusSample;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDMaxLimitIncMinConfidenceThreshold
    ///
    /// Description:   Maximum threshold applied to abs(PD) above which minimum confidence is scaled up
    /// Type:          float
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            PDMaxLimitIncMinConfidenceThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// incMinConfidenceThresholdByPDScaler
    ///
    /// Description:   Scaler multiplier by which minimum confidence threshold is increased if abs(PD) is above
    ///                PDMaxLimitIncMinConfidenceThreshold
    /// Type:          float
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            incMinConfidenceThresholdByPDScaler;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDStdThreshold
    ///
    /// Description:   Maximum threshold for std(PD) above which corresponding defocus sample is not used
    /// Type:          float
    /// Range:         [0,8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            PDStdThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDDefocusHighErrorScCheck
    ///
    /// Description:   If abs(defocus) is above the threshold defined by (PDDefocusHighErrorScCheck * defocus threshold) then
    ///                focus trigger must also be accompanied by scene change
    /// Type:          int
    /// Range:         [2,30]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            PDDefocusHighErrorScCheck;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDAverageDefocusHighErrScCheck
    ///
    /// Description:   If temporally filtered abs(defocus) is above the threshold defined by (PDAverageDefocusHighErrScCheck *
    ///                defocus threshold) focus trigger must also be accompanied by scene change
    /// Type:          int
    /// Range:         [2,30]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            PDAverageDefocusHighErrScCheck;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDLowlightGainThresholdScCheck
    ///
    /// Description:   If abs(defocus) is below the threshold defined by (PDLowlightGainThresholdScCheck * defocus threshold)
    ///                then focus trigger is to be based on scene change
    /// Type:          int
    /// Range:         [2,30]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            PDLowlightGainThresholdScCheck;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDDefocusHighScCheck - Array
    ///
    /// Description:   If abs(defocus) is below the threshold defined by (PDDefocusHighScCheck * defocus threshold) then focus
    ///                trigger is to be based on scene change
    /// Type:          int
    /// Range:         [2,30]
    /// Min Length:    1
    /// Max Length:    4
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32           PDDefocusHighScCheckCount;
    UINT32           PDDefocusHighScCheckID;
    INT32*           PDDefocusHighScCheck;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDAverageDefocusHighScCheck - Array
    ///
    /// Description:   If temporally filtered abs(defocus) is below the threshold defined by (PDAverageDefocusHighScCheck *
    ///                defocus threshold) then focus trigger is to be based on scene change
    /// Type:          int
    /// Range:         [2,30]
    /// Min Length:    1
    /// Max Length:    4
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32           PDAverageDefocusHighScCheckCount;
    UINT32           PDAverageDefocusHighScCheckID;
    INT32*           PDAverageDefocusHighScCheck;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDLowlightDefocusHighScCheck - Array
    ///
    /// Description:   If abs(defocus) is below the threshold defined by (PDLowlightDefocusHighScCheck * defocus threshold) then
    ///                focus trigger is to be based on scene change
    /// Type:          int
    /// Range:         [2,30]
    /// Min Length:    1
    /// Max Length:    4
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32           PDLowlightDefocusHighScCheckCount;
    UINT32           PDLowlightDefocusHighScCheckID;
    INT32*           PDLowlightDefocusHighScCheck;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDLowlightAverageDefocusHighScCheck - Array
    ///
    /// Description:   If temporally filtered abs(defocus) is below the threshold defined by
    ///                (PDLowlightAverageDefocusHighScCheck * defocus threshold) then focus trigger is to be based on scene
    ///                change
    /// Type:          int
    /// Range:         [2,30]
    /// Min Length:    1
    /// Max Length:    4
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32           PDLowlightAverageDefocusHighScCheckCount;
    UINT32           PDLowlightAverageDefocusHighScCheckID;
    INT32*           PDLowlightAverageDefocusHighScCheck;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDMonitorType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDMonitorType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// waitAfterFocusCount
    ///
    /// Description:   Number of frames to wait after focus search finishes before detecting out-of-focus (or defocus) condition
    /// Type:          int
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            waitAfterFocusCount;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// waitConfidenceRecoverCount
    ///
    /// Description:   Number of frames to wait for confidence level to recover from a temporary drop (e.g. scene change)
    /// Type:          int
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            waitConfidenceRecoverCount;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusedThreshold
    ///
    /// Description:   Minimum size of absolute defocus below which lens is assumed to be in focus
    /// Type:          float
    /// Range:         [0,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            defocusedThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// depthStableThreshold
    ///
    /// Description:   Maximum size of frame-to-frame difference in temporally filtered defocus above which defocus is deemed
    ///                not stable. Focus convergence can only be triggered if defocus is deemed stable
    /// Type:          float
    /// Range:         [0,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            depthStableThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusStableFilterLength
    ///
    /// Description:   Size of moving average filter applied to defocus sample
    /// Type:          int
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            defocusStableFilterLength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableTriggerSuppressionBySceneChange
    ///
    /// Description:   If enabled, focus trigger is suppressed until scene change is also detected
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type enableTriggerSuppressionBySceneChange;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusDOFMultiplier
    ///
    /// Description:   Maximum scaler by which the dept of focus is deemed to increase from hyperfocal distance to 10-cm
    /// Type:          float
    /// Range:         [0,2]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            defocusDOFMultiplier;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusThresholdScaler
    ///
    /// Description:   Scaler by which defocus threshold is multiplied if scene change is not detected
    /// Type:          float
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            defocusThresholdScaler;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDFocusScanType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDFocusScanType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// focusConvergeFrameSkip
    ///
    /// Description:   Number of frame skip to use during PDAF focus convergence
    /// Type:          int
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            focusConvergeFrameSkip;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableFineScan
    ///
    /// Description:   Enable contrast-based fine scan following PDAF focus convergence
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type enableFineScan;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minimumFineScanRange
    ///
    /// Description:   Minimum fine scan range expressed as scaler multiple to computed fine scan step size.
    /// Type:          int
    /// Range:         [1,2]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            minimumFineScanRange;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fineScanStepSize
    ///
    /// Description:   Minimum fine scan step size to use for contrast-based fine scan following PDAF focus converge
    /// Type:          int
    /// Range:         [1,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            fineScanStepSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// focusDoneThreshold
    ///
    /// Description:   Minimum absolute defocus value below which focus converge is deemed to be done
    /// Type:          int
    /// Range:         [0,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            focusDoneThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableFineScanExtension
    ///
    /// Description:   Enables contrast-based fine scan following PDAF focus convergence to extend search limit as needed to
    ///                find focus peak
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type enableFineScanExtension;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// firstRunNotConfidenceAdd
    ///
    /// Description:   Increases frame count by which PDAF waits for valid defocus statistics to arrive for the first camera
    ///                turn on
    /// Type:          int
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            firstRunNotConfidenceAdd;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDDofScalerEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDDofScalerEntryType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// normalizedLensPosition
    ///
    /// Description:   Normalized lens position, if lens position is near end, the value is 1, if lens position is far end, the
    ///                value is 0.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT normalizedLensPosition;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dofScaler
    ///
    /// Description:   DOF scaler value at the given normalized lens position, this scaler will be applied to fine scan step
    ///                size, defocus threshold, focus done threshold etc./
    /// Type:          float
    /// Range:         [1,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT dofScaler;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDDofScalerTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDDofScalerTableType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dofScalerEntries - Array
    /// Min Length:    1
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                         dofScalerEntriesCount;
    UINT32                         dofScalerEntriesID;
    chromatixPDDofScalerEntryType* dofScalerEntries;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDStableTableEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDStableTableEntryType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FPS
    ///
    /// Description:   Frame rate per second
    /// Type:          int
    /// Range:         [0,120]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 FPS;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minimumStableCount
    ///
    /// Description:   Number of frames in which defocus values must remain stable in order for PDAF algorithm to trigger focus
    ///                convergence
    /// Type:          int
    /// Range:         [0,30]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 minimumStableCount;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDStableTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDStableTableType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stableEntries - Array
    /// Min Length:    1
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                           stableEntriesCount;
    UINT32                           stableEntriesID;
    chromatixPDStableTableEntryType* stableEntries;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDConfidenceTableEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDConfidenceTableEntryType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// noiseGain
    ///
    /// Description:   Noise level in dB computed as as 20.0 * log10(sensor_gain)
    /// Type:          float
    /// Range:         [0,40]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT noiseGain;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minimumConfidence
    ///
    /// Description:   Minimum confidence level at the given noise level in dB. Defocus valuese whose confidence level is below
    ///                the minimum threshold is deemed not confident
    /// Type:          int
    /// Range:         [0,1023]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 minimumConfidence;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDConfidenceTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDConfidenceTableType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// confidenceEntries - Array
    /// Min Length:    1
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                               confidenceEntriesCount;
    UINT32                               confidenceEntriesID;
    chromatixPDConfidenceTableEntryType* confidenceEntries;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDNoiseTableEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDNoiseTableEntryType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// noiseGain
    ///
    /// Description:   Noise level in dB computed as as 20.0 * log10(sensor_gain)
    /// Type:          float
    /// Range:         [0,40]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT noiseGain;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// noiseGainMultiplier
    ///
    /// Description:   Scaler by which size of rms noise increases. Scaler value of 1 implies rms noise is identical to the case
    ///                where sensor gain is 1X
    /// Type:          float
    /// Range:         [1,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT noiseGainMultiplier;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDNoiseTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDNoiseTableType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// noiseEntries - Array
    /// Min Length:    1
    /// Max Length:    20
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          noiseEntriesCount;
    UINT32                          noiseEntriesID;
    chromatixPDNoiseTableEntryType* noiseEntries;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDROIConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDROIConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROILocationY
    ///
    /// Description:   Y-coordinate for top-left corner of ROI in grid-based stats
    /// Type:          int
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 ROILocationY;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROILocationX
    ///
    /// Description:   X-coordinate for top-left corner of ROI in grid-based stats
    /// Type:          int
    /// Range:         [0,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 ROILocationX;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROINumRows
    ///
    /// Description:   Height of ROI in number of rows in grid-based stats
    /// Type:          int
    /// Range:         [1,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 ROINumRows;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROINumCols
    ///
    /// Description:   Width of ROI in number of columns in grid-based stats
    /// Type:          int
    /// Range:         [1,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 ROINumCols;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDROIType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDROIType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Configuration - Array
    /// Min Length:    1
    /// Max Length:    10
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                    ConfigurationCount;
    UINT32                    ConfigurationID;
    chromatixPDROIConfigType* Configuration;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDAFType
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// is2PDEnable
    ///
    /// Description:   Enable PDAF specific to dual-photodiode type image sensor
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                                 is2PDEnable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROI
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDROIType                   ROI;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// focusTable
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDFocusTableType            focusTable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// noiseTable
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDNoiseTableType            noiseTable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// confidenceTable
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDConfidenceTableType       confidenceTable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// confidenceHighTable
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDConfidenceTableType       confidenceHighTable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fallbackConfidence
    ///
    /// Description:   Threshold applied to PD confidence level to decide when to perform fallback to other AF algorithm.
    /// Type:          uint
    /// Range:         [0,1023]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                               fallbackConfidence;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stableTable
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDStableTableType           stableTable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dofScalerTable
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDDofScalerTableType        dofScalerTable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// focusScan
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDFocusScanType             focusScan;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sceneMonitor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDMonitorType               sceneMonitor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDPreprocessing
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDPreprocessingType         PDPreprocessing;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDInternal
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDInternalType              PDInternal;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDMultiWindow
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDMultiwindowType           PDMultiWindow;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableCheckVHStatsRatio
    ///
    /// Description:   Sony confirms that type 1 lib will generate inaccurate PD value with high confidence in scene of 5-30
    ///                degree stripe line. We use this flag to enable a function which will detect this scene by ratio of H, V
    ///                focus value and set PDAF 'isConfidence' false when this scene is detected.
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type                     enableCheckVHStatsRatio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// VHStatsRatioUnconfidentThreshold
    ///
    /// Description:   Sony confirms that type 1 lib will generate inaccurate PD value with high confidence in scene of 5-30
    ///                degree stripe line. We set PD 'isConfidence' false if ratio H, V focus value is larger than this
    ///                threshold.
    /// Type:          int
    /// Range:         [0,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                VHStatsRatioUnconfidentThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enablePDEarlyInterrupt
    ///
    /// Description:   If early interrupt is supported and PDLib is handled in sensor side, this flag should be true, otherwise
    ///                stays false. Important dependency, please pay attention. PD_early_interrupt_enabled = 1 then
    ///                focus_conv_frame_skip = 0 PD_early_interrupt_enabled = 0 then focus_conv_frame_skip = 1 For PD early
    ///                interrupt to work, BAF ROI should be the same as PDAF ROI. PDAF ROI will be set in imx362_pdaf.h. Look
    ///                for (pdaf_address_end_hori, etc) In tuning header h_clip_ratio_normal_light = pdaf_address_end_hori -
    ///                pdaf_address_start_hori. The same for vertical.
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type                     enablePDEarlyInterrupt;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dynamicFrameSkipVBlankThreshold
    ///
    /// Description:   We don't have to do frame skip for PDAF when VBlank time is larger this threshold
    /// Type:          float
    /// Range:         [0.0, 30.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                                dynamicFrameSkipVBlankThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ledPdafMaxFrameAllow
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct ledPdafMaxFrameAllowStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Description:   LED PDAF convergence max frame control enable flag. When this flag is enabled, it will read
        ///                LED_PDAF_max_frame_cnt and force LED PDAF to complete converge when converge frame is more than the max
        ///                allowed. This prevents power drain and app timeout in case of constantscene panning.
        /// Type:          int
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        globalelements::enable_flag_type enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// maxFrameCnt
        ///
        /// Description:   PDAF stats is forced to enter focus converge done when LED pd converge is over this threshold
        /// Type:          uint
        /// Range:         [1,200]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           maxFrameCnt;
    } ledPdafMaxFrameAllow;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sparsePDTouchFaceConfidenceThreshold
    ///
    /// Description:   Confidence threshold required to determine if to fallback or run PDAF while touch/face.
    /// Type:          int
    /// Range:         [0,1023]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                sparsePDTouchFaceConfidenceThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sparsePDTouchFaceLowDefocusConfidenceThreshold
    ///
    /// Description:   Confidence threshold required to determine if to fallback or fine scan while touch/face.
    /// Type:          int
    /// Range:         [0,1023]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                sparsePDTouchFaceLowDefocusConfidenceThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableEnterLSPLowConfidenceHunting
    ///
    /// Description:   PD variation is large in some test scene and cause hunting issue. Force this test scene enter to LSP when
    ///                sign of PD is reverted in some times. LSP will use contrast information to find final position.
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type                     enableEnterLSPLowConfidenceHunting;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LSPLowConfidenceHuntingThreshold
    ///
    /// Description:   PDAF stats is forced to enter focus converge done when sign of PD reverted counter is over this
    ///                threshold.
    /// Type:          int
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                LSPLowConfidenceHuntingThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// face
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDFaceControlType           face;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// touch
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDTouchControlType          touch;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// track
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDTrackControlType          track;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// convergeDoneFilter
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromaitxPDConvergeDoneFilterType    convergeDoneFilter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// forceEnterFineSearch
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDForceEnterFineSearchType  forceEnterFineSearch;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// advancedSparseControl
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAdvancedSparsePDControlType advancedSparseControl;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDAFTypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatixPDAFTypeClass : public ParameterModule, public chromatixPDAFType
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 9;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDAFTypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDAFTypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatixPDAFTypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDFocusTableEntryType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDFocusTableEntryType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDFocusTableEntryType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDFocusTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDFocusTableType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDFocusTableType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAdvancedSparsePDControlType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAdvancedSparsePDControlType(
        ParameterFileSymbolTableEntry* entry,
        chromatixAdvancedSparsePDControlType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDForceEnterFineSearchType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDForceEnterFineSearchType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDForceEnterFineSearchType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromaitxPDConvergeDoneFilterType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromaitxPDConvergeDoneFilterType(
        ParameterFileSymbolTableEntry* entry,
        chromaitxPDConvergeDoneFilterType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDTrackControlType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDTrackControlType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDTrackControlType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDTrackControlType_trackROIProcessStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDTrackControlType_trackROIProcessStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDTrackControlType::trackROIProcessStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDTrackControlType_defocusFilterStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDTrackControlType_defocusFilterStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDTrackControlType::defocusFilterStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDTrackControlType_fallbackStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDTrackControlType_fallbackStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDTrackControlType::fallbackStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDTouchControlType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDTouchControlType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDTouchControlType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDFaceControlType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDFaceControlType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDFaceControlType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDFaceControlType_faceROIProcessStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDFaceControlType_faceROIProcessStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDFaceControlType::faceROIProcessStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDFaceControlType_ROIMoveConvergeSuppressStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDFaceControlType_ROIMoveConvergeSuppressStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDFaceControlType::ROIMoveConvergeSuppressStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDFaceControlType_defocusFilterStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDFaceControlType_defocusFilterStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDFaceControlType::defocusFilterStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDFaceControlType_fallbackStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDFaceControlType_fallbackStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDFaceControlType::fallbackStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDFaceControlType_faceChangeRefocusTriggerStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDFaceControlType_faceChangeRefocusTriggerStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDFaceControlType::faceChangeRefocusTriggerStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDMultiwindowType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDMultiwindowType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDMultiwindowType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDMultiwindowType_multiDepthDetectStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDMultiwindowType_multiDepthDetectStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDMultiwindowType::multiDepthDetectStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDMultiwindowType_lowLightDetectStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDMultiwindowType_lowLightDetectStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDMultiwindowType::lowLightDetectStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDMultiwindowType_activZoomControlStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDMultiwindowType_activZoomControlStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDMultiwindowType::activZoomControlStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDInternalType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDInternalType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDInternalType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDInternalType_cafStableFrameAllowStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDInternalType_cafStableFrameAllowStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDInternalType::cafStableFrameAllowStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDPreprocessingType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDPreprocessingType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDPreprocessingType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDMonitorType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDMonitorType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDMonitorType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDFocusScanType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDFocusScanType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDFocusScanType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDDofScalerEntryType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDDofScalerEntryType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDDofScalerEntryType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDDofScalerTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDDofScalerTableType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDDofScalerTableType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDStableTableEntryType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDStableTableEntryType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDStableTableEntryType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDStableTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDStableTableType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDStableTableType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDConfidenceTableEntryType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDConfidenceTableEntryType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDConfidenceTableEntryType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDConfidenceTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDConfidenceTableType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDConfidenceTableType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDNoiseTableEntryType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDNoiseTableEntryType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDNoiseTableEntryType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDNoiseTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDNoiseTableType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDNoiseTableType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDROIConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDROIConfigType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDROIConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDROIType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDROIType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDROIType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDAFType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDAFType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDAFType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDAFType::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDAFType::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load ledPdafMaxFrameAllowStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadledPdafMaxFrameAllowStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDAFType::ledPdafMaxFrameAllowStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDFocusTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDFocusTableType(
        chromatixPDFocusTableType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixAdvancedSparsePDControlType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixAdvancedSparsePDControlType(
        chromatixAdvancedSparsePDControlType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDTrackControlType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDTrackControlType(
        chromatixPDTrackControlType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDTrackControlType_trackROIProcessStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDTrackControlType_trackROIProcessStruct(
        chromatixPDTrackControlType::trackROIProcessStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDFaceControlType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDFaceControlType(
        chromatixPDFaceControlType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDFaceControlType_faceROIProcessStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDFaceControlType_faceROIProcessStruct(
        chromatixPDFaceControlType::faceROIProcessStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDPreprocessingType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDPreprocessingType(
        chromatixPDPreprocessingType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDDofScalerTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDDofScalerTableType(
        chromatixPDDofScalerTableType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDStableTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDStableTableType(
        chromatixPDStableTableType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDConfidenceTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDConfidenceTableType(
        chromatixPDConfidenceTableType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDNoiseTableType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDNoiseTableType(
        chromatixPDNoiseTableType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDROIType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDROIType(
        chromatixPDROIType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDAFType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDAFType(
        chromatixPDAFType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatixPDAFType::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatixPDAFTypeClass

AFPDAFELEMENTS_NAMESPACE_END
#endif // AFPDAFELEMENTS_H

