////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecskip.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "aecskip.h"
#include "parametersetmanager.h"

AECSKIP_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECSkipCtrlTypeClass::AECSkipCtrlTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(DFSEnable);
    PARAMETER_INITIALIZE(DFSExpIndexTolerance);
    PARAMETER_INITIALIZE(DFSMaxHistoryCount);
    PARAMETER_INITIALIZE(DFSSkipCountZoneCount);
    PARAMETER_INITIALIZE(DFSSkipCountZoneID);
    PARAMETER_INITIALIZE(DFSSkipCountZone);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECSkipCtrlTypeClass::AECSkipCtrlTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(DFSEnable);
    PARAMETER_INITIALIZE(DFSExpIndexTolerance);
    PARAMETER_INITIALIZE(DFSMaxHistoryCount);
    PARAMETER_INITIALIZE(DFSSkipCountZone);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECSkipCtrlTypeClass::~AECSkipCtrlTypeClass()
{
    UnloadAECSkipCtrlType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* AECSkipCtrlTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "aecSkipCtrl")) == 0)
    {
        name = "aecSkipCtrl";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load DFSSkipCountZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECSkipCtrlTypeClass::LoadDFSSkipCountZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    DFSSkipCountZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->DFSSkipCount, alignment);
    result = result && entry->Read(&structure->DFSMinSettleThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load DFSSkipCountZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECSkipCtrlTypeClass::LoadDFSSkipCountZoneType(
    ParameterFileSymbolTableEntry* entry,
    DFSSkipCountZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadDFSSkipCountZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECSkipCtrlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECSkipCtrlTypeClass::LoadAECSkipCtrlType(
    ParameterFileSymbolTableEntry* entry,
    AECSkipCtrlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && entry->Read(&structure->DFSEnable, alignment);
    result = result && entry->Read(&structure->DFSExpIndexTolerance, alignment);
    result = result && entry->Read(&structure->DFSMaxHistoryCount, alignment);

    // Reading Array DFSSkipCountZone from symbol table
    {
        result = result && entry->Read(&structure->DFSSkipCountZoneCount, alignment);
        structure->DFSSkipCountZoneID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->DFSSkipCountZone = PARAMETER_NEW DFSSkipCountZoneType[structure->DFSSkipCountZoneCount];
        }
        if (!result || structure->DFSSkipCountZone == NULL)
        {
            structure->DFSSkipCountZoneCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->DFSSkipCountZoneCount; i++)
        {
            result = LoadDFSSkipCountZoneType(pointerEntry, &structure->DFSSkipCountZone[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECSkipCtrlTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECSkipCtrlType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECSkipCtrlTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECSkipCtrlType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECSkipCtrlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECSkipCtrlTypeClass::UnloadAECSkipCtrlType(
    AECSkipCtrlType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    PARAMETER_DELETE[] structure->DFSSkipCountZone;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECSkipCtrlTypeClass::Unloadparameter_versionStruct(
    AECSkipCtrlType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* AECSkipCtrlTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    AECSkipCtrlTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW AECSkipCtrlTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadAECSkipCtrlType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AECSKIP_NAMESPACE_END
