////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  modflashdecv1.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "modflashdecv1.h"
#include "parametersetmanager.h"

MODFLASHDECV1_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixFlashDecV1TypeClass::chromatixFlashDecV1TypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(moduleID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(enableFlag);
    PARAMETER_INITIALIZE(mainFlashPt);
    PARAMETER_INITIALIZE(interpRatioLEDPt);
    PARAMETER_INITIALIZE(interpRatioPreflash);
    PARAMETER_INITIALIZE(FlashGainAdjust);
    PARAMETER_INITIALIZE(skipFrameCtrl);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixFlashDecV1TypeClass::chromatixFlashDecV1TypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(moduleID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(enableFlag);
    PARAMETER_INITIALIZE(mainFlashPt);
    PARAMETER_INITIALIZE(interpRatioLEDPt);
    PARAMETER_INITIALIZE(interpRatioPreflash);
    PARAMETER_INITIALIZE(FlashGainAdjust);
    PARAMETER_INITIALIZE(skipFrameCtrl);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixFlashDecV1TypeClass::~chromatixFlashDecV1TypeClass()
{
    UnloadchromatixFlashDecV1Type(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixFlashDecV1TypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "flashDecV1")) == 0)
    {
        name = "flashDecV1";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFlashSingleLEDWBPtV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::LoadmodFlashSingleLEDWBPtV1Type(
    ParameterFileSymbolTableEntry* entry,
    modFlashSingleLEDWBPtV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->ledType = (modFlashLEDType)entry->ReadEnum(&result, alignment);
    result = result && awbglobalelements::awbglobalelementsClass::LoadawbPointDataType(entry, &structure->ledWBPt, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFlashAdjV1KTriggerDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::LoadmodFlashAdjV1KTriggerDataType(
    ParameterFileSymbolTableEntry* entry,
    modFlashAdjV1KTriggerDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);
    result = result && awbglobalelements::awbglobalelementsClass::LoadawbPointDataType(entry, &structure->triggerData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFlashAdjV1CCTTriggerDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::LoadmodFlashAdjV1CCTTriggerDataType(
    ParameterFileSymbolTableEntry* entry,
    modFlashAdjV1CCTTriggerDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW modFlashAdjV1KTriggerDataType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadmodFlashAdjV1KTriggerDataType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFlashAdjV1LuxTriggerDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::LoadmodFlashAdjV1LuxTriggerDataType(
    ParameterFileSymbolTableEntry* entry,
    modFlashAdjV1LuxTriggerDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW modFlashAdjV1CCTTriggerDataType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadmodFlashAdjV1CCTTriggerDataType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFlashAdjV1DecisionPtType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::LoadmodFlashAdjV1DecisionPtType(
    ParameterFileSymbolTableEntry* entry,
    modFlashAdjV1DecisionPtType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW modFlashAdjV1LuxTriggerDataType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadmodFlashAdjV1LuxTriggerDataType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFlashGainAdjV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::LoadmodFlashGainAdjV1Type(
    ParameterFileSymbolTableEntry* entry,
    modFlashGainAdjV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW modFlashAdjV1LuxTriggerDataType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadmodFlashAdjV1LuxTriggerDataType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFlashSecondLevelType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::LoadmodFlashSecondLevelType(
    ParameterFileSymbolTableEntry* entry,
    modFlashSecondLevelType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);
    result = result && awbglobalelements::awbglobalelementsClass::LoadawbFloatDataType(entry, &structure->triggerData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFlashFirstLevelType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::LoadmodFlashFirstLevelType(
    ParameterFileSymbolTableEntry* entry,
    modFlashFirstLevelType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW modFlashSecondLevelType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadmodFlashSecondLevelType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFlashInterpRatioLEDV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::LoadmodFlashInterpRatioLEDV1Type(
    ParameterFileSymbolTableEntry* entry,
    modFlashInterpRatioLEDV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbglobalelements::awbTriggerDataFloatType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbTriggerDataFloatType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modFlashInterRatioPreflashV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::LoadmodFlashInterRatioPreflashV1Type(
    ParameterFileSymbolTableEntry* entry,
    modFlashInterRatioPreflashV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW modFlashFirstLevelType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadmodFlashFirstLevelType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixFlashDecV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::LoadchromatixFlashDecV1Type(
    ParameterFileSymbolTableEntry* entry,
    chromatixFlashDecV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadmoduleIDType(entry, &structure->moduleID, alignment);
    result = result && Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && entry->Read(&structure->enableFlag, alignment);
    result = result && LoadmodFlashSingleLEDWBPtV1Type(entry, &structure->mainFlashPt, alignment);
    result = result && LoadmodFlashInterpRatioLEDV1Type(entry, &structure->interpRatioLEDPt, alignment);
    result = result && LoadmodFlashInterRatioPreflashV1Type(entry, &structure->interpRatioPreflash, alignment);
    result = result && LoadmodFlashGainAdjV1Type(entry, &structure->FlashGainAdjust, alignment);
    result = result && LoadskipFrameCtrlStruct(entry, &structure->skipFrameCtrl, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixFlashDecV1Type::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load skipFrameCtrlStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixFlashDecV1TypeClass::LoadskipFrameCtrlStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixFlashDecV1Type::skipFrameCtrlStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableFlag, alignment);
    result = result && entry->Read(&structure->numSkipFramesPreflash, alignment);
    result = result && entry->Read(&structure->numSkipFramesMainflash, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFlashAdjV1CCTTriggerDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixFlashDecV1TypeClass::UnloadmodFlashAdjV1CCTTriggerDataType(
    modFlashAdjV1CCTTriggerDataType* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFlashAdjV1LuxTriggerDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixFlashDecV1TypeClass::UnloadmodFlashAdjV1LuxTriggerDataType(
    modFlashAdjV1LuxTriggerDataType* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadmodFlashAdjV1CCTTriggerDataType(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFlashAdjV1DecisionPtType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixFlashDecV1TypeClass::UnloadmodFlashAdjV1DecisionPtType(
    modFlashAdjV1DecisionPtType* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadmodFlashAdjV1LuxTriggerDataType(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFlashGainAdjV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixFlashDecV1TypeClass::UnloadmodFlashGainAdjV1Type(
    modFlashGainAdjV1Type* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadmodFlashAdjV1LuxTriggerDataType(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFlashFirstLevelType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixFlashDecV1TypeClass::UnloadmodFlashFirstLevelType(
    modFlashFirstLevelType* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFlashInterpRatioLEDV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixFlashDecV1TypeClass::UnloadmodFlashInterpRatioLEDV1Type(
    modFlashInterpRatioLEDV1Type* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modFlashInterRatioPreflashV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixFlashDecV1TypeClass::UnloadmodFlashInterRatioPreflashV1Type(
    modFlashInterRatioPreflashV1Type* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadmodFlashFirstLevelType(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixFlashDecV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixFlashDecV1TypeClass::UnloadchromatixFlashDecV1Type(
    chromatixFlashDecV1Type* structure)
{
    UnloadmodFlashInterpRatioLEDV1Type(&structure->interpRatioLEDPt);
    UnloadmodFlashInterRatioPreflashV1Type(&structure->interpRatioPreflash);
    UnloadmodFlashGainAdjV1Type(&structure->FlashGainAdjust);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixFlashDecV1TypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixFlashDecV1TypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixFlashDecV1TypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixFlashDecV1Type(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


MODFLASHDECV1_NAMESPACE_END
