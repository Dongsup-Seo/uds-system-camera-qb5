////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  video_1_0_0.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "video_1_0_0.h"
#include "parametersetmanager.h"

VIDEO_1_0_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatix_video10TypeClass::chromatix_video10TypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(control_variables);
    PARAMETER_INITIALIZE(control_method);
    PARAMETER_INITIALIZE(chromatix_video10_reserve);
    PARAMETER_INITIALIZE(chromatix_video10_core);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatix_video10TypeClass::chromatix_video10TypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(control_variables);
    PARAMETER_INITIALIZE(control_method);
    PARAMETER_INITIALIZE(chromatix_video10_reserve);
    PARAMETER_INITIALIZE(chromatix_video10_core);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatix_video10TypeClass::~chromatix_video10TypeClass()
{
    Unloadchromatix_video10Type(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatix_video10TypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "video10_sw")) == 0)
    {
        name = "video10_sw";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_video10_reserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadchromatix_video10_reserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10_reserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadchromatix_video10_reserveType_generalStruct(entry, &structure->general, alignment);
    result = result && Loadchromatix_video10_reserveType_fusionStruct(entry, &structure->fusion, alignment);
    result = result && Loadchromatix_video10_reserveType_satStruct(entry, &structure->sat, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_video10_reserveType_generalStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadchromatix_video10_reserveType_generalStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10_reserveType::generalStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->res_param_1, alignment);
    result = result && entry->Read(&structure->res_param_2, alignment);
    result = result && entry->Read(&structure->res_param_3, alignment);
    result = result && entry->Read(&structure->res_param_4, alignment);
    result = result && entry->Read(&structure->res_param_5, alignment);
    result = result && entry->Read(&structure->res_param_6, alignment);
    result = result && Loadchromatix_video10_reserveType_generalStruct_res_lut_param_1_tabStruct(entry, &structure->res_lut_param_1_tab, alignment);
    result = result && Loadchromatix_video10_reserveType_generalStruct_res_lut_param_2_tabStruct(entry, &structure->res_lut_param_2_tab, alignment);
    result = result && Loadchromatix_video10_reserveType_generalStruct_res_lut_param_3_tabStruct(entry, &structure->res_lut_param_3_tab, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_video10_reserveType_generalStruct_res_lut_param_1_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadchromatix_video10_reserveType_generalStruct_res_lut_param_1_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10_reserveType::generalStruct::res_lut_param_1_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->res_lut_param_1, 32, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_video10_reserveType_generalStruct_res_lut_param_2_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadchromatix_video10_reserveType_generalStruct_res_lut_param_2_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10_reserveType::generalStruct::res_lut_param_2_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->res_lut_param_2, 32, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_video10_reserveType_generalStruct_res_lut_param_3_tabStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadchromatix_video10_reserveType_generalStruct_res_lut_param_3_tabStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10_reserveType::generalStruct::res_lut_param_3_tabStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->res_lut_param_3, 16, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_video10_reserveType_fusionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadchromatix_video10_reserveType_fusionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10_reserveType::fusionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->mode, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_video10_reserveType_satStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadchromatix_video10_reserveType_satStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10_reserveType::satStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->sat_enable, alignment);
    result = result && entry->Read(&structure->min_margin_ratio, alignment);
    result = result && entry->Read(&structure->max_margin_ratio, alignment);
    result = result && entry->Read(&structure->dz_for_max_margin_ratio, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load video10_rgn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadvideo10_rgn_dataType(
    ParameterFileSymbolTableEntry* entry,
    video10_rgn_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadvideo10_rgn_dataType_generalStruct(entry, &structure->general, alignment);
    result = result && Loadvideo10_rgn_dataType_fusionStruct(entry, &structure->fusion, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load video10_rgn_dataType_generalStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadvideo10_rgn_dataType_generalStruct(
    ParameterFileSymbolTableEntry* entry,
    video10_rgn_dataType::generalStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->max_vsr, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load video10_rgn_dataType_fusionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadvideo10_rgn_dataType_fusionStruct(
    ParameterFileSymbolTableEntry* entry,
    video10_rgn_dataType::fusionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->image_conf_high_threshold, alignment);
    result = result && entry->Read(&structure->image_conf_low_threshold, alignment);
    result = result && entry->Read(&structure->absolute_motion_threshold, alignment);
    result = result && entry->Read(&structure->absolute_motion_confidence_threshold, alignment);
    result = result && entry->Read(&structure->min_age, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_video10_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadmod_video10_aec_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_video10_aec_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = globalelements::globalelementsClass::Loadtrigger_pt_type_aec(entry, &structure->aec_trigger, alignment);
    result = result && Loadvideo10_rgn_dataType(entry, &structure->video10_rgn_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_video10_pre_scale_ratio_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadmod_video10_pre_scale_ratio_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_video10_pre_scale_ratio_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = ispglobalelements::ispglobalelementsClass::Loadtrigger_pt_type(entry, &structure->pre_scale_ratio_trigger, alignment);
    result = result && Loadmod_video10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct(entry, &structure->pre_scale_ratio_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_video10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadmod_video10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_video10_pre_scale_ratio_dataType::pre_scale_ratio_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_video10_aec_data from symbol table
    {
        result = entry->Read(&structure->mod_video10_aec_dataCount, alignment);
        structure->mod_video10_aec_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_video10_aec_data = PARAMETER_NEW mod_video10_aec_dataType[structure->mod_video10_aec_dataCount];
        }
        if (!result || structure->mod_video10_aec_data == NULL)
        {
            structure->mod_video10_aec_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_video10_aec_dataCount; i++)
        {
            result = Loadmod_video10_aec_dataType(pointerEntry, &structure->mod_video10_aec_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_video10_hdr_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadmod_video10_hdr_aec_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_video10_hdr_aec_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = ispglobalelements::ispglobalelementsClass::Loadtrigger_pt_type_aec_hdr(entry, &structure->hdr_aec_trigger, alignment);
    result = result && Loadmod_video10_hdr_aec_dataType_hdr_aec_dataStruct(entry, &structure->hdr_aec_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_video10_hdr_aec_dataType_hdr_aec_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadmod_video10_hdr_aec_dataType_hdr_aec_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_video10_hdr_aec_dataType::hdr_aec_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_video10_pre_scale_ratio_data from symbol table
    {
        result = entry->Read(&structure->mod_video10_pre_scale_ratio_dataCount, alignment);
        structure->mod_video10_pre_scale_ratio_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_video10_pre_scale_ratio_data = PARAMETER_NEW mod_video10_pre_scale_ratio_dataType[structure->mod_video10_pre_scale_ratio_dataCount];
        }
        if (!result || structure->mod_video10_pre_scale_ratio_data == NULL)
        {
            structure->mod_video10_pre_scale_ratio_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_video10_pre_scale_ratio_dataCount; i++)
        {
            result = Loadmod_video10_pre_scale_ratio_dataType(pointerEntry, &structure->mod_video10_pre_scale_ratio_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_video10_lens_zoom_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadmod_video10_lens_zoom_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_video10_lens_zoom_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = ispglobalelements::ispglobalelementsClass::Loadtrigger_pt_type(entry, &structure->lens_zoom_trigger, alignment);
    result = result && Loadmod_video10_lens_zoom_dataType_lens_zoom_dataStruct(entry, &structure->lens_zoom_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_video10_lens_zoom_dataType_lens_zoom_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadmod_video10_lens_zoom_dataType_lens_zoom_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_video10_lens_zoom_dataType::lens_zoom_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_video10_hdr_aec_data from symbol table
    {
        result = entry->Read(&structure->mod_video10_hdr_aec_dataCount, alignment);
        structure->mod_video10_hdr_aec_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_video10_hdr_aec_data = PARAMETER_NEW mod_video10_hdr_aec_dataType[structure->mod_video10_hdr_aec_dataCount];
        }
        if (!result || structure->mod_video10_hdr_aec_data == NULL)
        {
            structure->mod_video10_hdr_aec_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_video10_hdr_aec_dataCount; i++)
        {
            result = Loadmod_video10_hdr_aec_dataType(pointerEntry, &structure->mod_video10_hdr_aec_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_video10_lens_posn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadmod_video10_lens_posn_dataType(
    ParameterFileSymbolTableEntry* entry,
    mod_video10_lens_posn_dataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = ispglobalelements::ispglobalelementsClass::Loadtrigger_pt_type(entry, &structure->lens_posn_trigger, alignment);
    result = result && Loadmod_video10_lens_posn_dataType_lens_posn_dataStruct(entry, &structure->lens_posn_data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load mod_video10_lens_posn_dataType_lens_posn_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadmod_video10_lens_posn_dataType_lens_posn_dataStruct(
    ParameterFileSymbolTableEntry* entry,
    mod_video10_lens_posn_dataType::lens_posn_dataStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_video10_lens_zoom_data from symbol table
    {
        result = entry->Read(&structure->mod_video10_lens_zoom_dataCount, alignment);
        structure->mod_video10_lens_zoom_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_video10_lens_zoom_data = PARAMETER_NEW mod_video10_lens_zoom_dataType[structure->mod_video10_lens_zoom_dataCount];
        }
        if (!result || structure->mod_video10_lens_zoom_data == NULL)
        {
            structure->mod_video10_lens_zoom_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_video10_lens_zoom_dataCount; i++)
        {
            result = Loadmod_video10_lens_zoom_dataType(pointerEntry, &structure->mod_video10_lens_zoom_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_video10_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadchromatix_video10_coreType(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10_coreType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array mod_video10_lens_posn_data from symbol table
    {
        result = entry->Read(&structure->mod_video10_lens_posn_dataCount, alignment);
        structure->mod_video10_lens_posn_dataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->mod_video10_lens_posn_data = PARAMETER_NEW mod_video10_lens_posn_dataType[structure->mod_video10_lens_posn_dataCount];
        }
        if (!result || structure->mod_video10_lens_posn_data == NULL)
        {
            structure->mod_video10_lens_posn_dataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->mod_video10_lens_posn_dataCount; i++)
        {
            result = Loadmod_video10_lens_posn_dataType(pointerEntry, &structure->mod_video10_lens_posn_data[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_video10Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadchromatix_video10Type(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && Loadcontrol_variablesStruct(entry, &structure->control_variables, alignment);
    result = result && Loadcontrol_methodStruct(entry, &structure->control_method, alignment);
    result = result && Loadchromatix_video10_reserveType(entry, &structure->chromatix_video10_reserve, alignment);
    result = result && Loadchromatix_video10_coreType(entry, &structure->chromatix_video10_core, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10Type::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10Type::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load control_variablesStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadcontrol_variablesStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10Type::control_variablesStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 5; i++)
    {
        structure->control_var_type[i] = (chromatix_video10Type::control_variablesStruct::control_var_typeEnum)entry->ReadEnum(&result, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load control_methodStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_video10TypeClass::Loadcontrol_methodStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_video10Type::control_methodStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->aec_exp_control = (ispglobalelements::tuning_control_aec_type)entry->ReadEnum(&result, alignment);
    structure->aec_hdr_control = (ispglobalelements::tuning_control_aec_hdr_type)entry->ReadEnum(&result, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_video10_pre_scale_ratio_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_video10TypeClass::Unloadmod_video10_pre_scale_ratio_dataType(
    mod_video10_pre_scale_ratio_dataType* structure)
{
    Unloadmod_video10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct(&structure->pre_scale_ratio_data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_video10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_video10TypeClass::Unloadmod_video10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct(
    mod_video10_pre_scale_ratio_dataType::pre_scale_ratio_dataStruct* structure)
{
    PARAMETER_DELETE[] structure->mod_video10_aec_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_video10_hdr_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_video10TypeClass::Unloadmod_video10_hdr_aec_dataType(
    mod_video10_hdr_aec_dataType* structure)
{
    Unloadmod_video10_hdr_aec_dataType_hdr_aec_dataStruct(&structure->hdr_aec_data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_video10_hdr_aec_dataType_hdr_aec_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_video10TypeClass::Unloadmod_video10_hdr_aec_dataType_hdr_aec_dataStruct(
    mod_video10_hdr_aec_dataType::hdr_aec_dataStruct* structure)
{
    for (UINT32 i = 0; i < structure->mod_video10_pre_scale_ratio_dataCount; i++)
    {
        Unloadmod_video10_pre_scale_ratio_dataType(&structure->mod_video10_pre_scale_ratio_data[i]);
    }
    PARAMETER_DELETE[] structure->mod_video10_pre_scale_ratio_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_video10_lens_zoom_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_video10TypeClass::Unloadmod_video10_lens_zoom_dataType(
    mod_video10_lens_zoom_dataType* structure)
{
    Unloadmod_video10_lens_zoom_dataType_lens_zoom_dataStruct(&structure->lens_zoom_data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_video10_lens_zoom_dataType_lens_zoom_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_video10TypeClass::Unloadmod_video10_lens_zoom_dataType_lens_zoom_dataStruct(
    mod_video10_lens_zoom_dataType::lens_zoom_dataStruct* structure)
{
    for (UINT32 i = 0; i < structure->mod_video10_hdr_aec_dataCount; i++)
    {
        Unloadmod_video10_hdr_aec_dataType(&structure->mod_video10_hdr_aec_data[i]);
    }
    PARAMETER_DELETE[] structure->mod_video10_hdr_aec_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_video10_lens_posn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_video10TypeClass::Unloadmod_video10_lens_posn_dataType(
    mod_video10_lens_posn_dataType* structure)
{
    Unloadmod_video10_lens_posn_dataType_lens_posn_dataStruct(&structure->lens_posn_data);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload mod_video10_lens_posn_dataType_lens_posn_dataStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_video10TypeClass::Unloadmod_video10_lens_posn_dataType_lens_posn_dataStruct(
    mod_video10_lens_posn_dataType::lens_posn_dataStruct* structure)
{
    for (UINT32 i = 0; i < structure->mod_video10_lens_zoom_dataCount; i++)
    {
        Unloadmod_video10_lens_zoom_dataType(&structure->mod_video10_lens_zoom_data[i]);
    }
    PARAMETER_DELETE[] structure->mod_video10_lens_zoom_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatix_video10_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_video10TypeClass::Unloadchromatix_video10_coreType(
    chromatix_video10_coreType* structure)
{
    for (UINT32 i = 0; i < structure->mod_video10_lens_posn_dataCount; i++)
    {
        Unloadmod_video10_lens_posn_dataType(&structure->mod_video10_lens_posn_data[i]);
    }
    PARAMETER_DELETE[] structure->mod_video10_lens_posn_data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatix_video10Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_video10TypeClass::Unloadchromatix_video10Type(
    chromatix_video10Type* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    Unloadchromatix_video10_coreType(&structure->chromatix_video10_core);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_video10TypeClass::Unloadparameter_versionStruct(
    chromatix_video10Type::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatix_video10TypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatix_video10TypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatix_video10TypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && Loadchromatix_video10Type(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


VIDEO_1_0_0_NAMESPACE_END
