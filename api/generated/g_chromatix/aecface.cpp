////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecface.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "aecface.h"
#include "parametersetmanager.h"

AECFACE_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECFaceTypeClass::AECFaceTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(faceMtr);
    PARAMETER_INITIALIZE(faceConv);
    PARAMETER_INITIALIZE(statsROIProcess);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECFaceTypeClass::AECFaceTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(faceMtr);
    PARAMETER_INITIALIZE(faceConv);
    PARAMETER_INITIALIZE(statsROIProcess);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECFaceTypeClass::~AECFaceTypeClass()
{
    UnloadAECFaceType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* AECFaceTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "Face")) == 0)
    {
        name = "Face";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FaceConvergenceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECFaceTypeClass::LoadFaceConvergenceType(
    ParameterFileSymbolTableEntry* entry,
    FaceConvergenceType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->convSpeedAdjRatio, alignment);
    result = result && entry->Read(&structure->speedAdjDelayTimeEnter, alignment);
    result = result && entry->Read(&structure->speedAdjDelayTimeExit, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FaceMeteringType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECFaceTypeClass::LoadFaceMeteringType(
    ParameterFileSymbolTableEntry* entry,
    FaceMeteringType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableFaceROI, alignment);
    result = result && entry->Read(&structure->weightTemporalFilter, alignment);
    result = result && entry->Read(&structure->centerWeightStrength, alignment);
    result = result && entry->Read(&structure->enableLuxFaceTarget, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadLuxLumaTargetType(entry, &structure->luxFaceLumaTarget, alignment);
    result = result && entry->Read(&structure->statsUpdateDelayTimeEnter, alignment);
    result = result && entry->Read(&structure->statsUpdateDelayTimeExit, alignment);
    result = result && entry->Read(&structure->enableEtrColor, alignment);
    result = result && entry->Read(&structure->enableBackLitComp, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->backlitWeighttAdjSettings, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->thresBackLitLumaRatio, alignment);
    result = result && LoadFaceMeteringType_SensorHDRFaceMeteringTypeStruct(entry, &structure->SensorHDRFaceMeteringType, alignment);
    result = result && entry->Read(&structure->enableHistLumaTargetSuppression, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->faceWeight, alignment);
    result = result && LoadFaceMeteringType_faceLumaWeightLuxIndexTriggerStruct(entry, &structure->faceLumaWeightLuxIndexTrigger, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->faceSize, alignment);
    result = result && LoadFaceMeteringType_faceSizeWeightLuxIndexTriggerStruct(entry, &structure->faceSizeWeightLuxIndexTrigger, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FaceMeteringType_SensorHDRFaceMeteringTypeStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECFaceTypeClass::LoadFaceMeteringType_SensorHDRFaceMeteringTypeStruct(
    ParameterFileSymbolTableEntry* entry,
    FaceMeteringType::SensorHDRFaceMeteringTypeStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->FaceROIFactor, alignment);
    result = result && entry->Read(&structure->enableFrontLitComp, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->frontlitWeighttAdjSettings, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->thresFrontLitLumaRatio, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FaceMeteringType_faceLumaWeightLuxIndexTriggerStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECFaceTypeClass::LoadFaceMeteringType_faceLumaWeightLuxIndexTriggerStruct(
    ParameterFileSymbolTableEntry* entry,
    FaceMeteringType::faceLumaWeightLuxIndexTriggerStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableFaceLumaTrigger, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadLuxFaceWeightType(entry, &structure->LuxFaceLumaWeight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FaceMeteringType_faceSizeWeightLuxIndexTriggerStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECFaceTypeClass::LoadFaceMeteringType_faceSizeWeightLuxIndexTriggerStruct(
    ParameterFileSymbolTableEntry* entry,
    FaceMeteringType::faceSizeWeightLuxIndexTriggerStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableFaceSizeTrigger, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadLuxFaceWeightType(entry, &structure->LuxFaceSizeWeight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECFaceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECFaceTypeClass::LoadAECFaceType(
    ParameterFileSymbolTableEntry* entry,
    AECFaceType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && LoadFaceMeteringType(entry, &structure->faceMtr, alignment);
    result = result && LoadFaceConvergenceType(entry, &structure->faceConv, alignment);
    result = result && LoadstatsROIProcessStruct(entry, &structure->statsROIProcess, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECFaceTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECFaceType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECFaceTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECFaceType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load statsROIProcessStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECFaceTypeClass::LoadstatsROIProcessStruct(
    ParameterFileSymbolTableEntry* entry,
    AECFaceType::statsROIProcessStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->statsROIProcessEnable, alignment);
    result = result && statsroipriority::statsroipriorityClass::LoadchromatixStatsROIPriorityType(entry, &structure->statsROIPriority, alignment);
    result = result && statsroidifference::statsroidifferenceClass::LoadchromatixStatsROIDifferenceType(entry, &structure->statsROIStable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload FaceMeteringType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECFaceTypeClass::UnloadFaceMeteringType(
    FaceMeteringType* structure)
{
    aecglobalelements::aecglobalelementsClass::UnloadLuxLumaTargetType(&structure->luxFaceLumaTarget);
    UnloadFaceMeteringType_faceLumaWeightLuxIndexTriggerStruct(&structure->faceLumaWeightLuxIndexTrigger);
    UnloadFaceMeteringType_faceSizeWeightLuxIndexTriggerStruct(&structure->faceSizeWeightLuxIndexTrigger);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload FaceMeteringType_faceLumaWeightLuxIndexTriggerStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECFaceTypeClass::UnloadFaceMeteringType_faceLumaWeightLuxIndexTriggerStruct(
    FaceMeteringType::faceLumaWeightLuxIndexTriggerStruct* structure)
{
    aecglobalelements::aecglobalelementsClass::UnloadLuxFaceWeightType(&structure->LuxFaceLumaWeight);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload FaceMeteringType_faceSizeWeightLuxIndexTriggerStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECFaceTypeClass::UnloadFaceMeteringType_faceSizeWeightLuxIndexTriggerStruct(
    FaceMeteringType::faceSizeWeightLuxIndexTriggerStruct* structure)
{
    aecglobalelements::aecglobalelementsClass::UnloadLuxFaceWeightType(&structure->LuxFaceSizeWeight);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECFaceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECFaceTypeClass::UnloadAECFaceType(
    AECFaceType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadFaceMeteringType(&structure->faceMtr);
    UnloadstatsROIProcessStruct(&structure->statsROIProcess);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECFaceTypeClass::Unloadparameter_versionStruct(
    AECFaceType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload statsROIProcessStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECFaceTypeClass::UnloadstatsROIProcessStruct(
    AECFaceType::statsROIProcessStruct* structure)
{
    statsroipriority::statsroipriorityClass::UnloadchromatixStatsROIPriorityType(&structure->statsROIPriority);
    statsroidifference::statsroidifferenceClass::UnloadchromatixStatsROIDifferenceType(&structure->statsROIStable);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* AECFaceTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    AECFaceTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW AECFaceTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadAECFaceType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AECFACE_NAMESPACE_END
