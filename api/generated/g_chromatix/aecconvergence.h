////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecconvergence.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AECCONVERGENCE_H
#define AECCONVERGENCE_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "globalelements.h"
#include "aecglobalelements.h"

#define AECCONVERGENCE_NAMESPACE_BEGIN namespace aecConvergence {
#define AECCONVERGENCE_NAMESPACE_END }

AECCONVERGENCE_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// BrightRatioStrengthType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct BrightRatioStrengthType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// brightRatioAdjStrength
    ///
    /// Tuning Level:  often_tune
    /// Description:   Strength of speed adjustment when there are saturated regions
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT brightRatioAdjStrength;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// BrightAdjustmentType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct BrightAdjustmentType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ///
    /// Description:   saturation ratio start and end values that define trigger region
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType         zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                   zoneDataCount;
    UINT32                   zoneDataID;
    BrightRatioStrengthType* zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DarkRatioStrengthType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DarkRatioStrengthType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// darkRatioAdjStrength
    ///
    /// Tuning Level:  often_tune
    /// Description:   Strength of speed adjustment when there are dark regions
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT darkRatioAdjStrength;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DarkAdjustmentType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DarkAdjustmentType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ///
    /// Description:   saturation ratio start and end values that define trigger region
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType       zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                 zoneDataCount;
    UINT32                 zoneDataID;
    DarkRatioStrengthType* zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// BrightDarkConvAdjType
///
/// Description:   BrightDark convergence speeds up when there is extreme saturated or dark Regions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct BrightDarkConvAdjType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableBrightDarkConvergence
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable flag for BrightDark convergence when there are extreme saturated or dark areas
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                  enableBrightDarkConvergence;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// darkAdjustment - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                darkAdjustmentCount;
    UINT32                darkAdjustmentID;
    DarkAdjustmentType*   darkAdjustment;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// brightAdjustment - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                brightAdjustmentCount;
    UINT32                brightAdjustmentID;
    BrightAdjustmentType* brightAdjustment;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// PredictiveSaturationZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct PredictiveSaturationZoneDataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stepSize
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType stepSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// predictiveFactor
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   controls size of predictive step, capped by maxGain
    /// Type:          float
    /// Default Value: 0.9
    /// Range:         [0.0,32.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        predictiveFactor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// decay
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   How fast the predictive gain fades out. Small value means fast decay
    /// Type:          float
    /// Default Value: 0.5
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        decay;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// PredictiveSaturationZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct PredictiveSaturationZoneType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ///
    /// Description:   saturation ratio start and end values that define trigger region
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType                 zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData
    ///
    /// Description:   Triggered data based on saturation level
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PredictiveSaturationZoneDataType zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// PredictiveGainZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct PredictiveGainZoneType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ///
    /// Description:   lux level start and end values that define trigger region
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType              zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData - Array
    ///
    /// Description:   Triggered data: second trigger based on saturation
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                        zoneDataCount;
    UINT32                        zoneDataID;
    PredictiveSaturationZoneType* zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// PredictiveConvType
///
/// Description:   Predictive convergence speeds up bright to dark convergence
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct PredictiveConvType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enablePredictiveConvergence
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable predictive convergence when there are saturated areas
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                    enablePredictiveConvergence;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FPSThreshold
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   min fps threshold to enable predictive convergence
    /// Type:          float
    /// Default Value: 12.0
    /// Range:         [1.0,240.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                   FPSThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// disableWhenDRC
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   disable predictive convergence feature if short/safe/long exposures diverge
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                    disableWhenDRC;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxGain
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   maximum amount of predictive gain allowed
    /// Type:          float
    /// Default Value: 6.0
    /// Range:         [1.0,32.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                   maxGain;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// predictiveTrigger - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                  predictiveTriggerCount;
    UINT32                  predictiveTriggerID;
    PredictiveGainZoneType* predictiveTrigger;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FastConvType
///
/// Description:   Fast algorithm converges by measuring the delta to exposure target and adjusting to take into account
///                system delay.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FastConvType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tolMultUnitStepSize
    ///
    /// Tuning Level:  often_tune
    /// Description:   Exposure index tolerance is tolMultUnitStepSize * unitStepSize; exposure index range within which AEC
    ///                will not adjust
    /// Type:          int
    /// Range:         [1,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                 tolMultUnitStepSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// frameSkipMethod
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specifies which type of frame skip is desired: SmoothNoSkip for smooth convergence, SkipOne if there are
    ///                synchronization concerns, SkipSystemLatency if speed is preferred to smoothness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::ConvFrameSkipType     frameSkipMethod;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// aggressiveness
    ///
    /// Tuning Level:  often_tune
    /// Description:   Controls convergence speed; 0.0 is slowest and 1.0 is fastest
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                 aggressiveness;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableBrightDarkSpeedAdj
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable adjusting convergence speed when there are saturated regions
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                  enableBrightDarkSpeedAdj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// darkRatioAdjStrength
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Strength of speed adjustment when there are dark clipped regions
    /// Type:          float
    /// Range:         [0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                 darkRatioAdjStrength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// brightRatioAdjStrength
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Strength of speed adjustment when there are dark clipped regions
    /// Type:          float
    /// Range:         [0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                 brightRatioAdjStrength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresDarkExpIndexDelta
    ///
    /// Tuning Level:  never_tune
    /// Description:   When image is dark and absolute index target delta is larger than this absolute threshold we will adjust
    ///                convergence speed
    /// Type:          float
    /// Range:         [40,80]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                 thresDarkExpIndexDelta;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresBrightExpIndexDelta
    ///
    /// Tuning Level:  never_tune
    /// Description:   When image is bright and absolute index target delta is larger than this absolute threshold we will
    ///                adjust convergence speed
    /// Type:          float
    /// Range:         [10,30]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                 thresBrightExpIndexDelta;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ADRCConvSpeed
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Convergence speed for short and long exposures. Smaller value yields slower convergence.
    /// Type:          float
    /// Range:         [0.0,0.5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                 ADRCConvSpeed;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// predictiveConvergence
    ///
    /// Description:   Predictive convergence speeds up bright to dark convergence
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PredictiveConvType    predictiveConvergence;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// brightDarkConvAdj
    ///
    /// Description:   BrightDark convergence speeds up when there is extreme saturated or dark Regions
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BrightDarkConvAdjType brightDarkConvAdj;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// TorchConvergenceType
///
/// Description:   Torch convergence allows faster convergence when torch event happens (covers either or both On->Off and
///                Off->On transitions)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct TorchConvergenceType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableTorchOffOn
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable torch convergence when torch status changes from OFF to ON
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL         enableTorchOffOn;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableTorchOnOff
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable torch convergence when torch status changes from ON to OFF
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL         enableTorchOnOff;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minFrameCount
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   minimum number of frames algorithm will be engaged. Designed to wait for stats to reflect LED status
    ///                change
    /// Type:          int
    /// Default Value: 4
    /// Range:         [1,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32        minFrameCount;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// conv
    ///
    /// Description:   Fast algorithm converges by measuring the delta to exposure target and adjusting to take into account
    ///                system delay.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FastConvType conv;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SlowConvHoldTimeType
///
/// Description:   These parameters control how long the algorithm will hold off adjusting in the presence of stats changes
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SlowConvHoldTimeType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableHoldTime
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable holding off exposure adjustments when motion and exposure changes are small
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL         enableHoldTime;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresAbsExpDelta
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Range within which hold time is adjusted based on exposure deviation from target. Below this range: hold
    ///                time is adjusted by expDeltaBasedHTAdjFactor.start; above this range hold time is adjusted by
    ///                expDeltaBasedHTAdjFactor.end
    /// Range:         [2.0,6.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType thresAbsExpDelta;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// expDeltaBasedHTAdjFactor
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Exposure-based hold time adjustment factor range, start needs to be larger than end!
    /// Range:         [1.0,0.3]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType expDeltaBasedHTAdjFactor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tolAdjFactor
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Hold time is not allowed if exposure index absolute delta from target is larger than tolerance times this
    ///                threshold
    /// Type:          int
    /// Range:         [1,4]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32        tolAdjFactor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// holdTimeEnterDelay
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The amount of time AEC needs to be stable before holding time gets activated
    /// Type:          float
    /// Range:         [1.0,10.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        holdTimeEnterDelay;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxHoldTime
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Maximum amount of time AEC will hold off exposure adjustments when large disturbance is measured
    /// Type:          float
    /// Range:         [0,3]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT        maxHoldTime;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableGyroBasedHT
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable using gyro to determine amount of disturbance
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL         enableGyroBasedHT;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresGyroMagnitude
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Range within which hold time is adjusted based on gyro magnitude. Amount of adjustment is controlled by
    ///                gyroBasedHTAdjFactor
    /// Range:         [0.1,10.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType thresGyroMagnitude;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gyroBasedHTAdjFactor
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Gyro-based hold time adjustment factor range, start needs to be larger than end!
    /// Range:         [1.0,0.3]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType gyroBasedHTAdjFactor;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SlowConvType
///
/// Description:   Slow algorithm converges smoothly by using exposure index steps the size of which increases or decreases
///                gracefully at the expense of convergence speed
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SlowConvType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tolMultUnitStepSize
    ///
    /// Tuning Level:  often_tune
    /// Description:   Exposure index tolerance is tolMultUnitStepSize * unitStepSize; exposure index range within which AEC
    ///                will not adjust
    /// Type:          int
    /// Range:         [1,5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                tolMultUnitStepSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// frameSkipMethod
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specifies which type of frame skip is desired: SmoothNoSkip for smooth convergence, SkipOne if there are
    ///                sync issues. Slow convergence does not implement SkipSystemLatency
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::ConvFrameSkipType    frameSkipMethod;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stepFactorWhenFrameSkipEnabled
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Increase in step size when skip is enabled
    /// Type:          float
    /// Range:         [1.5,2.5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                stepFactorWhenFrameSkipEnabled;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// convSpeed
    ///
    /// Tuning Level:  often_tune
    /// Description:   Controls convergence speed; larger value will result in larger step sizes and therefore faster
    ///                convergence
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                convSpeed;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// refFrameRate
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Reference frame rate at which the tuning settings were computed
    /// Type:          float
    /// Range:         [15.0,120.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                refFrameRate;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stepRegular
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Range of step sizes for slow convergence when there are no dark or bright regions. Final step size is
    ///                interpolated based on convSpeed parameter
    /// Range:         [2.0,6.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType         stepRegular;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stepDark
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Range of step sizes for slow convergence when exposure is too dark and there are dark regions. Final step
    ///                size is interpolated based on convSpeed parameter
    /// Range:         [6.0,30.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType         stepDark;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stepBright
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Range of step sizes for slow convergence when exposure is too bright and there are bright regions. Final
    ///                step size is interpolated based on convSpeed parameter
    /// Range:         [5.0,18.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType         stepBright;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresSlowDownAbsExpIndexDeltaDark
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Range of absolute exposure delta from target whithin which algorithm step size will be decreased to
    ///                smoothly converge to target. Large value means slower approach. Final step size is interpolated based on
    ///                convSpeed parameter
    /// Range:         [6.0,20.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType         thresSlowDownAbsExpIndexDeltaDark;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresSlowDownAbsExpIndexDeltaBright
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Range of absolute exposure delta from target whithin which algorithm step size will be decreased to
    ///                smoothly converge to target. Large value means slower approach. Final step size is interpolated based on
    ///                convSpeed parameter
    /// Range:         [6.0,20.0]
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType         thresSlowDownAbsExpIndexDeltaBright;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxRawStepAdj
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Slow convergence algorithm is designed to maintain the same convergence speed, regardless of skip and
    ///                frame rate. To that effect, the step size is adjusted by a factor. Parameter maxRawStepAdj controls the
    ///                range of that factor: [1/maxRawStepAdj, maxRawStepAdj]
    /// Type:          float
    /// Range:         [1.0,2.5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                maxRawStepAdj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tolExpIndexDeltaForceAdj
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   If computed step size is zero we will force it to unitStepSize when absolute delta from target is larger
    ///                than this threshold
    /// Type:          float
    /// Range:         [2,4]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                tolExpIndexDeltaForceAdj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresNumBrightRgn
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The minimal ratio of bright regions required for bright step size to be used during convergence
    /// Type:          float
    /// Range:         [0.03,0.1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                thresNumBrightRgn;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresNumDarkRgn
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The minimal ratio of dark regions required for dark step size to be used during convergence
    /// Type:          float
    /// Range:         [0.03,0.2]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                thresNumDarkRgn;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// holdTimeTuning
    ///
    /// Description:   These parameters control how long the algorithm will hold off adjusting in the presence of stats changes
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SlowConvHoldTimeType holdTimeTuning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ADRCConvSpeed
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Convergence speed for short and long exposures. Smaller value yields slower convergence.
    /// Type:          float
    /// Range:         [0.0,0.5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                ADRCConvSpeed;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// predictiveConvergence
    ///
    /// Description:   Predictive convergence speeds up bright to dark convergence
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PredictiveConvType   predictiveConvergence;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECCoreConvergenceType
///
/// Description:   Convergence Module controls how AEC adjusts the exposure in order to reach the desired exposure index
///                target
/// Comments:       Core Convergence Tuning Definition
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECCoreConvergenceType
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// algoSelect
    ///
    /// Tuning Level:  often_tune
    /// Description:   Specifies which algorithm to run in preview state: AECConvSlowConv or AECConvFastConv. Slow is recommeded
    ///                for smooth video capture and Fast for preview
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::AECConvAlgoType      algoSelect;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fastConv
    ///
    /// Description:   Fast algorithm converges by measuring the delta to exposure target and adjusting to take into account
    ///                system delay.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FastConvType         fastConv;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// slowConv
    ///
    /// Description:   Slow algorithm converges smoothly by using exposure index steps the size of which increases or decreases
    ///                gracefully at the expense of convergence speed
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SlowConvType         slowConv;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// unitStepSize
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Base exposure index unit
    /// Type:          float
    /// Range:         [0.1,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                unitStepSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableConvergeGainFirst
    ///
    /// Tuning Level:  often_tune
    /// Description:   Speeds up dark to bright convergence by increasing gain first
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                 enableConvergeGainFirst;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// settledMultiplier
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Multiplies tolerance to obtain settled range. Settled is the range within which AEC is considered very
    ///                close to target. Tolerance is the range within which AEC stops adjusting.
    /// Type:          float
    /// Range:         [1.0,10.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                settledMultiplier;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// torchConv
    ///
    /// Description:   Torch convergence allows faster convergence when torch event happens (covers either or both On->Off and
    ///                Off->On transitions)
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TorchConvergenceType torchConv;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECCoreConvergenceTypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class AECCoreConvergenceTypeClass : public ParameterModule, public AECCoreConvergenceType
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 8;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECCoreConvergenceTypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECCoreConvergenceTypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~AECCoreConvergenceTypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load BrightRatioStrengthType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadBrightRatioStrengthType(
        ParameterFileSymbolTableEntry* entry,
        BrightRatioStrengthType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load BrightAdjustmentType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadBrightAdjustmentType(
        ParameterFileSymbolTableEntry* entry,
        BrightAdjustmentType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load DarkRatioStrengthType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadDarkRatioStrengthType(
        ParameterFileSymbolTableEntry* entry,
        DarkRatioStrengthType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load DarkAdjustmentType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadDarkAdjustmentType(
        ParameterFileSymbolTableEntry* entry,
        DarkAdjustmentType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load BrightDarkConvAdjType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadBrightDarkConvAdjType(
        ParameterFileSymbolTableEntry* entry,
        BrightDarkConvAdjType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load PredictiveSaturationZoneDataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadPredictiveSaturationZoneDataType(
        ParameterFileSymbolTableEntry* entry,
        PredictiveSaturationZoneDataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load PredictiveSaturationZoneType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadPredictiveSaturationZoneType(
        ParameterFileSymbolTableEntry* entry,
        PredictiveSaturationZoneType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load PredictiveGainZoneType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadPredictiveGainZoneType(
        ParameterFileSymbolTableEntry* entry,
        PredictiveGainZoneType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load PredictiveConvType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadPredictiveConvType(
        ParameterFileSymbolTableEntry* entry,
        PredictiveConvType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FastConvType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFastConvType(
        ParameterFileSymbolTableEntry* entry,
        FastConvType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load TorchConvergenceType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadTorchConvergenceType(
        ParameterFileSymbolTableEntry* entry,
        TorchConvergenceType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SlowConvHoldTimeType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSlowConvHoldTimeType(
        ParameterFileSymbolTableEntry* entry,
        SlowConvHoldTimeType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SlowConvType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSlowConvType(
        ParameterFileSymbolTableEntry* entry,
        SlowConvType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECCoreConvergenceType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECCoreConvergenceType(
        ParameterFileSymbolTableEntry* entry,
        AECCoreConvergenceType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECCoreConvergenceType::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECCoreConvergenceType::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload BrightAdjustmentType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadBrightAdjustmentType(
        BrightAdjustmentType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload DarkAdjustmentType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadDarkAdjustmentType(
        DarkAdjustmentType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload BrightDarkConvAdjType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadBrightDarkConvAdjType(
        BrightDarkConvAdjType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload PredictiveGainZoneType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadPredictiveGainZoneType(
        PredictiveGainZoneType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload PredictiveConvType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadPredictiveConvType(
        PredictiveConvType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload FastConvType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadFastConvType(
        FastConvType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload TorchConvergenceType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadTorchConvergenceType(
        TorchConvergenceType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload SlowConvType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadSlowConvType(
        SlowConvType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECCoreConvergenceType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECCoreConvergenceType(
        AECCoreConvergenceType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        AECCoreConvergenceType::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class AECCoreConvergenceTypeClass

AECCONVERGENCE_NAMESPACE_END
#endif // AECCONVERGENCE_H

