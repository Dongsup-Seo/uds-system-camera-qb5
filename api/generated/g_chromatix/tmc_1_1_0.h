////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  tmc_1_1_0.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef TMC_1_1_0_H
#define TMC_1_1_0_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "ispglobalelements.h"

#define TMC_1_1_0_NAMESPACE_BEGIN namespace tmc_1_1_0 {
#define TMC_1_1_0_NAMESPACE_END }

TMC_1_1_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// tmc11_rgn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct tmc11_rgn_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gtm_percentage
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Percentage of tone mapping curve distributed to GTM
    /// Type:          float
    /// Default Value: 0.2
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         sum of all percentages should be 1.0
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  gtm_percentage;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ltm_percentage
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Percentage of tone mapping curve distributed to LTM
    /// Type:          float
    /// Default Value: 0.8
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         sum of all percentages should be 1.0
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  ltm_percentage;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dark_boost_ratio
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Percentage of dark-boosting gain to be applied
    /// Type:          float
    /// Default Value: 0.0
    /// Range:         [0.0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         more dark_boost_ratio for brighter image
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  dark_boost_ratio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tone_target_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   Tone target after gamma
    /// Type:          float
    /// Default Value: 0 0.3 0.55 0.7 1.0
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Length:        5
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct tone_target_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// tone_target - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 0 0.3 0.55 0.7 1.0
        /// Length:        5
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT tone_target[5];
    } tone_target_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tone_anchors_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   fixed knee points before gamma
    /// Type:          float
    /// Default Value: 0 0.1 0.2 0.7 1.0
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Length:        5
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct tone_anchors_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// tone_anchors - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0 0.1 0.2 0.7 1.0
        /// Length:        5
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT tone_anchors[5];
    } tone_anchors_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tone_bright_adj
    ///
    /// Tuning Level:  often_tune
    /// Description:   tone adjustment for bright-dominant scene
    /// Type:          float
    /// Default Value: 2.0
    /// Range:         [0,4.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  tone_bright_adj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tone_dark_adj
    ///
    /// Tuning Level:  often_tune
    /// Description:   tone adjustment for dark-dominant scene
    /// Type:          float
    /// Default Value: 4.0
    /// Range:         [0,4.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  tone_dark_adj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stretch_bright_str
    ///
    /// Tuning Level:  never_tune
    /// Description:   Stretch bright part for global tone adjustment
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  stretch_bright_str;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stretch_dark_str
    ///
    /// Tuning Level:  never_tune
    /// Description:   Stretch dark part for global tone adjustment
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  stretch_dark_str;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hist_supr_range_start
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The percentage start for bins to be used to calculate bright position
    /// Type:          float
    /// Default Value: 0.2
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         should be smaller than hist_supr_range_end
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  hist_supr_range_start;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hist_supr_range_end
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The percentage end for bins to be used to calculate bright position
    /// Type:          float
    /// Default Value: 1.0
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         should be bigger than hist_supr_range_start
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  hist_supr_range_end;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hist_boost_range_start
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The percentage start for bins to be used to calculate dark position
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         should be smaller than hist_boost_range_end
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  hist_boost_range_start;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hist_boost_range_end
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The percentage end for bins to be used to calculate dark position
    /// Type:          float
    /// Default Value: 0.4
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         should be bigger than hist_boost_range_start
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  hist_boost_range_end;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hist_avg_range_start
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The percentage start for bins to be used to calculate midtone position
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         should be smaller than hist_avg_range_end
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  hist_avg_range_start;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hist_avg_range_end
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The percentage end for bins to be used to calculate midtone position
    /// Type:          float
    /// Default Value: 1.0
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         should be bigger than hist_avg_range_start
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  hist_avg_range_end;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hist_conv_kernel_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Convolution kernel used to smooth bins
    /// Type:          float
    /// Default Value: 1 0 0 0 0
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Length:        5
    /// Conversion:    no conversion needed
    /// Notes:         sum of all coefficients should be 1.0
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct hist_conv_kernel_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// hist_conv_kernel - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 1 0 0 0 0
        /// Length:        5
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT hist_conv_kernel[5];
    } hist_conv_kernel_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hist_clip_slope
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Clip max bin count to avoid over-boosting
    /// Type:          float
    /// Default Value: 16.0
    /// Range:         [0,1023.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  hist_clip_slope;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hist_enhance_clamp
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Max clamping ratio based on histogram
    /// Type:          float
    /// Default Value: 1.5
    /// Range:         [0,4.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  hist_enhance_clamp;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hist_enhance_ratio_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   Histogram enhancing ratio to adjust tone curve by scene
    /// Type:          float
    /// Default Value: 0 0 0 0 0
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Length:        5
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct hist_enhance_ratio_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// hist_enhance_ratio - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 0 0 0 0 0
        /// Length:        5
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT hist_enhance_ratio[5];
    } hist_enhance_ratio_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// contrast_bright_clip
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Global contrast adjustment for bright part
    /// Type:          float
    /// Default Value: 2.0
    /// Range:         [0,4.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  contrast_bright_clip;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// contrast_dark_adj
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Global contrast adjustment for dark part
    /// Type:          float
    /// Default Value: 1.3
    /// Range:         [0,4.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  contrast_dark_adj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// contrast_he_bright
    ///
    /// Tuning Level:  often_tune
    /// Description:   Global HE contrast weight for bright part
    /// Type:          float
    /// Default Value: 0.4
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  contrast_he_bright;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// contrast_he_dark
    ///
    /// Tuning Level:  often_tune
    /// Description:   Global HE contrast weight for dark part
    /// Type:          float
    /// Default Value: 0.4
    /// Range:         [0,1.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  contrast_he_dark;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// core_rsv_para1
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   none
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  core_rsv_para1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// core_rsv_para2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   none
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  core_rsv_para2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// core_rsv_para3
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   none
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  core_rsv_para3;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// core_rsv_para4
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   none
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  core_rsv_para4;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// core_rsv_para5
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   none
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                  core_rsv_para5;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_tmc11_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_tmc11_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::trigger_pt_type_aec aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tmc11_rgn_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    tmc11_rgn_dataType  tmc11_rgn_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_tmc11_hdr_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_tmc11_hdr_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type_aec_hdr hdr_aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct hdr_aec_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_tmc11_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                  mod_tmc11_aec_dataCount;
        UINT32                  mod_tmc11_aec_dataID;
        mod_tmc11_aec_dataType* mod_tmc11_aec_data;
    } hdr_aec_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_tmc11_drc_gain_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_tmc11_drc_gain_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// drc_gain_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type drc_gain_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// drc_gain_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct drc_gain_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_tmc11_hdr_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                      mod_tmc11_hdr_aec_dataCount;
        UINT32                      mod_tmc11_hdr_aec_dataID;
        mod_tmc11_hdr_aec_dataType* mod_tmc11_hdr_aec_data;
    } drc_gain_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_tmc11_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_tmc11_coreType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mod_tmc11_drc_gain_data - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                       mod_tmc11_drc_gain_dataCount;
    UINT32                       mod_tmc11_drc_gain_dataID;
    mod_tmc11_drc_gain_dataType* mod_tmc11_drc_gain_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_tmc11_reserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_tmc11_reserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// use_gtm
    ///
    /// Tuning Level:  never_tune
    /// Description:   use gtm for tone mapping
    /// Type:          uint
    /// Default Value: 1
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         This is only applicable if chipset has GTM module support
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 use_gtm;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// use_ltm
    ///
    /// Tuning Level:  never_tune
    /// Description:   use ltm for tone mapping
    /// Type:          uint
    /// Default Value: 1
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         This is only applicable if chipset has LTM module support
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 use_ltm;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// curve_model
    ///
    /// Tuning Level:  never_tune
    /// Description:   Curve model used to generate tone mapping model
    /// Type:          uint
    /// Default Value: 3
    /// Range:         [0,7]
    /// Bit Depth:     3uQ0
    /// Conversion:    no conversion needed
    /// Notes:         0: sigmoid; 1: exponential; 2: PCHIP; 3: Bezier; 4-7: others
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 curve_model;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// curve_order
    ///
    /// Tuning Level:  never_tune
    /// Description:   Curve order to describe tone mapping curve
    /// Type:          uint
    /// Default Value: 5
    /// Range:         [0,15]
    /// Bit Depth:     4uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 curve_order;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tone_max_ratio
    ///
    /// Tuning Level:  never_tune
    /// Description:   Max tone ratio TMC support
    /// Type:          float
    /// Default Value: 16
    /// Range:         [0,1023]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  tone_max_ratio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// reserve_rsv_para1
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   none
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  reserve_rsv_para1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// reserve_rsv_para2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   none
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  reserve_rsv_para2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// reserve_rsv_para3
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   none
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  reserve_rsv_para3;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// reserve_rsv_para4
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   none
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  reserve_rsv_para4;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// reserve_rsv_para5
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   none
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  reserve_rsv_para5;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_tmc11Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_tmc11Type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable_section
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct enable_sectionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        globalelements::enable_flag_type tmc_enable;
    } enable_section;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_variables
    ///
    /// Default Value: control_drc_gain, control_exp_time_ratio, control_gain
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_variablesStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// control_var_type - Array
        /// Default Value: control_drc_gain, control_exp_time_ratio, control_gain
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        enum class control_var_typeEnum
        {
            control_lux_idx                   = 0,
            control_gain                      = 1,
            control_drc_gain                  = 2,
            control_exp_time_ratio            = 3,
            control_aec_exp_sensitivity_ratio = 4,
            control_exp_gain_ratio            = 5
        } control_var_type[3];
    } control_variables;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_method
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_methodStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_exp_control
        /// Default Value: control_gain
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_type     aec_exp_control;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_hdr_control
        /// Default Value: control_exp_time_ratio
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_hdr_type aec_hdr_control;
    } control_method;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_tmc11_reserve
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_tmc11_reserveType chromatix_tmc11_reserve;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_tmc11_core
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_tmc11_coreType    chromatix_tmc11_core;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_tmc11TypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatix_tmc11TypeClass : public ParameterModule, public chromatix_tmc11Type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 1;
    static const UINT16 MINOR = 1;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_tmc11TypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_tmc11TypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatix_tmc11TypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load tmc11_rgn_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadtmc11_rgn_dataType(
        ParameterFileSymbolTableEntry* entry,
        tmc11_rgn_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load tmc11_rgn_dataType_tone_target_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadtmc11_rgn_dataType_tone_target_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        tmc11_rgn_dataType::tone_target_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load tmc11_rgn_dataType_tone_anchors_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadtmc11_rgn_dataType_tone_anchors_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        tmc11_rgn_dataType::tone_anchors_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load tmc11_rgn_dataType_hist_conv_kernel_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadtmc11_rgn_dataType_hist_conv_kernel_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        tmc11_rgn_dataType::hist_conv_kernel_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load tmc11_rgn_dataType_hist_enhance_ratio_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadtmc11_rgn_dataType_hist_enhance_ratio_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        tmc11_rgn_dataType::hist_enhance_ratio_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_tmc11_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_tmc11_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_tmc11_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_tmc11_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_tmc11_hdr_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_tmc11_hdr_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_tmc11_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_tmc11_hdr_aec_dataType_hdr_aec_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_tmc11_hdr_aec_dataType::hdr_aec_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_tmc11_drc_gain_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_tmc11_drc_gain_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_tmc11_drc_gain_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_tmc11_drc_gain_dataType_drc_gain_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_tmc11_drc_gain_dataType_drc_gain_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_tmc11_drc_gain_dataType::drc_gain_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_tmc11_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_tmc11_coreType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_tmc11_coreType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_tmc11_reserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_tmc11_reserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_tmc11_reserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_tmc11Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_tmc11Type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_tmc11Type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load enable_sectionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadenable_sectionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_tmc11Type::enable_sectionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_tmc11Type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_tmc11Type::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_variablesStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_variablesStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_tmc11Type::control_variablesStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_methodStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_methodStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_tmc11Type::control_methodStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_tmc11_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_tmc11_hdr_aec_dataType(
        mod_tmc11_hdr_aec_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_tmc11_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_tmc11_hdr_aec_dataType_hdr_aec_dataStruct(
        mod_tmc11_hdr_aec_dataType::hdr_aec_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_tmc11_drc_gain_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_tmc11_drc_gain_dataType(
        mod_tmc11_drc_gain_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_tmc11_drc_gain_dataType_drc_gain_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_tmc11_drc_gain_dataType_drc_gain_dataStruct(
        mod_tmc11_drc_gain_dataType::drc_gain_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_tmc11_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_tmc11_coreType(
        chromatix_tmc11_coreType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_tmc11Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_tmc11Type(
        chromatix_tmc11Type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatix_tmc11Type::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatix_tmc11TypeClass

TMC_1_1_0_NAMESPACE_END
#endif // TMC_1_1_0_H

