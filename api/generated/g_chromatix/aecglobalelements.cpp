////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecglobalelements.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "aecglobalelements.h"
#include "parametersetmanager.h"

AECGLOBALELEMENTS_NAMESPACE_BEGIN


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load LuxLumaTargetZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadLuxLumaTargetZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    LuxLumaTargetZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->lumaTarget, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load TriggerPointType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadTriggerPointType(
    ParameterFileSymbolTableEntry* entry,
    TriggerPointType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->start, alignment);
    result = result && entry->Read(&structure->end, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load LuxLumaTargetZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadLuxLumaTargetZoneType(
    ParameterFileSymbolTableEntry* entry,
    LuxLumaTargetZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadLuxLumaTargetZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load LuxLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadLuxLumaTargetType(
    ParameterFileSymbolTableEntry* entry,
    LuxLumaTargetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array luxLumaTargetZone from symbol table
    {
        result = entry->Read(&structure->luxLumaTargetZoneCount, alignment);
        structure->luxLumaTargetZoneID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->luxLumaTargetZone = PARAMETER_NEW LuxLumaTargetZoneType[structure->luxLumaTargetZoneCount];
        }
        if (!result || structure->luxLumaTargetZone == NULL)
        {
            structure->luxLumaTargetZoneCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->luxLumaTargetZoneCount; i++)
        {
            result = LoadLuxLumaTargetZoneType(pointerEntry, &structure->luxLumaTargetZone[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load StartEndType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadStartEndType(
    ParameterFileSymbolTableEntry* entry,
    StartEndType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->start, alignment);
    result = result && entry->Read(&structure->end, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load LuxFaceWeightZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadLuxFaceWeightZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    LuxFaceWeightZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadStartEndType(entry, &structure->LuxFaceWeight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load LuxFaceWeightZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadLuxFaceWeightZoneType(
    ParameterFileSymbolTableEntry* entry,
    LuxFaceWeightZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadLuxFaceWeightZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load LuxFaceWeightType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadLuxFaceWeightType(
    ParameterFileSymbolTableEntry* entry,
    LuxFaceWeightType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array LuxFaceWeightZone from symbol table
    {
        result = entry->Read(&structure->LuxFaceWeightZoneCount, alignment);
        structure->LuxFaceWeightZoneID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->LuxFaceWeightZone = PARAMETER_NEW LuxFaceWeightZoneType[structure->LuxFaceWeightZoneCount];
        }
        if (!result || structure->LuxFaceWeightZone == NULL)
        {
            structure->LuxFaceWeightZoneCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->LuxFaceWeightZoneCount; i++)
        {
            result = LoadLuxFaceWeightZoneType(pointerEntry, &structure->LuxFaceWeightZone[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load LuxTrackerWeightZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadLuxTrackerWeightZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    LuxTrackerWeightZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadStartEndType(entry, &structure->LuxTrackerWeight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load LuxTrackerWeightZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadLuxTrackerWeightZoneType(
    ParameterFileSymbolTableEntry* entry,
    LuxTrackerWeightZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadLuxTrackerWeightZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load LuxTrackerWeightType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadLuxTrackerWeightType(
    ParameterFileSymbolTableEntry* entry,
    LuxTrackerWeightType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array LuxTrackerWeightZone from symbol table
    {
        result = entry->Read(&structure->LuxTrackerWeightZoneCount, alignment);
        structure->LuxTrackerWeightZoneID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->LuxTrackerWeightZone = PARAMETER_NEW LuxTrackerWeightZoneType[structure->LuxTrackerWeightZoneCount];
        }
        if (!result || structure->LuxTrackerWeightZone == NULL)
        {
            structure->LuxTrackerWeightZoneCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->LuxTrackerWeightZoneCount; i++)
        {
            result = LoadLuxTrackerWeightZoneType(pointerEntry, &structure->LuxTrackerWeightZone[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECIirFltrCfgType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadAECIirFltrCfgType(
    ParameterFileSymbolTableEntry* entry,
    AECIirFltrCfgType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->numOfSamples, alignment);
    result = result && entry->Read(&structure->coeffNumerator, alignment);
    result = result && entry->Read(&structure->coeffDenominator, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECMvavgFltrCfgType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadAECMvavgFltrCfgType(
    ParameterFileSymbolTableEntry* entry,
    AECMvavgFltrCfgType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->numOfSamples, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECMedianFltrCfgType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadAECMedianFltrCfgType(
    ParameterFileSymbolTableEntry* entry,
    AECMedianFltrCfgType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->numOfSamples, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECSensProfileType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadAECSensProfileType(
    ParameterFileSymbolTableEntry* entry,
    AECSensProfileType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->triggerThreshold, alignment);
    result = result && entry->Read(&structure->consecutiveCountThreshold, alignment);
    result = result && entry->Read(&structure->frameToArmed, alignment);
    result = result && LoadAECMedianFltrCfgType(entry, &structure->medianFltrCfg, alignment);
    result = result && LoadAECMvavgFltrCfgType(entry, &structure->mvavgFltrCfg, alignment);
    result = result && LoadAECIirFltrCfgType(entry, &structure->IIRFltrCfg, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECAbsoluteModeCfgType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadAECAbsoluteModeCfgType(
    ParameterFileSymbolTableEntry* entry,
    AECAbsoluteModeCfgType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->baseline, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECValueMonitorType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadAECValueMonitorType(
    ParameterFileSymbolTableEntry* entry,
    AECValueMonitorType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->detectionType = (AECDetectorTypeEnum)entry->ReadEnum(&result, alignment);
    result = result && LoadAECAbsoluteModeCfgType(entry, &structure->absoluteModeCfg, alignment);
    result = result && LoadAECSensProfileType(entry, &structure->sensProfileLow, alignment);
    result = result && LoadAECSensProfileType(entry, &structure->sensProfileMed, alignment);
    result = result && LoadAECSensProfileType(entry, &structure->sensProfileHigh, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load HistTargetAdjustParamType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadHistTargetAdjustParamType(
    ParameterFileSymbolTableEntry* entry,
    HistTargetAdjustParamType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->minTargetAdjRatio, alignment);
    result = result && entry->Read(&structure->maxTargetAdjRatio, alignment);
    result = result && entry->Read(&structure->darkRefLow, alignment);
    result = result && entry->Read(&structure->satRefHigh, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ROIHistAdjZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadROIHistAdjZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    ROIHistAdjZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadStartEndType(entry, &structure->darkLumaRatioRange, alignment);
    result = result && LoadHistTargetAdjustParamType(entry, &structure->darkROIAdjustParams, alignment);
    result = result && LoadStartEndType(entry, &structure->brightLumaRatioRange, alignment);
    result = result && LoadHistTargetAdjustParamType(entry, &structure->brightROIAdjustParams, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ROIHistAdjZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadROIHistAdjZoneType(
    ParameterFileSymbolTableEntry* entry,
    ROIHistAdjZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadROIHistAdjZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FirstFrameBiasType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadFirstFrameBiasType(
    ParameterFileSymbolTableEntry* entry,
    FirstFrameBiasType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableStartUpBias, alignment);
    result = result && entry->Read(&structure->firstFrameStepSizeDarkMax, alignment);
    result = result && LoadStartEndType(entry, &structure->stepSizeBrightAdjRange, alignment);
    result = result && entry->Read(&structure->maxAdjFactor, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load RapidConvType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadRapidConvType(
    ParameterFileSymbolTableEntry* entry,
    RapidConvType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadFirstFrameBiasType(entry, &structure->firstFrameBias, alignment);
    result = result && entry->Read(&structure->startExpIndex, alignment);
    result = result && entry->Read(&structure->tolMultUnitStepSize, alignment);
    result = result && entry->Read(&structure->frameSkipInit, alignment);
    result = result && entry->Read(&structure->frameSkip, alignment);
    result = result && entry->Read(&structure->minSettledCount, alignment);
    result = result && entry->Read(&structure->maxFrameConvTimeOut, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load SwitchCounterType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadSwitchCounterType(
    ParameterFileSymbolTableEntry* entry,
    SwitchCounterType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->type = (AECSwitchCounterEnumType)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->customInteger, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ModuleVersionType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL aecglobalelementsClass::LoadModuleVersionType(
    ParameterFileSymbolTableEntry* entry,
    ModuleVersionType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload LuxLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void aecglobalelementsClass::UnloadLuxLumaTargetType(
    LuxLumaTargetType* structure)
{
    PARAMETER_DELETE[] structure->luxLumaTargetZone;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload LuxFaceWeightType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void aecglobalelementsClass::UnloadLuxFaceWeightType(
    LuxFaceWeightType* structure)
{
    PARAMETER_DELETE[] structure->LuxFaceWeightZone;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload LuxTrackerWeightType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void aecglobalelementsClass::UnloadLuxTrackerWeightType(
    LuxTrackerWeightType* structure)
{
    PARAMETER_DELETE[] structure->LuxTrackerWeightZone;
}

AECGLOBALELEMENTS_NAMESPACE_END
