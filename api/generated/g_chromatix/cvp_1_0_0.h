////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  cvp_1_0_0.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CVP_1_0_0_H
#define CVP_1_0_0_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "ispglobalelements.h"

#define CVP_1_0_0_NAMESPACE_BEGIN namespace cvp_1_0_0 {
#define CVP_1_0_0_NAMESPACE_END }

CVP_1_0_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_cvp10_reserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_cvp10_reserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// image_based_alignment_enable
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable image based registration.
    /// Type:          uint
    /// Default Value: 1
    /// Range:         [0, 1]
    /// Bit Depth:     1u
    /// Conversion:    No Conversion needed
    /// Notes:         Constant: no dynamic configuration even when control variable change.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 image_based_alignment_enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// descriptor_lpf
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable 5x5 filtering before calculating descriptor.
    /// Type:          uint
    /// Default Value: 1
    /// Range:         [0, 1]
    /// Bit Depth:     1u
    /// Conversion:    No Conversion needed
    /// Notes:         Hide in GUI ! Constant: no dynamic configuration even when control variable change.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 descriptor_lpf;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fpx_score_shift
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Feature score shift value. Camera SW translate chromatix range to FW range. 0: shift by 0, 1: shift by 4
    ///                ,2: shift by 8, 3 shift by 12.
    /// Type:          uint
    /// Default Value: 3
    /// Range:         [0, 3]
    /// Bit Depth:     2u
    /// Conversion:    No Conversion needed
    /// Notes:         Hide in GUI ! Constant: no dynamic configuration even when control variable change.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 fpx_score_shift;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// inlier_track_enable
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enabling inlier tracking, Improve decistion's coherency between frames.
    /// Type:          uint
    /// Default Value: 1
    /// Range:         [0, 1]
    /// Bit Depth:     1u
    /// Conversion:    No Conversion needed
    /// Notes:         Hide in GUI ! Constant: no dynamic configuration even when control variable change.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 inlier_track_enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// transform_model
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Defines which transform model to use during transform estimation stage (0=projective, 1=affine, 2=rigid,
    ///                3=rigid with post-processing).
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0, 3]
    /// Bit Depth:     2u
    /// Conversion:    No Conversion needed
    /// Notes:         Hide in GUI ! Constant: no dynamic configuration even when control variable change.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 transform_model;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// cvp10_rgn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct cvp10_rgn_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// robustness_max_allowed_ncc
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Maximum allowed NCC If NCC exceeds this threshold the block will be marked invalid (probably ME problem
    ///                due to occlusion, too fast motion, etc).
    /// Type:          uint
    /// Default Value: 800
    /// Range:         [0, 2047]
    /// Bit Depth:     11u
    /// Conversion:    No Conversion needed
    /// Notes:         Linear interpolation.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           robustness_max_allowed_ncc;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// robustness_min_allowed_tar_var
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Minimum allowed tar variance value. If below this value (non-informative block) - the block will be
    ///                marked invalid.
    /// Type:          uint
    /// Default Value: 10
    /// Range:         [0, 65535]
    /// Bit Depth:     16u
    /// Conversion:    No Conversion needed
    /// Notes:         Linear interpolation.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           robustness_min_allowed_tar_var;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// robustness_meaningful_ncc_diff
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Locations with NCC difference below this threshold are considered to have exactly the same similarity
    ///                measure.
    /// Type:          uint
    /// Default Value: 5
    /// Range:         [0, 2047]
    /// Bit Depth:     11u
    /// Conversion:    No Conversion needed
    /// Notes:         Linear interpolation.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           robustness_meaningful_ncc_diff;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// robustness_measure_dist_map_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Provides a requirement on minimal normalized difference of SADs at distance 1-8 pixels (for big distances
    ///                the expected differences should be big). Default values: 0, 128, 128, 128, 128, 128, 128, 128 (no penalty
    ///                to single pixel distance; afterwards same penalty for all other distances).
    /// Default Value: 0, 128, 128, 128, 128, 128, 128, 128
    /// Range:         [0, 511]
    /// Bit Depth:     9u
    /// Length:        8
    /// Conversion:    No Conversion needed
    /// Notes:         Linear interpolation.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct robustness_measure_dist_map_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// robustness_measure_dist_map - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0, 128, 128, 128, 128, 128, 128, 128
        /// Length:        8
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT robustness_measure_dist_map[8];
    } robustness_measure_dist_map_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fpx_threshold
    ///
    /// Tuning Level:  often_tune
    /// Description:   Corner with Harris measure value lower than this value will be ignored, this parameter is related to
    ///                reg_flow_ hcd_cm_shift.
    /// Type:          uint
    /// Default Value: 3
    /// Range:         [0, 65535]
    /// Bit Depth:     16u
    /// Conversion:    No Conversion needed
    /// Notes:         Linear Floor Interpolation: Do Linear Interpolation and then Floor.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           fpx_threshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// desc_match_threshold
    ///
    /// Tuning Level:  often_tune
    /// Description:   Hamming distance between two descriptors below which the blocks are considered as match. Camera SW Should
    ///                force the number to be module 4.
    /// Type:          uint
    /// Default Value: 52
    /// Range:         [32, 92]
    /// Bit Depth:     8u
    /// Conversion:    No Conversion needed
    /// Notes:         Linear Floor Interpolation: Do Linear Interpolation and then Floor.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           desc_match_threshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable_transform_confidence
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Whether to calculate and apply transform confidence (based on coverage of the frame by calculated valid
    ///                MVs). Frames with higher coverage get higher confidence.
    /// Type:          uint
    /// Default Value: 1
    /// Range:         [0, 1]
    /// Bit Depth:     1u
    /// Conversion:    No Conversion needed
    /// Notes:         Linear interpolation.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           enable_transform_confidence;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// transform_confidence_mapping_base
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Defines mapping function from calculated transform confidence to actually used transform confidence. The
    ///                calculated confidence is in the range 0:256 (8 bit fraction). The mapping is: actual confidence =
    ///                transform_confidence_mapping_base when calculated confidence is less than or equal to
    ///                transform_confidence_mapping_c1; 256 when calculated confidence is greater than
    ///                transform_confidence_mapping_c2 and linear interpolation in-between. Not relevant for multi frame flows.
    /// Type:          uint
    /// Default Value: 128
    /// Range:         [0, 255]
    /// Bit Depth:     8u
    /// Conversion:    No Conversion needed
    /// Notes:         Linear interpolation.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           transform_confidence_mapping_base;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// transform_confidence_mapping_c1
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Defines mapping function from calculated transform confidence to actually used transform confidence. The
    ///                calculated confidence is in the range 0:256 (8 bit fraction). The mapping is: actual confidence =
    ///                transform_confidence_mapping_base when calculated confidence is less than or equal to
    ///                transform_confidence_mapping_c1; 256 when calculated confidence is greater than
    ///                transform_confidence_mapping_c2 and linear interpolation in-between. Not relevant for multi frame flows.
    /// Type:          uint
    /// Default Value: 100
    /// Range:         [0, 255]
    /// Bit Depth:     8u, Q7
    /// Conversion:    No Conversion needed
    /// Notes:         Linear interpolation.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           transform_confidence_mapping_c1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// transform_confidence_mapping_c2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Defines mapping function from calculated transform confidence to actually used transform confidence. The
    ///                calculated confidence is in the range 0:256 (8 bit fraction). The mapping is: actual confidence =
    ///                transform_confidence_mapping_base when calculated confidence is less than or equal to
    ///                transform_confidence_mapping_c1; 256 when calculated confidence is greater than
    ///                transform_confidence_mapping_c2 and linear interpolation in-between. Not relevant for multi frame flows.
    /// Type:          uint
    /// Default Value: 240
    /// Range:         [0, 255]
    /// Bit Depth:     8u, Q7
    /// Conversion:    No Conversion needed
    /// Notes:         Linear interpolation.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           transform_confidence_mapping_c2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// transform_confidence_thr_to_force_identity_transform
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   When calculated transform confidence (before mapping) is below this threshold, the transform is ignored
    ///                and replaced by identity transform. Hysteresis is used on this parameter to avoid excessive switching.
    /// Type:          uint
    /// Default Value: 100
    /// Range:         [0, 255]
    /// Bit Depth:     8u
    /// Conversion:    No Conversion needed
    /// Notes:         Linear interpolation.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           transform_confidence_thr_to_force_identity_transform;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// multi_frame_input_resolution
    ///
    /// Tuning Level:  often_tune
    /// Description:   This Parameter is relevant form multi frame flows. The parameter defines the input resolution of the
    ///                alignement process. 0:1440p, 1:1280p, 2:1080p, 3:960p, 4:720p, 5:540p 6:270p. Maximal image width
    ///                supported is 1920. In case input image width is greater than 1920. The biggest resolution in which width
    ///                is less than or equal to 1920 will be chosen.
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0, 6]
    /// Bit Depth:     4u
    /// Conversion:    No Conversion needed
    /// Notes:         Linear Floor Interpolation: Do Linear Interpolation and then Floor.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           multi_frame_input_resolution;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// video_registration_down_scale_ratio
    ///
    /// Tuning Level:  often_tune
    /// Description:   This parameter is relevant to VSR video flow. In order to reduce the noise level, extra down scale is
    ///                performed before registration. The parameter sets the controls the downscale ratio. In case value == 1 no
    ///                downscaling is done before registration.
    /// Type:          float
    /// Default Value: 1.0
    /// Range:         [1, 6]
    /// Bit Depth:     float
    /// Conversion:    No Conversion needed
    /// Notes:         Linear interpolation.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           video_registration_down_scale_ratio;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_cvp10_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_cvp10_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::trigger_pt_type_aec aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// cvp10_rgn_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    cvp10_rgn_dataType  cvp10_rgn_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_cvp10_hdr_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_cvp10_hdr_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type_aec_hdr hdr_aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct hdr_aec_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_cvp10_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                  mod_cvp10_aec_dataCount;
        UINT32                  mod_cvp10_aec_dataID;
        mod_cvp10_aec_dataType* mod_cvp10_aec_data;
    } hdr_aec_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_cvp10_pre_scale_ratio_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_cvp10_pre_scale_ratio_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// pre_scale_ratio_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type      pre_scale_ratio_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// pre_scale_ratio_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct pre_scale_ratio_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_cvp10_hdr_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                      mod_cvp10_hdr_aec_dataCount;
        UINT32                      mod_cvp10_hdr_aec_dataID;
        mod_cvp10_hdr_aec_dataType* mod_cvp10_hdr_aec_data;
    } pre_scale_ratio_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_cvp10_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_cvp10_coreType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mod_cvp10_pre_scale_ratio_data - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                              mod_cvp10_pre_scale_ratio_dataCount;
    UINT32                              mod_cvp10_pre_scale_ratio_dataID;
    mod_cvp10_pre_scale_ratio_dataType* mod_cvp10_pre_scale_ratio_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_cvp10Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_cvp10Type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_variables
    ///
    /// Default Value: control_pre_scale_ratio, control_aec_exp_sensitivity_ratio, control_gain
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_variablesStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// control_var_type - Array
        /// Default Value: control_pre_scale_ratio, control_aec_exp_sensitivity_ratio, control_gain
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        enum class control_var_typeEnum
        {
            control_lux_idx                   = 0,
            control_gain                      = 1,
            control_exp_time_ratio            = 3,
            control_aec_exp_sensitivity_ratio = 4,
            control_pre_scale_ratio           = 14
        } control_var_type[3];
    } control_variables;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_method
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_methodStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_exp_control
        /// Default Value: control_gain
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_type     aec_exp_control;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_hdr_control
        /// Default Value: control_aec_exp_sensitivity_ratio
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_hdr_type aec_hdr_control;
    } control_method;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_cvp10_reserve
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_cvp10_reserveType chromatix_cvp10_reserve;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_cvp10_core
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_cvp10_coreType    chromatix_cvp10_core;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_cvp10TypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatix_cvp10TypeClass : public ParameterModule, public chromatix_cvp10Type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 1;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_cvp10TypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_cvp10TypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatix_cvp10TypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_cvp10_reserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_cvp10_reserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cvp10_reserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load cvp10_rgn_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcvp10_rgn_dataType(
        ParameterFileSymbolTableEntry* entry,
        cvp10_rgn_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load cvp10_rgn_dataType_robustness_measure_dist_map_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcvp10_rgn_dataType_robustness_measure_dist_map_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        cvp10_rgn_dataType::robustness_measure_dist_map_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cvp10_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cvp10_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_cvp10_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cvp10_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cvp10_hdr_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_cvp10_hdr_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cvp10_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cvp10_hdr_aec_dataType_hdr_aec_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_cvp10_hdr_aec_dataType::hdr_aec_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cvp10_pre_scale_ratio_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cvp10_pre_scale_ratio_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_cvp10_pre_scale_ratio_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_cvp10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_cvp10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_cvp10_pre_scale_ratio_dataType::pre_scale_ratio_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_cvp10_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_cvp10_coreType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cvp10_coreType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_cvp10Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_cvp10Type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cvp10Type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cvp10Type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cvp10Type::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_variablesStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_variablesStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cvp10Type::control_variablesStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_methodStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_methodStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_cvp10Type::control_methodStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_cvp10_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_cvp10_hdr_aec_dataType(
        mod_cvp10_hdr_aec_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_cvp10_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_cvp10_hdr_aec_dataType_hdr_aec_dataStruct(
        mod_cvp10_hdr_aec_dataType::hdr_aec_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_cvp10_pre_scale_ratio_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_cvp10_pre_scale_ratio_dataType(
        mod_cvp10_pre_scale_ratio_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_cvp10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_cvp10_pre_scale_ratio_dataType_pre_scale_ratio_dataStruct(
        mod_cvp10_pre_scale_ratio_dataType::pre_scale_ratio_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_cvp10_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_cvp10_coreType(
        chromatix_cvp10_coreType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_cvp10Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_cvp10Type(
        chromatix_cvp10Type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatix_cvp10Type::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatix_cvp10TypeClass

CVP_1_0_0_NAMESPACE_END
#endif // CVP_1_0_0_H

