////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  dsx_1_0_0.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DSX_1_0_0_H
#define DSX_1_0_0_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "ispglobalelements.h"

#define DSX_1_0_0_NAMESPACE_BEGIN namespace dsx_1_0_0 {
#define DSX_1_0_0_NAMESPACE_END }

DSX_1_0_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_dsx10_reserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_dsx10_reserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// param_calc_mode
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Determines how kernel weights and padding weights are calculated:. 0 = run-time calculation by SW using
    ///                ds4 coefficients from DS4 block + ica coefficients from ICA0 block + VSR scale ratio. 1 = use
    ///                precalculated values from *_kernel_weights_* and *_padding_weights_* parameters, directly based on VSR
    ///                scale ratio.
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0, 1]
    /// Bit Depth:     1u
    /// Conversion:    No Conversion needed
    /// Notes:         Hide in GUI ! Constant: no dynamic configuration even when control variable change.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 param_calc_mode;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// dsx10_rgn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct dsx10_rgn_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// luma_kernel_weights_unpacked_horiz_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Horizontal kernel samples for Luma (provided for phases is greater than or equal to 0 starting with
    ///                phase=0; negative phases are reflected symmetrically). The kernel is sampled at 1/32-pixel steps for
    ///                scale ratios is less than or equal to 1/1.5 and at 1/64-pixel steps for scale ratios is greater than
    ///                1/1.5. Constraints: weights for all pixels for a given phase should sum to one.
    /// Default Value: 152, 153, 153, 153, 153, 153, 153, 152, 153, 152, 153, 153, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 151, 152, 151, 152, 152, 152, 152, 151, 151, 151, 151, 151, 151, 151, 150, 150, 150, 149, 149, 148, 148, 147, 147, 146, 145, 144, 143, 142, 140, 139, 137, 136, 134, 132, 130, 128, 126, 124, 121, 119, 117, 115, 113, 111, 109, 106, 105, 103, 101, 99, 98, 96, 95, 94, 93, 92, 91, 91, 91, 91, 91, 92, 93, 94, 96, 97, 99, 101, 102, 104, 106, 108, 110, 113, 115, 116, 118, 120, 122, 123, 125, 126, 127, 127, 128, 128 , 128, 127, 126, 125, 123, 121, 119, 116, 113, 110, 106, 102, 98, 93, 89, 84, 79, 75, 70, 65, 60, 55, 50, 45, 40, 35, 31, 26, 22, 18, 14, 11, 8, 5, 2, 0, -2, -3, -5, -6, -7, -8, -8, -9, -9, -9, -9, -9, -9, -9, -8, -8, -7, -7, -6, -5, -5, -4, -4, -3, -2, -2, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    /// Range:         [-1024, 1024]
    /// Bit Depth:     12s, Q10
    /// Length:        192
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct luma_kernel_weights_unpacked_horiz_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// luma_kernel_weights_unpacked_horiz - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 152, 153, 153, 153, 153, 153, 153, 152, 153, 152, 153, 153, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 151, 152, 151, 152, 152, 152, 152, 151, 151, 151, 151, 151, 151, 151, 150, 150, 150, 149, 149, 148, 148, 147, 147, 146, 145, 144, 143, 142, 140, 139, 137, 136, 134, 132, 130, 128, 126, 124, 121, 119, 117, 115, 113, 111, 109, 106, 105, 103, 101, 99, 98, 96, 95, 94, 93, 92, 91, 91, 91, 91, 91, 92, 93, 94, 96, 97, 99, 101, 102, 104, 106, 108, 110, 113, 115, 116, 118, 120, 122, 123, 125, 126, 127, 127, 128, 128 , 128, 127, 126, 125, 123, 121, 119, 116, 113, 110, 106, 102, 98, 93, 89, 84, 79, 75, 70, 65, 60, 55, 50, 45, 40, 35, 31, 26, 22, 18, 14, 11, 8, 5, 2, 0, -2, -3, -5, -6, -7, -8, -8, -9, -9, -9, -9, -9, -9, -9, -8, -8, -7, -7, -6, -5, -5, -4, -4, -3, -2, -2, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        /// Length:        192
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT luma_kernel_weights_unpacked_horiz[192];
    } luma_kernel_weights_unpacked_horiz_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// luma_kernel_weights_unpacked_vert_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Vertical kernel samples for Luma (provided for phases is greater than or equal to 0 starting with
    ///                phase=0; negative phases are reflected symmetrically). The kernel is sampled either at 1/32-pixel steps
    ///                (for scale ratios is less than or equal to 1/1.5) or at 1/64-pixel steps (for scale ratios is greater
    ///                than 1/1.5). Constraints: weights for all pixels for a given phase should sum to one.
    /// Default Value: 152, 153, 153, 153, 153, 153, 153, 152, 153, 152, 153, 153, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 151, 152, 151, 152, 152, 152, 152, 151, 151, 151, 151, 151, 151, 151, 150, 150, 150, 149, 149, 148, 148, 147, 147, 146, 145, 144, 143, 142, 140, 139, 137, 136, 134, 132, 130, 128, 126, 124, 121, 119, 117, 115, 113, 111, 109, 106, 105, 103, 101, 99, 98, 96, 95, 94, 93, 92, 91, 91, 91, 91, 91, 92, 93, 94, 96, 97, 99, 101, 102, 104, 106, 108, 110, 113, 115, 116, 118, 120, 122, 123, 125, 126, 127, 127, 128, 128 , 128, 127, 126, 125, 123, 121, 119, 116, 113, 110, 106, 102, 98, 93, 89, 84, 79, 75, 70, 65, 60, 55, 50, 45, 40, 35, 31, 26, 22, 18, 14, 11, 8, 5, 2, 0, -2, -3, -5, -6, -7, -8, -8, -9, -9, -9, -9, -9, -9, -9, -8, -8, -7, -7, -6, -5, -5, -4, -4, -3, -2, -2, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    /// Range:         [-1024, 1024]
    /// Bit Depth:     12s, Q10
    /// Length:        192
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct luma_kernel_weights_unpacked_vert_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// luma_kernel_weights_unpacked_vert - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 152, 153, 153, 153, 153, 153, 153, 152, 153, 152, 153, 153, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 151, 152, 151, 152, 152, 152, 152, 151, 151, 151, 151, 151, 151, 151, 150, 150, 150, 149, 149, 148, 148, 147, 147, 146, 145, 144, 143, 142, 140, 139, 137, 136, 134, 132, 130, 128, 126, 124, 121, 119, 117, 115, 113, 111, 109, 106, 105, 103, 101, 99, 98, 96, 95, 94, 93, 92, 91, 91, 91, 91, 91, 92, 93, 94, 96, 97, 99, 101, 102, 104, 106, 108, 110, 113, 115, 116, 118, 120, 122, 123, 125, 126, 127, 127, 128, 128 , 128, 127, 126, 125, 123, 121, 119, 116, 113, 110, 106, 102, 98, 93, 89, 84, 79, 75, 70, 65, 60, 55, 50, 45, 40, 35, 31, 26, 22, 18, 14, 11, 8, 5, 2, 0, -2, -3, -5, -6, -7, -8, -8, -9, -9, -9, -9, -9, -9, -9, -8, -8, -7, -7, -6, -5, -5, -4, -4, -3, -2, -2, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        /// Length:        192
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT luma_kernel_weights_unpacked_vert[192];
    } luma_kernel_weights_unpacked_vert_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chroma_kernel_weights_unpacked_horiz_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Horizontal kernel samples for Chroma (provided for phases is greater than or equal to 0 starting with
    ///                phase=0; negative phases are reflected symmetrically). The kernel is sampled either at 1/32-pixel steps
    ///                (for scale ratios is less than or equal to 1/1.5) or at 1/64-pixel steps (for scale ratios is greater
    ///                than 1/1.5). Constraints: weights for all pixels for a given phase should sum to one.
    /// Default Value: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 248, 240, 232, 224, 216, 208, 200, 192, 184, 176, 168, 160, 152, 144, 136, 128, 120, 112, 104, 96, 88, 80, 72, 64, 56, 48, 40, 32, 24, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    /// Range:         [-1024, 1024]
    /// Bit Depth:     12s, Q10
    /// Length:        96
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct chroma_kernel_weights_unpacked_horiz_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// chroma_kernel_weights_unpacked_horiz - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 248, 240, 232, 224, 216, 208, 200, 192, 184, 176, 168, 160, 152, 144, 136, 128, 120, 112, 104, 96, 88, 80, 72, 64, 56, 48, 40, 32, 24, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        /// Length:        96
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT chroma_kernel_weights_unpacked_horiz[96];
    } chroma_kernel_weights_unpacked_horiz_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chroma_kernel_weights_unpacked_vert_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Vertical kernel samples for Chroma (provided for phases is greater than or equal to 0 starting with
    ///                phase=0; negative phases are reflected symmetrically). The kernel is sampled either at 1/32-pixel steps
    ///                (for scale ratios is less than or equal to 1/1.5) or at 1/64-pixel steps (for scale ratios is greater
    ///                than 1/1.5). Constraints: weights for all pixels for a given phase should sum to one.
    /// Default Value: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 248, 240, 232, 224, 216, 208, 200, 192, 184, 176, 168, 160, 152, 144, 136, 128, 120, 112, 104, 96, 88, 80, 72, 64, 56, 48, 40, 32, 24, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    /// Range:         [-1024, 1024]
    /// Bit Depth:     12s, Q10
    /// Length:        96
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct chroma_kernel_weights_unpacked_vert_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// chroma_kernel_weights_unpacked_vert - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 248, 240, 232, 224, 216, 208, 200, 192, 184, 176, 168, 160, 152, 144, 136, 128, 120, 112, 104, 96, 88, 80, 72, 64, 56, 48, 40, 32, 24, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        /// Length:        96
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT chroma_kernel_weights_unpacked_vert[96];
    } chroma_kernel_weights_unpacked_vert_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// luma_padding_weights_en
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enable external configuration of padding weights for Luma (controlled by luma_padding_weights_*
    ///                parameters).
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0, 1]
    /// Bit Depth:     1u
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                                    luma_padding_weights_en;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chroma_padding_weights_en
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enable external configuration of padding weights for Chroma (controlled by chroma_padding_weights_*
    ///                parameters).
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0, 1]
    /// Bit Depth:     1u
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                                    chroma_padding_weights_en;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// luma_padding_weights_top_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Weights used for first 6 input pixels in a column (for each pixel 4 weights, one per accumulator, are
    ///                provided) - for Luma. Constraints: at every output location affected by input pixels with
    ///                externally-configured padding weights, the weights should approximately sum to one.
    /// Default Value: 0
    /// Range:         [-4096, 4095]
    /// Bit Depth:     13s, Q11
    /// Length:        24
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct luma_padding_weights_top_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// luma_padding_weights_top - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0
        /// Length:        24
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT luma_padding_weights_top[24];
    } luma_padding_weights_top_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// luma_padding_weights_bot_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Weights used for last 6 input pixels in a column (for each pixel 4 weights, one per accumulator, are
    ///                provided) - for Luma. Constraints: at every output location affected by input pixels with
    ///                externally-configured padding weights, the weights should approximately sum to one.
    /// Default Value: 0
    /// Range:         [-4096, 4095]
    /// Bit Depth:     13s, Q11
    /// Length:        24
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct luma_padding_weights_bot_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// luma_padding_weights_bot - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0
        /// Length:        24
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT luma_padding_weights_bot[24];
    } luma_padding_weights_bot_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// luma_padding_weights_left_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Weights used for first 6 input pixels in a row (for each pixel 4 weights, one per accumulator, are
    ///                provided) - for Luma. Constraints: at every output location affected by input pixels with
    ///                externally-configured padding weights, the weights should approximately sum to one.
    /// Default Value: 0
    /// Range:         [-4096, 4095]
    /// Bit Depth:     13s, Q11
    /// Length:        24
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct luma_padding_weights_left_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// luma_padding_weights_left - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0
        /// Length:        24
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT luma_padding_weights_left[24];
    } luma_padding_weights_left_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// luma_padding_weights_right_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Weights used for last 6 input pixels in a row (for each pixel 4 weights, one per accumulator, are
    ///                provided) - for Luma. Constraints: at every output location affected by input pixels with
    ///                externally-configured padding weights, the weights should approximately sum to one.
    /// Default Value: 0
    /// Range:         [-4096, 4095]
    /// Bit Depth:     13s, Q11
    /// Length:        24
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct luma_padding_weights_right_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// luma_padding_weights_right - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0
        /// Length:        24
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT luma_padding_weights_right[24];
    } luma_padding_weights_right_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chroma_padding_weights_top_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Weights used for first 4 input pixels in a column (for each pixel 2 weights, one per accumulator, are
    ///                provided) - for Chroma. Constraints: at every output location affected by input pixels with
    ///                externally-configured padding weights, the weights should approximately sum to one.
    /// Default Value: 0
    /// Range:         [-4096, 4095]
    /// Bit Depth:     13s, Q11
    /// Length:        8
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct chroma_padding_weights_top_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// chroma_padding_weights_top - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0
        /// Length:        8
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT chroma_padding_weights_top[8];
    } chroma_padding_weights_top_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chroma_padding_weights_bot_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Weights used for last 4 input pixels in a column (for each pixel 2 weights, one per accumulator, are
    ///                provided) - for Chroma. Constraints: at every output location affected by input pixels with
    ///                externally-configured padding weights, the weights should approximately sum to one.
    /// Default Value: 0
    /// Range:         [-4096, 4095]
    /// Bit Depth:     13s, Q11
    /// Length:        8
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct chroma_padding_weights_bot_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// chroma_padding_weights_bot - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0
        /// Length:        8
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT chroma_padding_weights_bot[8];
    } chroma_padding_weights_bot_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chroma_padding_weights_left_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Weights used for first 4 input pixels in a row (for each pixel 2 weights, one per accumulator, are
    ///                provided) - for Chroma. Constraints: at every output location affected by input pixels with
    ///                externally-configured padding weights, the weights should approximately sum to one.
    /// Default Value: 0
    /// Range:         [-4096, 4095]
    /// Bit Depth:     13s, Q11
    /// Length:        8
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct chroma_padding_weights_left_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// chroma_padding_weights_left - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0
        /// Length:        8
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT chroma_padding_weights_left[8];
    } chroma_padding_weights_left_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chroma_padding_weights_right_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Weights used for last 4 input pixels in a row (for each pixel 2 weights, one per accumulator, are
    ///                provided) - for Chroma. Constraints: at every output location affected by input pixels with
    ///                externally-configured padding weights, the weights should approximately sum to one.
    /// Default Value: 0
    /// Range:         [-4096, 4095]
    /// Bit Depth:     13s, Q11
    /// Length:        8
    /// Conversion:    No Conversion needed
    /// Notes:         Nearest neighbor interpolation: discrete values allowed.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct chroma_padding_weights_right_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// chroma_padding_weights_right - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0
        /// Length:        8
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT chroma_padding_weights_right[8];
    } chroma_padding_weights_right_tab;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_dsx10_sr_scale_ratio_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_dsx10_sr_scale_ratio_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sr_scale_ratio_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type    sr_scale_ratio_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dsx10_rgn_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    dsx10_rgn_dataType dsx10_rgn_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_dsx10_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_dsx10_coreType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mod_dsx10_sr_scale_ratio_data - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                             mod_dsx10_sr_scale_ratio_dataCount;
    UINT32                             mod_dsx10_sr_scale_ratio_dataID;
    mod_dsx10_sr_scale_ratio_dataType* mod_dsx10_sr_scale_ratio_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_dsx10Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_dsx10Type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_variables
    ///
    /// Default Value: control_sr_scale_ratio
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_variablesStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// control_var_type
        /// Default Value: control_sr_scale_ratio
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        enum class control_var_typeEnum
        {
            control_sr_scale_ratio = 0
        } control_var_type;
    } control_variables;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_dsx10_reserve
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_dsx10_reserveType chromatix_dsx10_reserve;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_dsx10_core
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_dsx10_coreType    chromatix_dsx10_core;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_dsx10TypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatix_dsx10TypeClass : public ParameterModule, public chromatix_dsx10Type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 1;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_dsx10TypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_dsx10TypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatix_dsx10TypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_dsx10_reserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_dsx10_reserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_dsx10_reserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType_luma_kernel_weights_unpacked_horiz_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType_luma_kernel_weights_unpacked_horiz_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType::luma_kernel_weights_unpacked_horiz_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType_luma_kernel_weights_unpacked_vert_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType_luma_kernel_weights_unpacked_vert_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType::luma_kernel_weights_unpacked_vert_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType_chroma_kernel_weights_unpacked_horiz_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType_chroma_kernel_weights_unpacked_horiz_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType::chroma_kernel_weights_unpacked_horiz_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType_chroma_kernel_weights_unpacked_vert_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType_chroma_kernel_weights_unpacked_vert_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType::chroma_kernel_weights_unpacked_vert_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType_luma_padding_weights_top_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType_luma_padding_weights_top_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType::luma_padding_weights_top_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType_luma_padding_weights_bot_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType_luma_padding_weights_bot_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType::luma_padding_weights_bot_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType_luma_padding_weights_left_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType_luma_padding_weights_left_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType::luma_padding_weights_left_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType_luma_padding_weights_right_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType_luma_padding_weights_right_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType::luma_padding_weights_right_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType_chroma_padding_weights_top_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType_chroma_padding_weights_top_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType::chroma_padding_weights_top_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType_chroma_padding_weights_bot_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType_chroma_padding_weights_bot_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType::chroma_padding_weights_bot_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType_chroma_padding_weights_left_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType_chroma_padding_weights_left_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType::chroma_padding_weights_left_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dsx10_rgn_dataType_chroma_padding_weights_right_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddsx10_rgn_dataType_chroma_padding_weights_right_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        dsx10_rgn_dataType::chroma_padding_weights_right_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_dsx10_sr_scale_ratio_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_dsx10_sr_scale_ratio_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_dsx10_sr_scale_ratio_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_dsx10_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_dsx10_coreType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_dsx10_coreType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_dsx10Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_dsx10Type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_dsx10Type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_dsx10Type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_dsx10Type::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_variablesStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_variablesStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_dsx10Type::control_variablesStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_dsx10_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_dsx10_coreType(
        chromatix_dsx10_coreType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_dsx10Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_dsx10Type(
        chromatix_dsx10Type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatix_dsx10Type::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatix_dsx10TypeClass

DSX_1_0_0_NAMESPACE_END
#endif // DSX_1_0_0_H

