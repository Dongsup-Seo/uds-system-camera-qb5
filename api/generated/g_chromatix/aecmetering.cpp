////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecmetering.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "aecmetering.h"
#include "parametersetmanager.h"

AECMETERING_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECCoreMeteringTypeClass::AECCoreMeteringTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(mtrLumaCalc);
    PARAMETER_INITIALIZE(mtrLumaTarget);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECCoreMeteringTypeClass::AECCoreMeteringTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(mtrLumaCalc);
    PARAMETER_INITIALIZE(mtrLumaTarget);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECCoreMeteringTypeClass::~AECCoreMeteringTypeClass()
{
    UnloadAECCoreMeteringType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* AECCoreMeteringTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "Metering")) == 0)
    {
        name = "Metering";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load NonLinearEstimateType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadNonLinearEstimateType(
    ParameterFileSymbolTableEntry* entry,
    NonLinearEstimateType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableNonLinearEstimate, alignment);
    result = result && entry->Read(&structure->errPct, alignment);
    result = result && entry->Read(&structure->maxIterations, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AdvHistTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadAdvHistTargetType(
    ParameterFileSymbolTableEntry* entry,
    AdvHistTargetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadNonLinearEstimateType(entry, &structure->nonLinHistTgt, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load SuppressNonLinearZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadSuppressNonLinearZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    SuppressNonLinearZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->outputGain, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load SuppressNonLinearZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadSuppressNonLinearZoneType(
    ParameterFileSymbolTableEntry* entry,
    SuppressNonLinearZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadSuppressNonLinearZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load SuppressNonLinearType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadSuppressNonLinearType(
    ParameterFileSymbolTableEntry* entry,
    SuppressNonLinearType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array suppressNonLinearZone from symbol table
    {
        result = entry->Read(&structure->suppressNonLinearZoneCount, alignment);
        structure->suppressNonLinearZoneID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->suppressNonLinearZone = PARAMETER_NEW SuppressNonLinearZoneType[structure->suppressNonLinearZoneCount];
        }
        if (!result || structure->suppressNonLinearZone == NULL)
        {
            structure->suppressNonLinearZoneCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->suppressNonLinearZoneCount; i++)
        {
            result = LoadSuppressNonLinearZoneType(pointerEntry, &structure->suppressNonLinearZone[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AdvLuxTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadAdvLuxTargetType(
    ParameterFileSymbolTableEntry* entry,
    AdvLuxTargetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadNonLinearEstimateType(entry, &structure->nonLinLuxTgt, alignment);
    result = result && entry->Read(&structure->enableForYOnly, alignment);
    result = result && LoadSuppressNonLinearType(entry, &structure->suppressNonLinearLuma, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AdvancedTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadAdvancedTargetType(
    ParameterFileSymbolTableEntry* entry,
    AdvancedTargetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadAdvLuxTargetType(entry, &structure->advLuxTgt, alignment);
    result = result && LoadAdvHistTargetType(entry, &structure->advHistTgt, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load DynamicEVLockType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadDynamicEVLockType(
    ParameterFileSymbolTableEntry* entry,
    DynamicEVLockType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->convDelayOffset, alignment);
    result = result && entry->Read(&structure->SCConsTh, alignment);
    result = result && entry->Read(&structure->SCRatio, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load EVLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadEVLumaTargetType(
    ParameterFileSymbolTableEntry* entry,
    EVLumaTargetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->stepsPerEV, alignment);
    result = result && entry->Read(&structure->minEVValue, alignment);
    result = result && entry->Read(&structure->maxEVValue, alignment);
    result = result && LoadEVLumaTargetType_EVCompTableStruct(entry, &structure->EVCompTable, alignment);
    result = result && LoadDynamicEVLockType(entry, &structure->dynamicEVLock, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load EVLumaTargetType_EVCompTableStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadEVLumaTargetType_EVCompTableStruct(
    ParameterFileSymbolTableEntry* entry,
    EVLumaTargetType::EVCompTableStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->EVCompTableElements, 49, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ExtrmClrLumaTargetZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadExtrmClrLumaTargetZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    ExtrmClrLumaTargetZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->channelAdjRatio, 3, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ExtrmClrLumaTargetZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadExtrmClrLumaTargetZoneType(
    ParameterFileSymbolTableEntry* entry,
    ExtrmClrLumaTargetZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadExtrmClrLumaTargetZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ExtrmClrThresRangeType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadExtrmClrThresRangeType(
    ParameterFileSymbolTableEntry* entry,
    ExtrmClrThresRangeType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->thres, alignment);
    result = result && entry->Read(&structure->interpPct, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ExtrmClrLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadExtrmClrLumaTargetType(
    ParameterFileSymbolTableEntry* entry,
    ExtrmClrLumaTargetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableExtrmClr, alignment);
    result = result && LoadExtrmClrThresRangeType(entry, &structure->thresRed, alignment);
    result = result && LoadExtrmClrThresRangeType(entry, &structure->thresGreenR, alignment);
    result = result && LoadExtrmClrThresRangeType(entry, &structure->thresGreenB, alignment);
    result = result && LoadExtrmClrThresRangeType(entry, &structure->thresGreenCenter, alignment);
    result = result && LoadExtrmClrThresRangeType(entry, &structure->thresBlue, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->thresColorStatsPct, alignment);
    result = result && entry->Read(&structure->thresLumaLow, alignment);
    result = result && entry->Read(&structure->thresLumaHigh, alignment);

    // Reading Array extrmClrLumaTargetZone from symbol table
    {
        result = result && entry->Read(&structure->extrmClrLumaTargetZoneCount, alignment);
        structure->extrmClrLumaTargetZoneID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->extrmClrLumaTargetZone = PARAMETER_NEW ExtrmClrLumaTargetZoneType[structure->extrmClrLumaTargetZoneCount];
        }
        if (!result || structure->extrmClrLumaTargetZone == NULL)
        {
            structure->extrmClrLumaTargetZoneCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->extrmClrLumaTargetZoneCount; i++)
        {
            result = LoadExtrmClrLumaTargetZoneType(pointerEntry, &structure->extrmClrLumaTargetZone[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ADRCGainAdjustZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadADRCGainAdjustZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    ADRCGainAdjustZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->tolerance, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ADRCGainAdjustZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadADRCGainAdjustZoneType(
    ParameterFileSymbolTableEntry* entry,
    ADRCGainAdjustZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadADRCGainAdjustZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load SensorHDRGainAdjustType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadSensorHDRGainAdjustType(
    ParameterFileSymbolTableEntry* entry,
    SensorHDRGainAdjustType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableADRGGainAdjust, alignment);

    // Reading Array ADRCGainAdjustZone from symbol table
    {
        result = result && entry->Read(&structure->ADRCGainAdjustZoneCount, alignment);
        structure->ADRCGainAdjustZoneID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->ADRCGainAdjustZone = PARAMETER_NEW ADRCGainAdjustZoneType[structure->ADRCGainAdjustZoneCount];
        }
        if (!result || structure->ADRCGainAdjustZone == NULL)
        {
            structure->ADRCGainAdjustZoneCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->ADRCGainAdjustZoneCount; i++)
        {
            result = LoadADRCGainAdjustZoneType(pointerEntry, &structure->ADRCGainAdjustZone[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load HistLumaTargetZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadHistLumaTargetZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    HistLumaTargetZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->minTargetAdjRatio, alignment);
    result = result && entry->Read(&structure->maxTargetAdjRatio, alignment);
    result = result && entry->Read(&structure->satRefLow, alignment);
    result = result && entry->Read(&structure->satRefHigh, alignment);
    result = result && entry->Read(&structure->darkRefLow, alignment);
    result = result && entry->Read(&structure->darkRefHigh, alignment);
    for (UINT32 i = 0; result && i < 3; i++)
    {
        result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->histSatPushupRange[i], alignment);
    }
    for (UINT32 i = 0; result && i < 3; i++)
    {
        result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->histSatPushdownRange[i], alignment);
    }
    for (UINT32 i = 0; result && i < 3; i++)
    {
        result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->histDarkRange[i], alignment);
    }
    result = result && entry->Read(&structure->maxDRCGain, alignment);
    result = result && entry->Read(&structure->maxADRCGain, alignment);
    result = result && entry->Read(&structure->maxDarkBoostGain, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load HistLumaTargetZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadHistLumaTargetZoneType(
    ParameterFileSymbolTableEntry* entry,
    HistLumaTargetZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadHistLumaTargetZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load HistLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadHistLumaTargetType(
    ParameterFileSymbolTableEntry* entry,
    HistLumaTargetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableHistMetering, alignment);
    result = result && entry->Read(&structure->enableADRC, alignment);
    result = result && entry->Read(&structure->enableNonLinearTargetEstimate, alignment);
    result = result && entry->Read(&structure->enableDarkBoost, alignment);
    result = result && entry->Read(&structure->enableAntiBandingPrioOverADRC, alignment);
    result = result && entry->Read(&structure->antiBandingPrioTriggerRange, alignment);
    result = result && entry->Read(&structure->targetFilterFactor, alignment);

    // Reading Array histLumaTargetZone from symbol table
    {
        result = result && entry->Read(&structure->histLumaTargetZoneCount, alignment);
        structure->histLumaTargetZoneID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->histLumaTargetZone = PARAMETER_NEW HistLumaTargetZoneType[structure->histLumaTargetZoneCount];
        }
        if (!result || structure->histLumaTargetZone == NULL)
        {
            structure->histLumaTargetZoneCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->histLumaTargetZoneCount; i++)
        {
            result = LoadHistLumaTargetZoneType(pointerEntry, &structure->histLumaTargetZone[i], alignment);
        }
    }
    result = result && entry->Read(&structure->enableWBClipping, alignment);
    result = result && entry->Read(&structure->enableBinGrouping, alignment);
    structure->EVHandling = (aecglobalelements::HistogramTargetEVMethodType)entry->ReadEnum(&result, alignment);
    result = result && LoadSensorHDRGainAdjustType(entry, &structure->SensorHDRGainAdjust, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadAECLumaTargetType(
    ParameterFileSymbolTableEntry* entry,
    AECLumaTargetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadLuxLumaTargetType(entry, &structure->luxLumaTarget, alignment);
    result = result && LoadHistLumaTargetType(entry, &structure->histLumaTarget, alignment);
    result = result && LoadExtrmClrLumaTargetType(entry, &structure->extrmClrLumaTarget, alignment);
    result = result && LoadEVLumaTargetType(entry, &structure->EVLumaTarget, alignment);
    result = result && LoadAdvancedTargetType(entry, &structure->advancedTarget, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load RgnAdjZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadRgnAdjZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    RgnAdjZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->thresBrightRgn, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->thresDarkRgn, alignment);
    result = result && entry->Read(&structure->weightBrightRgnAdj, alignment);
    result = result && entry->Read(&structure->weightDarkRgnAdj, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load RgnAdjZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadRgnAdjZoneType(
    ParameterFileSymbolTableEntry* entry,
    RgnAdjZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadRgnAdjZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load RgnAdjType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadRgnAdjType(
    ParameterFileSymbolTableEntry* entry,
    RgnAdjType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableBrightRgnAdj, alignment);
    result = result && entry->Read(&structure->enableDarkRgnAdj, alignment);
    result = result && entry->Read(&structure->minTableWeightForBright, alignment);
    result = result && entry->Read(&structure->maxStatsPctForBright, alignment);
    result = result && entry->Read(&structure->minTableWeightForDark, alignment);
    result = result && entry->Read(&structure->maxStatsPctForDark, alignment);

    // Reading Array rgnAdjZone from symbol table
    {
        result = result && entry->Read(&structure->rgnAdjZoneCount, alignment);
        structure->rgnAdjZoneID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->rgnAdjZone = PARAMETER_NEW RgnAdjZoneType[structure->rgnAdjZoneCount];
        }
        if (!result || structure->rgnAdjZone == NULL)
        {
            structure->rgnAdjZoneCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->rgnAdjZoneCount; i++)
        {
            result = LoadRgnAdjZoneType(pointerEntry, &structure->rgnAdjZone[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load MtrTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadMtrTableType(
    ParameterFileSymbolTableEntry* entry,
    MtrTableType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadMtrTableType_centerWeightedStruct(entry, &structure->centerWeighted, alignment);
    result = result && LoadMtrTableType_spotWeightedStruct(entry, &structure->spotWeighted, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load MtrTableType_centerWeightedStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadMtrTableType_centerWeightedStruct(
    ParameterFileSymbolTableEntry* entry,
    MtrTableType::centerWeightedStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->weights, 256, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load MtrTableType_spotWeightedStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadMtrTableType_spotWeightedStruct(
    ParameterFileSymbolTableEntry* entry,
    MtrTableType::spotWeightedStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->weights, 256, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load LumaWeightType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadLumaWeightType(
    ParameterFileSymbolTableEntry* entry,
    LumaWeightType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->weight, 3, alignment);
    result = result && entry->Read(&structure->enableColorAndSensorComp, alignment);
    result = result && entry->ReadArray(structure->refGain, 3, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load IndexCalcType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadIndexCalcType(
    ParameterFileSymbolTableEntry* entry,
    IndexCalcType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableLuxIndexComp, alignment);
    result = result && entry->Read(&structure->refSensitivityForExpIndexZero, alignment);
    result = result && entry->Read(&structure->luxIndexFilterFactor, alignment);
    structure->bayerGridSubsmplSelect = (aecglobalelements::AECBayerGridSubsmplType)entry->ReadEnum(&result, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECLumaCalcType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadAECLumaCalcType(
    ParameterFileSymbolTableEntry* entry,
    AECLumaCalcType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadIndexCalcType(entry, &structure->indexCalc, alignment);
    result = result && LoadLumaWeightType(entry, &structure->lumaWeight, alignment);
    result = result && LoadMtrTableType(entry, &structure->mtrTables, alignment);
    result = result && LoadRgnAdjType(entry, &structure->lumaRgnAdj, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECCoreMeteringType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::LoadAECCoreMeteringType(
    ParameterFileSymbolTableEntry* entry,
    AECCoreMeteringType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && LoadAECLumaCalcType(entry, &structure->mtrLumaCalc, alignment);
    result = result && LoadAECLumaTargetType(entry, &structure->mtrLumaTarget, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECCoreMeteringType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreMeteringTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECCoreMeteringType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload SuppressNonLinearType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreMeteringTypeClass::UnloadSuppressNonLinearType(
    SuppressNonLinearType* structure)
{
    PARAMETER_DELETE[] structure->suppressNonLinearZone;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AdvLuxTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreMeteringTypeClass::UnloadAdvLuxTargetType(
    AdvLuxTargetType* structure)
{
    UnloadSuppressNonLinearType(&structure->suppressNonLinearLuma);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AdvancedTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreMeteringTypeClass::UnloadAdvancedTargetType(
    AdvancedTargetType* structure)
{
    UnloadAdvLuxTargetType(&structure->advLuxTgt);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload ExtrmClrLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreMeteringTypeClass::UnloadExtrmClrLumaTargetType(
    ExtrmClrLumaTargetType* structure)
{
    PARAMETER_DELETE[] structure->extrmClrLumaTargetZone;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload SensorHDRGainAdjustType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreMeteringTypeClass::UnloadSensorHDRGainAdjustType(
    SensorHDRGainAdjustType* structure)
{
    PARAMETER_DELETE[] structure->ADRCGainAdjustZone;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload HistLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreMeteringTypeClass::UnloadHistLumaTargetType(
    HistLumaTargetType* structure)
{
    PARAMETER_DELETE[] structure->histLumaTargetZone;
    UnloadSensorHDRGainAdjustType(&structure->SensorHDRGainAdjust);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECLumaTargetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreMeteringTypeClass::UnloadAECLumaTargetType(
    AECLumaTargetType* structure)
{
    aecglobalelements::aecglobalelementsClass::UnloadLuxLumaTargetType(&structure->luxLumaTarget);
    UnloadHistLumaTargetType(&structure->histLumaTarget);
    UnloadExtrmClrLumaTargetType(&structure->extrmClrLumaTarget);
    UnloadAdvancedTargetType(&structure->advancedTarget);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload RgnAdjType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreMeteringTypeClass::UnloadRgnAdjType(
    RgnAdjType* structure)
{
    PARAMETER_DELETE[] structure->rgnAdjZone;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECLumaCalcType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreMeteringTypeClass::UnloadAECLumaCalcType(
    AECLumaCalcType* structure)
{
    UnloadRgnAdjType(&structure->lumaRgnAdj);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECCoreMeteringType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreMeteringTypeClass::UnloadAECCoreMeteringType(
    AECCoreMeteringType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadAECLumaCalcType(&structure->mtrLumaCalc);
    UnloadAECLumaTargetType(&structure->mtrLumaTarget);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreMeteringTypeClass::Unloadparameter_versionStruct(
    AECCoreMeteringType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* AECCoreMeteringTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    AECCoreMeteringTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW AECCoreMeteringTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadAECCoreMeteringType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AECMETERING_NAMESPACE_END
