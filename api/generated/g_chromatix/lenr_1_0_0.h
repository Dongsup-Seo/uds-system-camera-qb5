////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  lenr_1_0_0.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef LENR_1_0_0_H
#define LENR_1_0_0_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "ispglobalelements.h"

#define LENR_1_0_0_NAMESPACE_BEGIN namespace lenr_1_0_0 {
#define LENR_1_0_0_NAMESPACE_END }

LENR_1_0_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// lenr10_rgn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct lenr10_rgn_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_bltr_th_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   BLTR dn4 dn8 dn16 weight curve controlthreshold
    /// Type:          uint
    /// Default Value: 2 1 0
    /// Range:         [0,1023]
    /// Bit Depth:     10uQ0
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_bltr_th_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_bltr_th - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 2 1 0
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn4_8_16_bltr_th[3];
    } lenr_dn4_8_16_bltr_th_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_bltr_gap_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   BLTR dn4 dn8 dn16 weight curve gap (0-10)
    /// Type:          uint
    /// Default Value: 1 0 0
    /// Range:         [0,15]
    /// Bit Depth:     4uQ0
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_bltr_gap_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_bltr_gap - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 1 0 0
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn4_8_16_bltr_gap[3];
    } lenr_dn4_8_16_bltr_gap_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_bltr_ctrl_th_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   BLTR dn4 dn8 dn16 noise control threshold
    /// Type:          uint
    /// Default Value: 8 4 16
    /// Range:         [0,1023]
    /// Bit Depth:     10uQ0
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_bltr_ctrl_th_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_bltr_ctrl_th - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 8 4 16
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn4_8_16_bltr_ctrl_th[3];
    } lenr_dn4_8_16_bltr_ctrl_th_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_bltr_ctrl_w_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   BLTR dn4 dn8 dn16 noise control slope
    /// Type:          uint
    /// Default Value: 128 256 64
    /// Range:         [0,1023]
    /// Bit Depth:     10uQ5
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_bltr_ctrl_w_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_bltr_ctrl_w - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 128 256 64
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn4_8_16_bltr_ctrl_w[3];
    } lenr_dn4_8_16_bltr_ctrl_w_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_bltr_snr_gain_arr_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   skin based noise reduction gain table
    /// Type:          uint
    /// Default Value: 32 32 32 32 32 32 24 16 16 12 10 10 10 10 10 10 10
    /// Range:         [1,32]
    /// Bit Depth:     5uQ5
    /// Length:        17
    /// Conversion:    no conversion needed
    /// Notes:         LENR BLTR will be stronger as snr_gain_arr decreases. SW tuning parameter need subtract by 1 and set it
    ///                to HW register.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_bltr_snr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_bltr_snr_gain_arr - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 32 32 32 32 32 32 24 16 16 12 10 10 10 10 10 10 10
        /// Length:        17
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn4_bltr_snr_gain_arr[17];
    } lenr_dn4_bltr_snr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn8_bltr_snr_gain_arr_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   skin based noise reduction gain table
    /// Type:          uint
    /// Default Value: 32 32 32 32 32 32 24 16 16 12 12 12 12 12 12 12 12
    /// Range:         [1,32]
    /// Bit Depth:     5uQ5
    /// Length:        17
    /// Conversion:    no conversion needed
    /// Notes:         LENR BLTR will be stronger as snr_gain_arr decreases. SW tuning parameter need subtract by 1 and set it
    ///                to HW register.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn8_bltr_snr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn8_bltr_snr_gain_arr - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 32 32 32 32 32 32 24 16 16 12 12 12 12 12 12 12 12
        /// Length:        17
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn8_bltr_snr_gain_arr[17];
    } lenr_dn8_bltr_snr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn16_bltr_snr_gain_arr_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   skin based noise reduction gain table
    /// Type:          uint
    /// Default Value: 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32
    /// Range:         [1,32]
    /// Bit Depth:     5uQ5
    /// Length:        17
    /// Conversion:    no conversion needed
    /// Notes:         LENR BLTR will be stronger as snr_gain_arr decreases. SW tuning parameter need subtract by 1 and set it
    ///                to HW register.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn16_bltr_snr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn16_bltr_snr_gain_arr - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32
        /// Length:        17
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn16_bltr_snr_gain_arr[17];
    } lenr_dn16_bltr_snr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bltr_rnr_gain_arr_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   radial adjustment for noise preserving percentage
    /// Type:          float
    /// Default Value: 1.0 1.0 0.9375 0.8750 0.7500 0.6250 0.5000
    /// Range:         [0,2.0]
    /// Bit Depth:     10uQ9
    /// Length:        7
    /// Conversion:    no conversion needed
    /// Notes:         LENR BLTR will be stronger denoising as bltr_rnr_gain_arr decreases. In general, bltr_rnr_gain_arr is a
    ///                monotonically decreasing curve.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct bltr_rnr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// bltr_rnr_gain_arr - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 1.0 1.0 0.9375 0.8750 0.7500 0.6250 0.5000
        /// Length:        7
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT bltr_rnr_gain_arr[7];
    } bltr_rnr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_lce_core_p_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   LCE dn4 dn8 dn16 HPF positive coring
    /// Type:          uint
    /// Default Value: 8 4 2
    /// Range:         [0,1023]
    /// Bit Depth:     10uQ0
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_lce_core_p_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_lce_core_p - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 8 4 2
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn4_8_16_lce_core_p[3];
    } lenr_dn4_8_16_lce_core_p_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_lce_core_n_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   LCE dn4 dn8 dn16 HPF negative coring
    /// Type:          uint
    /// Default Value: 8 4 2
    /// Range:         [0,1023]
    /// Bit Depth:     10uQ0
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_lce_core_n_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_lce_core_n - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 8 4 2
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn4_8_16_lce_core_n[3];
    } lenr_dn4_8_16_lce_core_n_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_lce_scale_p_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   LCE dn4 dn8 dn16 HPF positive scaling
    /// Type:          uint
    /// Default Value: 128 64 32
    /// Range:         [0,255]
    /// Bit Depth:     8uQ9
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_lce_scale_p_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_lce_scale_p - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 128 64 32
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn4_8_16_lce_scale_p[3];
    } lenr_dn4_8_16_lce_scale_p_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_lce_scale_n_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   LCE dn4 dn8 dn16 HPF negative scaling
    /// Type:          uint
    /// Default Value: 128 64 32
    /// Range:         [0,255]
    /// Bit Depth:     8uQ9
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_lce_scale_n_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_lce_scale_n - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 128 64 32
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn4_8_16_lce_scale_n[3];
    } lenr_dn4_8_16_lce_scale_n_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_lce_clamp_p_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   LCE dn4 dn8 dn16 HPF positive clamping
    /// Type:          int
    /// Default Value: 4 2 0
    /// Range:         [-1023,1023]
    /// Bit Depth:     11sQ0
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_lce_clamp_p_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_lce_clamp_p - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 4 2 0
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn4_8_16_lce_clamp_p[3];
    } lenr_dn4_8_16_lce_clamp_p_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_lce_clamp_n_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   LCE dn4 dn8 dn16 HPF negative clamping
    /// Type:          int
    /// Default Value: -4 -2 0
    /// Range:         [-1023,1023]
    /// Bit Depth:     11sQ0
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_lce_clamp_n_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_lce_clamp_n - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: -4 -2 0
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn4_8_16_lce_clamp_n[3];
    } lenr_dn4_8_16_lce_clamp_n_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_lce_snr_gain_arr_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   skin based local contrast enhancement gain table
    /// Type:          uint
    /// Default Value: 32 32 32 32 32 32 32 32 32 24 16 12 12 12 12 12 12
    /// Range:         [1,32]
    /// Bit Depth:     5uQ5
    /// Length:        17
    /// Conversion:    no conversion needed
    /// Notes:         LENR LCE will be stronger as snr_gain_arr decreases. SW tuning parameter need subtract by 1 and set it to
    ///                HW register.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_lce_snr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_lce_snr_gain_arr - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 32 32 32 32 32 32 32 32 32 24 16 12 12 12 12 12 12
        /// Length:        17
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn4_lce_snr_gain_arr[17];
    } lenr_dn4_lce_snr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn8_lce_snr_gain_arr_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   skin based local contrast enhancement gain table
    /// Type:          uint
    /// Default Value: 32 32 32 32 32 32 32 32 32 24 16 12 12 12 12 12 12
    /// Range:         [1,32]
    /// Bit Depth:     5uQ5
    /// Length:        17
    /// Conversion:    no conversion needed
    /// Notes:         LENR LCE will be stronger as snr_gain_arr decreases. SW tuning parameter need subtract by 1 and set it to
    ///                HW register.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn8_lce_snr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn8_lce_snr_gain_arr - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 32 32 32 32 32 32 32 32 32 24 16 12 12 12 12 12 12
        /// Length:        17
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn8_lce_snr_gain_arr[17];
    } lenr_dn8_lce_snr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn16_lce_snr_gain_arr_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   skin based local contrast enhancement gain table
    /// Type:          uint
    /// Default Value: 32 32 32 32 32 32 32 32 32 24 16 12 12 12 12 12 12
    /// Range:         [1,32]
    /// Bit Depth:     5uQ5
    /// Length:        17
    /// Conversion:    no conversion needed
    /// Notes:         LENR LCE will be stronger as snr_gain_arr decreases. SW tuning parameter need subtract by 1 and set it to
    ///                HW register.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn16_lce_snr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn16_lce_snr_gain_arr - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 32 32 32 32 32 32 32 32 32 24 16 12 12 12 12 12 12
        /// Length:        17
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lenr_dn16_lce_snr_gain_arr[17];
    } lenr_dn16_lce_snr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lce_rnr_gain_arr_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   radial adjustment for local contrast enhancment percentage
    /// Type:          float
    /// Default Value: 1.0 1.0 0.9375 0.8750 0.7500 0.6250 0.5000
    /// Range:         [0,2.0]
    /// Bit Depth:     10uQ9
    /// Length:        7
    /// Conversion:    no conversion needed
    /// Notes:         LENR LCE will be stronger enhancement as lce_rnr_gain_arr decreases. In general, lce_rnr_gain_arr is a
    ///                monotonically decreasing curve.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lce_rnr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lce_rnr_gain_arr - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 1.0 1.0 0.9375 0.8750 0.7500 0.6250 0.5000
        /// Length:        7
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lce_rnr_gain_arr[7];
    } lce_rnr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skin_hue_min
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Min hue value for skin detection. Instead of negative (Cb/Cr), absolute value |Cb/Cr| is used in HW
    /// Type:          float
    /// Default Value: -1.39
    /// Range:         [-3.0,-1.0]
    /// Bit Depth:     10uQ8
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           skin_hue_min;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skin_hue_max
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Max hue value for skin detection. Instead of negative (Cb/Cr), absolute value |Cb/Cr| is used in HW
    /// Type:          float
    /// Default Value: -0.4
    /// Range:         [-0.996,0]
    /// Bit Depth:     8uQ8
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           skin_hue_max;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skin_y_min
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Min Y value for skin detection.
    /// Type:          float
    /// Default Value: 0.125
    /// Range:         [0,1.0]
    /// Bit Depth:     8uQ8
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           skin_y_min;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skin_y_max
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Max Y value for skin detection
    /// Type:          float
    /// Default Value: 1.0
    /// Range:         [0,1.0]
    /// Bit Depth:     8uQ8
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           skin_y_max;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skin_saturation_min_y_max
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Min saturation value for skin when Y=Y_max
    /// Type:          float
    /// Default Value: 0.08
    /// Range:         [0,1.0]
    /// Bit Depth:     8uQ8
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           skin_saturation_min_y_max;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skin_saturation_max_y_max
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Max saturation value for skin when Y=Y_max
    /// Type:          float
    /// Default Value: 0.8
    /// Range:         [0,1.0]
    /// Bit Depth:     8uQ8
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           skin_saturation_max_y_max;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skin_saturation_min_y_min
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Min saturation value for skin when Y=Y_min
    /// Type:          float
    /// Default Value: 0.32
    /// Range:         [0,0.5]
    /// Bit Depth:     8uQ8
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           skin_saturation_min_y_min;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skin_saturation_max_y_min
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Max saturation value for skin when Y=Y_min
    /// Type:          float
    /// Default Value: 1.0
    /// Range:         [0.2,1.0]
    /// Bit Depth:     8uQ8
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           skin_saturation_max_y_min;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skin_boundary_probability
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   skin-tone probability at the boundary of skin-tone range
    /// Type:          uint
    /// Default Value: 8
    /// Range:         [1,15]
    /// Bit Depth:     4uQ4
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           skin_boundary_probability;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skin_percent
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Percentage of skin tone region with skin-tone probability 1
    /// Type:          float
    /// Default Value: 12
    /// Range:         [0,100]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           skin_percent;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skin_non_skin_to_skin_q_ratio
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Ratio of Q_nonSkin to Q_skin
    /// Type:          float
    /// Default Value: 0.5
    /// Range:         [0.1,10.0]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           skin_non_skin_to_skin_q_ratio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// face_boundary
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   the lower bound of face region. Full skin detection is applied within radius smaller than face_boundary *
    ///                face_radius(from face detection).
    /// Type:          float
    /// Default Value: 1.2
    /// Range:         [0,8]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           face_boundary;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// face_transition
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   the upper bound of face region. no skin detection is applied within radius larger than face_transition *
    ///                face_radius(from face detection).
    /// Type:          float
    /// Default Value: 2.0
    /// Range:         [0,8]
    /// Bit Depth:     0uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           face_transition;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_lenr10_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_lenr10_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::trigger_pt_type_aec aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr10_rgn_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    lenr10_rgn_dataType lenr10_rgn_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_lenr10_hdr_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_lenr10_hdr_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type_aec_hdr hdr_aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct hdr_aec_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_lenr10_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                   mod_lenr10_aec_dataCount;
        UINT32                   mod_lenr10_aec_dataID;
        mod_lenr10_aec_dataType* mod_lenr10_aec_data;
    } hdr_aec_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_lenr10_drc_gain_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_lenr10_drc_gain_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// drc_gain_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type drc_gain_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// drc_gain_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct drc_gain_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_lenr10_hdr_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                       mod_lenr10_hdr_aec_dataCount;
        UINT32                       mod_lenr10_hdr_aec_dataID;
        mod_lenr10_hdr_aec_dataType* mod_lenr10_hdr_aec_data;
    } drc_gain_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_lenr10_total_scale_ratio_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_lenr10_total_scale_ratio_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// total_scale_ratio_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type        total_scale_ratio_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// total_scale_ratio_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct total_scale_ratio_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_lenr10_drc_gain_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                        mod_lenr10_drc_gain_dataCount;
        UINT32                        mod_lenr10_drc_gain_dataID;
        mod_lenr10_drc_gain_dataType* mod_lenr10_drc_gain_data;
    } total_scale_ratio_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_lenr10_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_lenr10_coreType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mod_lenr10_total_scale_ratio_data - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                                 mod_lenr10_total_scale_ratio_dataCount;
    UINT32                                 mod_lenr10_total_scale_ratio_dataID;
    mod_lenr10_total_scale_ratio_dataType* mod_lenr10_total_scale_ratio_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_lenr10_reserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_lenr10_reserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// rnr_en
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enable bit of radius based noise reduction
    /// Type:          int
    /// Default Value: 1
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type                rnr_en;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// snr_en
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enable bit of skin color based noise reduction
    /// Type:          int
    /// Default Value: 1
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type                snr_en;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fd_snr_en
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enable bit of face guided skin color based noise reduction
    /// Type:          int
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         if fd_snr_en = 1, snr is applied on face regions; if fd_snr_en = 0, snr is applied on both face regions
    ///                and non-face regions
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type                fd_snr_en;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fnr_en
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enable bit of flatness based noise reduction
    /// Type:          int
    /// Default Value: 1
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type                fnr_en;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bltr_rnr_thrd_arr_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   radial anchor table (distance percentage)
    /// Type:          float
    /// Default Value: 0.0 0.2 0.3 0.4 0.6 0.8 1.0
    /// Range:         [0.0,1.0]
    /// Bit Depth:     10uQ0
    /// Length:        7
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct bltr_rnr_thrd_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// bltr_rnr_thrd_arr - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0.0 0.2 0.3 0.4 0.6 0.8 1.0
        /// Length:        7
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT bltr_rnr_thrd_arr[7];
    } bltr_rnr_thrd_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lce_rnr_thrd_arr_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   radial anchor table (distance percentage)
    /// Type:          float
    /// Default Value: 0.0 0.2 0.3 0.4 0.6 0.8 1.0
    /// Range:         [0.0,1.0]
    /// Bit Depth:     10uQ0
    /// Length:        7
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lce_rnr_thrd_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lce_rnr_thrd_arr - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0.0 0.2 0.3 0.4 0.6 0.8 1.0
        /// Length:        7
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT lce_rnr_thrd_arr[7];
    } lce_rnr_thrd_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_bltr_layer1_only
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enable bit
    /// Type:          int
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type                lenr_bltr_layer1_only;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_bltr_clamp_en_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   BLRT dn4 dn8 dn16 clamp enable
    /// Type:          uint
    /// Default Value: 0 0 0
    /// Range:         [0,1]
    /// Bit Depth:     1uQ0
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         dn4, dn8, dn16 BLTR clamp enabler as array type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_bltr_clamp_en_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_bltr_clamp_en - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 0 0 0
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 lenr_dn4_8_16_bltr_clamp_en[3];
    } lenr_dn4_8_16_bltr_clamp_en_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_bltr_clamp_p_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   BLRT dn4 dn8 dn16 positive clamp
    /// Type:          int
    /// Default Value: 16 16 16
    /// Range:         [-1023,1023]
    /// Bit Depth:     11sQ0
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         dn4, dn8, dn16 BLTR positive clamp value as array type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_bltr_clamp_p_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_bltr_clamp_p - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 16 16 16
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 lenr_dn4_8_16_bltr_clamp_p[3];
    } lenr_dn4_8_16_bltr_clamp_p_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_8_16_bltr_clamp_n_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   BLRT dn4 dn8 dn16 negative clamp
    /// Type:          int
    /// Default Value: -16 -16 -16
    /// Range:         [-1023,1023]
    /// Bit Depth:     11sQ0
    /// Length:        3
    /// Conversion:    no conversion needed
    /// Notes:         dn4, dn8, dn16 BLTR negative clamp value as array type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_8_16_bltr_clamp_n_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_8_16_bltr_clamp_n - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: -16 -16 -16
        /// Length:        3
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 lenr_dn4_8_16_bltr_clamp_n[3];
    } lenr_dn4_8_16_bltr_clamp_n_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_bltr_fnr_gain_arr_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   gain table for flatness based noise reduction
    /// Type:          uint
    /// Default Value: 16 16 16 24 32 32 32 32 32 32 32 32 32 32 32 32 32
    /// Range:         [0,63]
    /// Bit Depth:     6uQ5
    /// Length:        17
    /// Conversion:    no conversion needed
    /// Notes:         LENR BLTR will be stronger as fnr_gain_arr decreases.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_bltr_fnr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_bltr_fnr_gain_arr - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 16 16 16 24 32 32 32 32 32 32 32 32 32 32 32 32 32
        /// Length:        17
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 lenr_dn4_bltr_fnr_gain_arr[17];
    } lenr_dn4_bltr_fnr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn8_bltr_fnr_gain_arr_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   gain table for flatness based noise reduction
    /// Type:          uint
    /// Default Value: 16 16 16 24 32 32 32 32 32 32 32 32 32 32 32 32 32
    /// Range:         [0,63]
    /// Bit Depth:     6uQ5
    /// Length:        17
    /// Conversion:    no conversion needed
    /// Notes:         LENR BLTR will be stronger as fnr_gain_arr decreases.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn8_bltr_fnr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn8_bltr_fnr_gain_arr - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 16 16 16 24 32 32 32 32 32 32 32 32 32 32 32 32 32
        /// Length:        17
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 lenr_dn8_bltr_fnr_gain_arr[17];
    } lenr_dn8_bltr_fnr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn16_bltr_fnr_gain_arr_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   gain table for flatness based noise reduction
    /// Type:          uint
    /// Default Value: 16 16 16 24 32 32 32 32 32 32 32 32 32 32 32 32 32
    /// Range:         [0,63]
    /// Bit Depth:     6uQ5
    /// Length:        17
    /// Conversion:    no conversion needed
    /// Notes:         LENR BLTR will be stronger as fnr_gain_arr decreases.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn16_bltr_fnr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn16_bltr_fnr_gain_arr - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 16 16 16 24 32 32 32 32 32 32 32 32 32 32 32 32 32
        /// Length:        17
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 lenr_dn16_bltr_fnr_gain_arr[17];
    } lenr_dn16_bltr_fnr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn4_lce_fnr_gain_arr_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   gain table for flatness based local contrast enhancement
    /// Type:          uint
    /// Default Value: 16 16 16 24 32 32 32 32 32 32 32 32 32 32 32 32 32
    /// Range:         [0,63]
    /// Bit Depth:     6uQ5
    /// Length:        17
    /// Conversion:    no conversion needed
    /// Notes:         LENR LCE will be stronger as fnr_gain_arr decreases.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn4_lce_fnr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn4_lce_fnr_gain_arr - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 16 16 16 24 32 32 32 32 32 32 32 32 32 32 32 32 32
        /// Length:        17
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 lenr_dn4_lce_fnr_gain_arr[17];
    } lenr_dn4_lce_fnr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn8_lce_fnr_gain_arr_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   gain table for flatness based local contrast enhancement
    /// Type:          uint
    /// Default Value: 16 16 16 24 32 32 32 32 32 32 32 32 32 32 32 32 32
    /// Range:         [0,63]
    /// Bit Depth:     6uQ5
    /// Length:        17
    /// Conversion:    no conversion needed
    /// Notes:         LENR LCE will be stronger as fnr_gain_arr decreases.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn8_lce_fnr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn8_lce_fnr_gain_arr - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 16 16 16 24 32 32 32 32 32 32 32 32 32 32 32 32 32
        /// Length:        17
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 lenr_dn8_lce_fnr_gain_arr[17];
    } lenr_dn8_lce_fnr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_dn16_lce_fnr_gain_arr_tab
    ///
    /// Tuning Level:  often_tune
    /// Description:   gain table for flatness based local contrast enhancement
    /// Type:          uint
    /// Default Value: 16 16 16 24 32 32 32 32 32 32 32 32 32 32 32 32 32
    /// Range:         [0,63]
    /// Bit Depth:     6uQ5
    /// Length:        17
    /// Conversion:    no conversion needed
    /// Notes:         LENR LCE will be stronger as fnr_gain_arr decreases.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_dn16_lce_fnr_gain_arr_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_dn16_lce_fnr_gain_arr - Array
        ///
        /// Tuning Level:  often_tune
        /// Default Value: 16 16 16 24 32 32 32 32 32 32 32 32 32 32 32 32 32
        /// Length:        17
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 lenr_dn16_lce_fnr_gain_arr[17];
    } lenr_dn16_lce_fnr_gain_arr_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_all_fnr_shift
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   FNR variance shift
    /// Type:          int
    /// Default Value: 2
    /// Range:         [0,3]
    /// Bit Depth:     2uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                           lenr_all_fnr_shift;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lenr_all_lce_kernel_tab
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   LCE kernel
    /// Type:          int
    /// Default Value: 736 0 -3 -8 -14 -22 -67 -88 -48 144
    /// Range:         [-1024,1024]
    /// Bit Depth:     14sQ0
    /// Length:        10
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct lenr_all_lce_kernel_tabStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_all_lce_kernel - Array
        ///
        /// Tuning Level:  rarely_tune
        /// Default Value: 736 0 -3 -8 -14 -22 -67 -88 -48 144
        /// Length:        10
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 lenr_all_lce_kernel[10];
    } lenr_all_lce_kernel_tab;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// cnr_scale
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Chroma channel scale
    /// Type:          int
    /// Default Value: 4
    /// Range:         [0,15]
    /// Bit Depth:     4uQ0
    /// Conversion:    no conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                           cnr_scale;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_lenr10Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_lenr10Type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable_section
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct enable_sectionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   LENR module enable bit
        /// Type:          int
        /// Default Value: 0
        /// Range:         [0,1]
        /// Bit Depth:     1uQ0
        /// Conversion:    no conversion needed
        /// Notes:         none
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        globalelements::enable_flag_type enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_bltr_en
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   LENR BLTR enable bit
        /// Type:          int
        /// Default Value: 0
        /// Range:         [0,1]
        /// Bit Depth:     1uQ0
        /// Conversion:    no conversion needed
        /// Notes:         none
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        globalelements::enable_flag_type lenr_bltr_en;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_lce_en
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   LENR LCE enable bit
        /// Type:          int
        /// Default Value: 0
        /// Range:         [0,1]
        /// Bit Depth:     1uQ0
        /// Conversion:    no conversion needed
        /// Notes:         none
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        globalelements::enable_flag_type lenr_lce_en;
    } enable_section;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_variables
    ///
    /// Default Value: control_total_scale_ratio, control_drc_gain, control_aec_exp_sensitivity_ratio, control_gain
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_variablesStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// control_var_type - Array
        /// Default Value: control_total_scale_ratio, control_drc_gain, control_aec_exp_sensitivity_ratio, control_gain
        /// Length:        4
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        enum class control_var_typeEnum
        {
            control_lux_idx                   = 0,
            control_gain                      = 1,
            control_drc_gain                  = 2,
            control_exp_time_ratio            = 3,
            control_aec_exp_sensitivity_ratio = 4,
            control_exp_gain_ratio            = 5,
            control_total_scale_ratio         = 7
        } control_var_type[4];
    } control_variables;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_method
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_methodStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_exp_control
        /// Default Value: control_gain
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_type     aec_exp_control;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_hdr_control
        /// Default Value: control_aec_exp_sensitivity_ratio
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_hdr_type aec_hdr_control;
    } control_method;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dynamic_enable_triggers
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct dynamic_enable_triggersStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// lenr_nr_enable
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct lenr_nr_enableStruct
        {
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// Binary file symbol table entry ID
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32 SymbolTableID;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// enable
            ///
            /// Tuning Level:  rarely_tune
            /// Description:   enable LENR1.0 module
            /// Type:          int
            /// Default Value: 0
            /// Range:         [0,1]
            /// Bit Depth:     1uQ0
            /// Conversion:    no conversion needed
            /// Notes:         none
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            globalelements::enable_flag_type        enable;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_control_var
            ///
            /// Tuning Level:  rarely_tune
            /// Description:   enable LENR1.0 module
            /// Type:          uint
            /// Default Value: control_gain
            /// Range:         [0,1]
            /// Bit Depth:     1uQ0
            /// Conversion:    no conversion needed
            /// Notes:         none
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::control_var_type        hyst_control_var;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_mode
            /// Default Value: UPWARD
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::hyst_direction          hyst_mode;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_trigger
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::trigger_pt_couplet_type hyst_trigger;
        } lenr_nr_enable;
    } dynamic_enable_triggers;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_lenr10_reserve
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_lenr10_reserveType chromatix_lenr10_reserve;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_lenr10_core
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_lenr10_coreType    chromatix_lenr10_core;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_lenr10TypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatix_lenr10TypeClass : public ParameterModule, public chromatix_lenr10Type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 1;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_lenr10TypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_lenr10TypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatix_lenr10TypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn4_8_16_bltr_th_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn4_8_16_bltr_th_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn4_8_16_bltr_th_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn4_8_16_bltr_gap_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn4_8_16_bltr_gap_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn4_8_16_bltr_gap_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn4_8_16_bltr_ctrl_th_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn4_8_16_bltr_ctrl_th_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn4_8_16_bltr_ctrl_th_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn4_8_16_bltr_ctrl_w_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn4_8_16_bltr_ctrl_w_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn4_8_16_bltr_ctrl_w_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn4_bltr_snr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn4_bltr_snr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn4_bltr_snr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn8_bltr_snr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn8_bltr_snr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn8_bltr_snr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn16_bltr_snr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn16_bltr_snr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn16_bltr_snr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_bltr_rnr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_bltr_rnr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::bltr_rnr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn4_8_16_lce_core_p_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn4_8_16_lce_core_p_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn4_8_16_lce_core_p_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn4_8_16_lce_core_n_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn4_8_16_lce_core_n_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn4_8_16_lce_core_n_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn4_8_16_lce_scale_p_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn4_8_16_lce_scale_p_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn4_8_16_lce_scale_p_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn4_8_16_lce_scale_n_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn4_8_16_lce_scale_n_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn4_8_16_lce_scale_n_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn4_8_16_lce_clamp_p_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn4_8_16_lce_clamp_p_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn4_8_16_lce_clamp_p_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn4_8_16_lce_clamp_n_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn4_8_16_lce_clamp_n_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn4_8_16_lce_clamp_n_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn4_lce_snr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn4_lce_snr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn4_lce_snr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn8_lce_snr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn8_lce_snr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn8_lce_snr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lenr_dn16_lce_snr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lenr_dn16_lce_snr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lenr_dn16_lce_snr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load lenr10_rgn_dataType_lce_rnr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadlenr10_rgn_dataType_lce_rnr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        lenr10_rgn_dataType::lce_rnr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_lenr10_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_lenr10_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_lenr10_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_lenr10_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_lenr10_hdr_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_lenr10_hdr_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_lenr10_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_lenr10_hdr_aec_dataType_hdr_aec_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_lenr10_hdr_aec_dataType::hdr_aec_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_lenr10_drc_gain_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_lenr10_drc_gain_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_lenr10_drc_gain_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_lenr10_drc_gain_dataType_drc_gain_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_lenr10_drc_gain_dataType_drc_gain_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_lenr10_drc_gain_dataType::drc_gain_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_lenr10_total_scale_ratio_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_lenr10_total_scale_ratio_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_lenr10_total_scale_ratio_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_lenr10_total_scale_ratio_dataType_total_scale_ratio_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_lenr10_total_scale_ratio_dataType_total_scale_ratio_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_lenr10_total_scale_ratio_dataType::total_scale_ratio_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_coreType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_coreType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType_bltr_rnr_thrd_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType_bltr_rnr_thrd_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType::bltr_rnr_thrd_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType_lce_rnr_thrd_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType_lce_rnr_thrd_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType::lce_rnr_thrd_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType_lenr_dn4_8_16_bltr_clamp_en_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType_lenr_dn4_8_16_bltr_clamp_en_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType::lenr_dn4_8_16_bltr_clamp_en_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType_lenr_dn4_8_16_bltr_clamp_p_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType_lenr_dn4_8_16_bltr_clamp_p_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType::lenr_dn4_8_16_bltr_clamp_p_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType_lenr_dn4_8_16_bltr_clamp_n_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType_lenr_dn4_8_16_bltr_clamp_n_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType::lenr_dn4_8_16_bltr_clamp_n_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType_lenr_dn4_bltr_fnr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType_lenr_dn4_bltr_fnr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType::lenr_dn4_bltr_fnr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType_lenr_dn8_bltr_fnr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType_lenr_dn8_bltr_fnr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType::lenr_dn8_bltr_fnr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType_lenr_dn16_bltr_fnr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType_lenr_dn16_bltr_fnr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType::lenr_dn16_bltr_fnr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType_lenr_dn4_lce_fnr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType_lenr_dn4_lce_fnr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType::lenr_dn4_lce_fnr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType_lenr_dn8_lce_fnr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType_lenr_dn8_lce_fnr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType::lenr_dn8_lce_fnr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType_lenr_dn16_lce_fnr_gain_arr_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType_lenr_dn16_lce_fnr_gain_arr_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType::lenr_dn16_lce_fnr_gain_arr_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10_reserveType_lenr_all_lce_kernel_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10_reserveType_lenr_all_lce_kernel_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10_reserveType::lenr_all_lce_kernel_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_lenr10Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_lenr10Type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10Type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load enable_sectionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadenable_sectionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10Type::enable_sectionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10Type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10Type::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_variablesStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_variablesStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10Type::control_variablesStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_methodStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_methodStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10Type::control_methodStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dynamic_enable_triggersStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddynamic_enable_triggersStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10Type::dynamic_enable_triggersStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dynamic_enable_triggersStruct_lenr_nr_enableStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddynamic_enable_triggersStruct_lenr_nr_enableStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_lenr10Type::dynamic_enable_triggersStruct::lenr_nr_enableStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_lenr10_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_lenr10_hdr_aec_dataType(
        mod_lenr10_hdr_aec_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_lenr10_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_lenr10_hdr_aec_dataType_hdr_aec_dataStruct(
        mod_lenr10_hdr_aec_dataType::hdr_aec_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_lenr10_drc_gain_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_lenr10_drc_gain_dataType(
        mod_lenr10_drc_gain_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_lenr10_drc_gain_dataType_drc_gain_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_lenr10_drc_gain_dataType_drc_gain_dataStruct(
        mod_lenr10_drc_gain_dataType::drc_gain_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_lenr10_total_scale_ratio_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_lenr10_total_scale_ratio_dataType(
        mod_lenr10_total_scale_ratio_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_lenr10_total_scale_ratio_dataType_total_scale_ratio_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_lenr10_total_scale_ratio_dataType_total_scale_ratio_dataStruct(
        mod_lenr10_total_scale_ratio_dataType::total_scale_ratio_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_lenr10_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_lenr10_coreType(
        chromatix_lenr10_coreType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_lenr10Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_lenr10Type(
        chromatix_lenr10Type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatix_lenr10Type::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatix_lenr10TypeClass

LENR_1_0_0_NAMESPACE_END
#endif // LENR_1_0_0_H

