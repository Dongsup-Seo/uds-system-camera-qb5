////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afmonitorelements.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "afmonitorelements.h"
#include "parametersetmanager.h"

AFMONITORELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixAFMONITORTypeClass::chromatixAFMONITORTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(monitorAlgoConfig);
    PARAMETER_INITIALIZE(valueMonitorBank);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixAFMONITORTypeClass::chromatixAFMONITORTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(monitorAlgoConfig);
    PARAMETER_INITIALIZE(valueMonitorBank);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixAFMONITORTypeClass::~chromatixAFMONITORTypeClass()
{
    UnloadchromatixAFMONITORType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixAFMONITORTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "chromatixAFMONITOR")) == 0)
    {
        name = "chromatixAFMONITOR";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixIirFltrCfgType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixIirFltrCfgType(
    ParameterFileSymbolTableEntry* entry,
    chromatixIirFltrCfgType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->numOfSamples, alignment);
    result = result && entry->Read(&structure->coeffNumerator, alignment);
    result = result && entry->Read(&structure->coeffDenominator, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixMvavgFltrCfgType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixMvavgFltrCfgType(
    ParameterFileSymbolTableEntry* entry,
    chromatixMvavgFltrCfgType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->numOfSamples, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixMedianFltrCfgType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixMedianFltrCfgType(
    ParameterFileSymbolTableEntry* entry,
    chromatixMedianFltrCfgType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->numOfSamples, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixSensProfileType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixSensProfileType(
    ParameterFileSymbolTableEntry* entry,
    chromatixSensProfileType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->triggerThreshold, alignment);
    result = result && entry->Read(&structure->consecutiveCountThreshold, alignment);
    result = result && entry->Read(&structure->frameToArmed, alignment);
    result = result && entry->Read(&structure->highCountThreshold, alignment);
    result = result && entry->Read(&structure->lowCountThreshold, alignment);
    result = result && LoadchromatixMedianFltrCfgType(entry, &structure->medianFltrCfg, alignment);
    result = result && LoadchromatixMvavgFltrCfgType(entry, &structure->mvavgFltrCfg, alignment);
    result = result && LoadchromatixIirFltrCfgType(entry, &structure->IIRFltrCfg, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAbsoluteModeCfgType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixAbsoluteModeCfgType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAbsoluteModeCfgType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->baseline, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixValueMonitorType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixValueMonitorType(
    ParameterFileSymbolTableEntry* entry,
    chromatixValueMonitorType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->VMSetType = (chromatixVMSetTypeEnum)entry->ReadEnum(&result, alignment);
    structure->detectionType = (chromatixDetectorTypeEnum)entry->ReadEnum(&result, alignment);
    structure->VMInitState = (chromatixVMStateEnum)entry->ReadEnum(&result, alignment);
    result = result && LoadchromatixAbsoluteModeCfgType(entry, &structure->absoluteModeCfg, alignment);
    result = result && LoadchromatixSensProfileType(entry, &structure->sensProfileLow, alignment);
    result = result && LoadchromatixSensProfileType(entry, &structure->sensProfileMed, alignment);
    result = result && LoadchromatixSensProfileType(entry, &structure->sensProfileHigh, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixValueMonitorBankType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixValueMonitorBankType(
    ParameterFileSymbolTableEntry* entry,
    chromatixValueMonitorBankType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array valueMonitor from symbol table
    {
        result = entry->Read(&structure->valueMonitorCount, alignment);
        structure->valueMonitorID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->valueMonitor = PARAMETER_NEW chromatixValueMonitorType[structure->valueMonitorCount];
        }
        if (!result || structure->valueMonitor == NULL)
        {
            structure->valueMonitorCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->valueMonitorCount; i++)
        {
            result = LoadchromatixValueMonitorType(pointerEntry, &structure->valueMonitor[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load sensitivityTrigger
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadsensitivityTrigger(
    ParameterFileSymbolTableEntry* entry,
    sensitivityTrigger* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = globalelements::globalelementsClass::Loadtrigger_pt_type_aec(entry, &structure->AECTrigger, alignment);
    result = result && entry->Read(&structure->value, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load sensitivitySetting
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadsensitivitySetting(
    ParameterFileSymbolTableEntry* entry,
    sensitivitySetting* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->VMType = (chromatixVMSetTypeEnum)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->value, alignment);

    // Reading Array sensitivityTriggerSet from symbol table
    {
        result = result && entry->Read(&structure->sensitivityTriggerSetCount, alignment);
        structure->sensitivityTriggerSetID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->sensitivityTriggerSet = PARAMETER_NEW sensitivityTrigger[structure->sensitivityTriggerSetCount];
        }
        if (!result || structure->sensitivityTriggerSet == NULL)
        {
            structure->sensitivityTriggerSetCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->sensitivityTriggerSetCount; i++)
        {
            result = LoadsensitivityTrigger(pointerEntry, &structure->sensitivityTriggerSet[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTopoDepthAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixTopoDepthAFType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTopoDepthAFType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->defocusLow, alignment);
    result = result && entry->Read(&structure->defocusHigh, alignment);
    result = result && entry->Read(&structure->defocusPanning, alignment);
    result = result && entry->Read(&structure->sadPanning, alignment);
    result = result && entry->Read(&structure->gyroPanning, alignment);

    // Reading Array DepthAFTopoReservedSensitivity from symbol table
    {
        result = result && entry->Read(&structure->DepthAFTopoReservedSensitivityCount, alignment);
        structure->DepthAFTopoReservedSensitivityID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->DepthAFTopoReservedSensitivity = pointerEntry->ReadArray<INT32>(structure->DepthAFTopoReservedSensitivityCount, alignment);
            result = structure->DepthAFTopoReservedSensitivity != NULL;
        }
        if (!result || structure->DepthAFTopoReservedSensitivity == NULL)
        {
            structure->DepthAFTopoReservedSensitivityCount = 0;
        }
    }

    // Reading Array sensitivityTriggerArr from symbol table
    {
        result = result && entry->Read(&structure->sensitivityTriggerArrCount, alignment);
        structure->sensitivityTriggerArrID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->sensitivityTriggerArr = PARAMETER_NEW sensitivitySetting[structure->sensitivityTriggerArrCount];
        }
        if (!result || structure->sensitivityTriggerArr == NULL)
        {
            structure->sensitivityTriggerArrCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->sensitivityTriggerArrCount; i++)
        {
            result = LoadsensitivitySetting(pointerEntry, &structure->sensitivityTriggerArr[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTopoDefaultMixerType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixTopoDefaultMixerType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTopoDefaultMixerType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->secondarySceneChangeCntThres, alignment);
    result = result && entry->Read(&structure->secondaryUnstableCntThres, alignment);
    result = result && entry->Read(&structure->gyroEnable, alignment);

    // Reading Array sensitivityTriggerArr from symbol table
    {
        result = result && entry->Read(&structure->sensitivityTriggerArrCount, alignment);
        structure->sensitivityTriggerArrID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->sensitivityTriggerArr = PARAMETER_NEW sensitivitySetting[structure->sensitivityTriggerArrCount];
        }
        if (!result || structure->sensitivityTriggerArr == NULL)
        {
            structure->sensitivityTriggerArrCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->sensitivityTriggerArrCount; i++)
        {
            result = LoadsensitivitySetting(pointerEntry, &structure->sensitivityTriggerArr[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTopoDCIAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixTopoDCIAFType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTopoDCIAFType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->profileIndex = (chromatixTopoDCIAFEnum)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->distance, alignment);
    result = result && entry->Read(&structure->confidence, alignment);
    result = result && entry->Read(&structure->SADR, alignment);
    result = result && entry->Read(&structure->gyro, alignment);
    result = result && entry->Read(&structure->SADPanning, alignment);
    result = result && entry->Read(&structure->gyroPanning, alignment);

    // Reading Array DCIAFTopoReservedSensitivity from symbol table
    {
        result = result && entry->Read(&structure->DCIAFTopoReservedSensitivityCount, alignment);
        structure->DCIAFTopoReservedSensitivityID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->DCIAFTopoReservedSensitivity = pointerEntry->ReadArray<INT32>(structure->DCIAFTopoReservedSensitivityCount, alignment);
            result = structure->DCIAFTopoReservedSensitivity != NULL;
        }
        if (!result || structure->DCIAFTopoReservedSensitivity == NULL)
        {
            structure->DCIAFTopoReservedSensitivityCount = 0;
        }
    }

    // Reading Array sensitivityTriggerArr from symbol table
    {
        result = result && entry->Read(&structure->sensitivityTriggerArrCount, alignment);
        structure->sensitivityTriggerArrID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->sensitivityTriggerArr = PARAMETER_NEW sensitivitySetting[structure->sensitivityTriggerArrCount];
        }
        if (!result || structure->sensitivityTriggerArr == NULL)
        {
            structure->sensitivityTriggerArrCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->sensitivityTriggerArrCount; i++)
        {
            result = LoadsensitivitySetting(pointerEntry, &structure->sensitivityTriggerArr[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTopoTOFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixTopoTOFType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTopoTOFType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->profileIndex = (chromatixTopoTOFEnum)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->distance, alignment);
    result = result && entry->Read(&structure->TOFconfidenceHigh, alignment);
    result = result && entry->Read(&structure->TOFconfidenceMedium, alignment);
    result = result && entry->Read(&structure->SADPanning, alignment);
    result = result && entry->Read(&structure->gyroPanning, alignment);

    // Reading Array TOFTopoReservedSensitivity from symbol table
    {
        result = result && entry->Read(&structure->TOFTopoReservedSensitivityCount, alignment);
        structure->TOFTopoReservedSensitivityID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->TOFTopoReservedSensitivity = pointerEntry->ReadArray<INT32>(structure->TOFTopoReservedSensitivityCount, alignment);
            result = structure->TOFTopoReservedSensitivity != NULL;
        }
        if (!result || structure->TOFTopoReservedSensitivity == NULL)
        {
            structure->TOFTopoReservedSensitivityCount = 0;
        }
    }

    // Reading Array sensitivityTriggerArr from symbol table
    {
        result = result && entry->Read(&structure->sensitivityTriggerArrCount, alignment);
        structure->sensitivityTriggerArrID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->sensitivityTriggerArr = PARAMETER_NEW sensitivitySetting[structure->sensitivityTriggerArrCount];
        }
        if (!result || structure->sensitivityTriggerArr == NULL)
        {
            structure->sensitivityTriggerArrCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->sensitivityTriggerArrCount; i++)
        {
            result = LoadsensitivitySetting(pointerEntry, &structure->sensitivityTriggerArr[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTopoPDAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixTopoPDAFType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTopoPDAFType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->profileIndex = (chromatixTopoPDAFEnum)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->defocusLow, alignment);
    result = result && entry->Read(&structure->defocusHigh, alignment);
    result = result && entry->Read(&structure->PDAFconfidence, alignment);
    result = result && entry->Read(&structure->SADPanning, alignment);
    result = result && entry->Read(&structure->gyroPanning, alignment);

    // Reading Array PDAFTopoReservedSensitivity from symbol table
    {
        result = result && entry->Read(&structure->PDAFTopoReservedSensitivityCount, alignment);
        structure->PDAFTopoReservedSensitivityID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->PDAFTopoReservedSensitivity = pointerEntry->ReadArray<INT32>(structure->PDAFTopoReservedSensitivityCount, alignment);
            result = structure->PDAFTopoReservedSensitivity != NULL;
        }
        if (!result || structure->PDAFTopoReservedSensitivity == NULL)
        {
            structure->PDAFTopoReservedSensitivityCount = 0;
        }
    }

    // Reading Array sensitivityTriggerArr from symbol table
    {
        result = result && entry->Read(&structure->sensitivityTriggerArrCount, alignment);
        structure->sensitivityTriggerArrID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->sensitivityTriggerArr = PARAMETER_NEW sensitivitySetting[structure->sensitivityTriggerArrCount];
        }
        if (!result || structure->sensitivityTriggerArr == NULL)
        {
            structure->sensitivityTriggerArrCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->sensitivityTriggerArrCount; i++)
        {
            result = LoadsensitivitySetting(pointerEntry, &structure->sensitivityTriggerArr[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTopoCAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixTopoCAFType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTopoCAFType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->profileIndex = (chromatixTopoCAFEnum)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->SADR, alignment);
    result = result && entry->Read(&structure->gyro, alignment);
    result = result && entry->Read(&structure->gyroPanning, alignment);
    result = result && entry->Read(&structure->SADPanning, alignment);
    result = result && entry->Read(&structure->FV, alignment);
    result = result && entry->Read(&structure->faceTriggerHold, alignment);
    result = result && entry->Read(&structure->CAFSceneChangeHold, alignment);

    // Reading Array CAFTopoReservedSensitivity from symbol table
    {
        result = result && entry->Read(&structure->CAFTopoReservedSensitivityCount, alignment);
        structure->CAFTopoReservedSensitivityID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->CAFTopoReservedSensitivity = pointerEntry->ReadArray<INT32>(structure->CAFTopoReservedSensitivityCount, alignment);
            result = structure->CAFTopoReservedSensitivity != NULL;
        }
        if (!result || structure->CAFTopoReservedSensitivity == NULL)
        {
            structure->CAFTopoReservedSensitivityCount = 0;
        }
    }

    // Reading Array sensitivityTriggerArr from symbol table
    {
        result = result && entry->Read(&structure->sensitivityTriggerArrCount, alignment);
        structure->sensitivityTriggerArrID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->sensitivityTriggerArr = PARAMETER_NEW sensitivitySetting[structure->sensitivityTriggerArrCount];
        }
        if (!result || structure->sensitivityTriggerArr == NULL)
        {
            structure->sensitivityTriggerArrCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->sensitivityTriggerArrCount; i++)
        {
            result = LoadsensitivitySetting(pointerEntry, &structure->sensitivityTriggerArr[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixMonitorAlgoConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixMonitorAlgoConfigType(
    ParameterFileSymbolTableEntry* entry,
    chromatixMonitorAlgoConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadchromatixTopoCAFType(entry, &structure->topoCAF, alignment);
    result = result && LoadchromatixTopoPDAFType(entry, &structure->topoPDAF, alignment);
    result = result && LoadchromatixTopoTOFType(entry, &structure->topoTOF, alignment);
    result = result && LoadchromatixTopoDCIAFType(entry, &structure->topoDCIAF, alignment);
    result = result && LoadchromatixTopoDefaultMixerType(entry, &structure->topoDefaultMixer, alignment);
    result = result && LoadchromatixTopoDepthAFType(entry, &structure->topoDepthAF, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFMONITORType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::LoadchromatixAFMONITORType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFMONITORType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && LoadchromatixMonitorAlgoConfigType(entry, &structure->monitorAlgoConfig, alignment);
    result = result && LoadchromatixValueMonitorBankType(entry, &structure->valueMonitorBank, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFMONITORType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixAFMONITORTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFMONITORType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixValueMonitorBankType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFMONITORTypeClass::UnloadchromatixValueMonitorBankType(
    chromatixValueMonitorBankType* structure)
{
    PARAMETER_DELETE[] structure->valueMonitor;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload sensitivitySetting
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFMONITORTypeClass::UnloadsensitivitySetting(
    sensitivitySetting* structure)
{
    PARAMETER_DELETE[] structure->sensitivityTriggerSet;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixTopoDepthAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFMONITORTypeClass::UnloadchromatixTopoDepthAFType(
    chromatixTopoDepthAFType* structure)
{
    PARAMETER_DELETE[] structure->DepthAFTopoReservedSensitivity;
    for (UINT32 i = 0; i < structure->sensitivityTriggerArrCount; i++)
    {
        UnloadsensitivitySetting(&structure->sensitivityTriggerArr[i]);
    }
    PARAMETER_DELETE[] structure->sensitivityTriggerArr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixTopoDefaultMixerType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFMONITORTypeClass::UnloadchromatixTopoDefaultMixerType(
    chromatixTopoDefaultMixerType* structure)
{
    for (UINT32 i = 0; i < structure->sensitivityTriggerArrCount; i++)
    {
        UnloadsensitivitySetting(&structure->sensitivityTriggerArr[i]);
    }
    PARAMETER_DELETE[] structure->sensitivityTriggerArr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixTopoDCIAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFMONITORTypeClass::UnloadchromatixTopoDCIAFType(
    chromatixTopoDCIAFType* structure)
{
    PARAMETER_DELETE[] structure->DCIAFTopoReservedSensitivity;
    for (UINT32 i = 0; i < structure->sensitivityTriggerArrCount; i++)
    {
        UnloadsensitivitySetting(&structure->sensitivityTriggerArr[i]);
    }
    PARAMETER_DELETE[] structure->sensitivityTriggerArr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixTopoTOFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFMONITORTypeClass::UnloadchromatixTopoTOFType(
    chromatixTopoTOFType* structure)
{
    PARAMETER_DELETE[] structure->TOFTopoReservedSensitivity;
    for (UINT32 i = 0; i < structure->sensitivityTriggerArrCount; i++)
    {
        UnloadsensitivitySetting(&structure->sensitivityTriggerArr[i]);
    }
    PARAMETER_DELETE[] structure->sensitivityTriggerArr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixTopoPDAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFMONITORTypeClass::UnloadchromatixTopoPDAFType(
    chromatixTopoPDAFType* structure)
{
    PARAMETER_DELETE[] structure->PDAFTopoReservedSensitivity;
    for (UINT32 i = 0; i < structure->sensitivityTriggerArrCount; i++)
    {
        UnloadsensitivitySetting(&structure->sensitivityTriggerArr[i]);
    }
    PARAMETER_DELETE[] structure->sensitivityTriggerArr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixTopoCAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFMONITORTypeClass::UnloadchromatixTopoCAFType(
    chromatixTopoCAFType* structure)
{
    PARAMETER_DELETE[] structure->CAFTopoReservedSensitivity;
    for (UINT32 i = 0; i < structure->sensitivityTriggerArrCount; i++)
    {
        UnloadsensitivitySetting(&structure->sensitivityTriggerArr[i]);
    }
    PARAMETER_DELETE[] structure->sensitivityTriggerArr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixMonitorAlgoConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFMONITORTypeClass::UnloadchromatixMonitorAlgoConfigType(
    chromatixMonitorAlgoConfigType* structure)
{
    UnloadchromatixTopoCAFType(&structure->topoCAF);
    UnloadchromatixTopoPDAFType(&structure->topoPDAF);
    UnloadchromatixTopoTOFType(&structure->topoTOF);
    UnloadchromatixTopoDCIAFType(&structure->topoDCIAF);
    UnloadchromatixTopoDefaultMixerType(&structure->topoDefaultMixer);
    UnloadchromatixTopoDepthAFType(&structure->topoDepthAF);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixAFMONITORType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFMONITORTypeClass::UnloadchromatixAFMONITORType(
    chromatixAFMONITORType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadchromatixMonitorAlgoConfigType(&structure->monitorAlgoConfig);
    UnloadchromatixValueMonitorBankType(&structure->valueMonitorBank);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixAFMONITORTypeClass::Unloadparameter_versionStruct(
    chromatixAFMONITORType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixAFMONITORTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixAFMONITORTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixAFMONITORTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixAFMONITORType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AFMONITORELEMENTS_NAMESPACE_END
