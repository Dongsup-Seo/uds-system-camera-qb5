////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afpdafelements.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "afpdafelements.h"
#include "parametersetmanager.h"

AFPDAFELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixPDAFTypeClass::chromatixPDAFTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(is2PDEnable);
    PARAMETER_INITIALIZE(ROI);
    PARAMETER_INITIALIZE(focusTable);
    PARAMETER_INITIALIZE(noiseTable);
    PARAMETER_INITIALIZE(confidenceTable);
    PARAMETER_INITIALIZE(confidenceHighTable);
    PARAMETER_INITIALIZE(fallbackConfidence);
    PARAMETER_INITIALIZE(stableTable);
    PARAMETER_INITIALIZE(dofScalerTable);
    PARAMETER_INITIALIZE(focusScan);
    PARAMETER_INITIALIZE(sceneMonitor);
    PARAMETER_INITIALIZE(PDPreprocessing);
    PARAMETER_INITIALIZE(PDInternal);
    PARAMETER_INITIALIZE(PDMultiWindow);
    PARAMETER_INITIALIZE(enableCheckVHStatsRatio);
    PARAMETER_INITIALIZE(VHStatsRatioUnconfidentThreshold);
    PARAMETER_INITIALIZE(enablePDEarlyInterrupt);
    PARAMETER_INITIALIZE(dynamicFrameSkipVBlankThreshold);
    PARAMETER_INITIALIZE(ledPdafMaxFrameAllow);
    PARAMETER_INITIALIZE(sparsePDTouchFaceConfidenceThreshold);
    PARAMETER_INITIALIZE(sparsePDTouchFaceLowDefocusConfidenceThreshold);
    PARAMETER_INITIALIZE(enableEnterLSPLowConfidenceHunting);
    PARAMETER_INITIALIZE(LSPLowConfidenceHuntingThreshold);
    PARAMETER_INITIALIZE(face);
    PARAMETER_INITIALIZE(touch);
    PARAMETER_INITIALIZE(track);
    PARAMETER_INITIALIZE(convergeDoneFilter);
    PARAMETER_INITIALIZE(forceEnterFineSearch);
    PARAMETER_INITIALIZE(advancedSparseControl);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixPDAFTypeClass::chromatixPDAFTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(is2PDEnable);
    PARAMETER_INITIALIZE(ROI);
    PARAMETER_INITIALIZE(focusTable);
    PARAMETER_INITIALIZE(noiseTable);
    PARAMETER_INITIALIZE(confidenceTable);
    PARAMETER_INITIALIZE(confidenceHighTable);
    PARAMETER_INITIALIZE(fallbackConfidence);
    PARAMETER_INITIALIZE(stableTable);
    PARAMETER_INITIALIZE(dofScalerTable);
    PARAMETER_INITIALIZE(focusScan);
    PARAMETER_INITIALIZE(sceneMonitor);
    PARAMETER_INITIALIZE(PDPreprocessing);
    PARAMETER_INITIALIZE(PDInternal);
    PARAMETER_INITIALIZE(PDMultiWindow);
    PARAMETER_INITIALIZE(enableCheckVHStatsRatio);
    PARAMETER_INITIALIZE(VHStatsRatioUnconfidentThreshold);
    PARAMETER_INITIALIZE(enablePDEarlyInterrupt);
    PARAMETER_INITIALIZE(dynamicFrameSkipVBlankThreshold);
    PARAMETER_INITIALIZE(ledPdafMaxFrameAllow);
    PARAMETER_INITIALIZE(sparsePDTouchFaceConfidenceThreshold);
    PARAMETER_INITIALIZE(sparsePDTouchFaceLowDefocusConfidenceThreshold);
    PARAMETER_INITIALIZE(enableEnterLSPLowConfidenceHunting);
    PARAMETER_INITIALIZE(LSPLowConfidenceHuntingThreshold);
    PARAMETER_INITIALIZE(face);
    PARAMETER_INITIALIZE(touch);
    PARAMETER_INITIALIZE(track);
    PARAMETER_INITIALIZE(convergeDoneFilter);
    PARAMETER_INITIALIZE(forceEnterFineSearch);
    PARAMETER_INITIALIZE(advancedSparseControl);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixPDAFTypeClass::~chromatixPDAFTypeClass()
{
    UnloadchromatixPDAFType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixPDAFTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "chromatixPDAF")) == 0)
    {
        name = "chromatixPDAF";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDFocusTableEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDFocusTableEntryType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDFocusTableEntryType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->defocus, alignment);
    result = result && entry->Read(&structure->movePercent, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDFocusTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDFocusTableType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDFocusTableType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array focusEntries from symbol table
    {
        result = entry->Read(&structure->focusEntriesCount, alignment);
        structure->focusEntriesID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->focusEntries = PARAMETER_NEW chromatixPDFocusTableEntryType[structure->focusEntriesCount];
        }
        if (!result || structure->focusEntries == NULL)
        {
            structure->focusEntriesCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->focusEntriesCount; i++)
        {
            result = LoadchromatixPDFocusTableEntryType(pointerEntry, &structure->focusEntries[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAdvancedSparsePDControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixAdvancedSparsePDControlType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAdvancedSparsePDControlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableForSparsePD, alignment);
    result = result && entry->Read(&structure->skipFineScan, alignment);
    result = result && entry->Read(&structure->focusDoneThreshold, alignment);
    result = result && LoadchromatixPDFocusTableType(entry, &structure->focusTable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDForceEnterFineSearchType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDForceEnterFineSearchType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDForceEnterFineSearchType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->directionReverseCountThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromaitxPDConvergeDoneFilterType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromaitxPDConvergeDoneFilterType(
    ParameterFileSymbolTableEntry* entry,
    chromaitxPDConvergeDoneFilterType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->length, alignment);
    result = result && entry->Read(&structure->threshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDTrackControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDTrackControlType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDTrackControlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadchromatixPDTrackControlType_trackROIProcessStruct(entry, &structure->trackROIProcess, alignment);
    result = result && entry->Read(&structure->minMoveThreshold, alignment);
    result = result && LoadchromatixPDTrackControlType_defocusFilterStruct(entry, &structure->defocusFilter, alignment);
    result = result && LoadchromatixPDTrackControlType_fallbackStruct(entry, &structure->fallback, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDTrackControlType_trackROIProcessStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDTrackControlType_trackROIProcessStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDTrackControlType::trackROIProcessStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = statsroidifference::statsroidifferenceClass::LoadchromatixStatsROIDifferenceType(entry, &structure->trackROIRoughStable, alignment);
    result = result && statsroidifference::statsroidifferenceClass::LoadchromatixStatsROIDifferenceType(entry, &structure->trackROIStrictStable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDTrackControlType_defocusFilterStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDTrackControlType_defocusFilterStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDTrackControlType::defocusFilterStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->length, alignment);
    result = result && entry->Read(&structure->confidenceHighThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDTrackControlType_fallbackStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDTrackControlType_fallbackStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDTrackControlType::fallbackStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->fallbackROISizeThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDTouchControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDTouchControlType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDTouchControlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->offCenterThreshold, alignment);
    result = result && entry->Read(&structure->skipSearchIfSceneInFocus, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDFaceControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDFaceControlType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDFaceControlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadchromatixPDFaceControlType_faceROIProcessStruct(entry, &structure->faceROIProcess, alignment);
    result = result && entry->Read(&structure->minMoveThreshold, alignment);
    result = result && LoadchromatixPDFaceControlType_ROIMoveConvergeSuppressStruct(entry, &structure->ROIMoveConvergeSuppress, alignment);
    result = result && LoadchromatixPDFaceControlType_defocusFilterStruct(entry, &structure->defocusFilter, alignment);
    result = result && LoadchromatixPDFaceControlType_fallbackStruct(entry, &structure->fallback, alignment);
    result = result && LoadchromatixPDFaceControlType_faceChangeRefocusTriggerStruct(entry, &structure->faceChangeRefocusTrigger, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDFaceControlType_faceROIProcessStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDFaceControlType_faceROIProcessStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDFaceControlType::faceROIProcessStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->ROIProcessEnable, alignment);
    result = result && statsroidifference::statsroidifferenceClass::LoadchromatixStatsROIDifferenceType(entry, &structure->ROIRoughStable, alignment);
    result = result && statsroidifference::statsroidifferenceClass::LoadchromatixStatsROIDifferenceType(entry, &structure->ROIStrictStable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDFaceControlType_ROIMoveConvergeSuppressStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDFaceControlType_ROIMoveConvergeSuppressStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDFaceControlType::ROIMoveConvergeSuppressStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->stableCountThreshold, alignment);
    result = result && entry->Read(&structure->moveThresholdInX, alignment);
    result = result && entry->Read(&structure->moveThresholdInY, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDFaceControlType_defocusFilterStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDFaceControlType_defocusFilterStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDFaceControlType::defocusFilterStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->length, alignment);
    result = result && entry->Read(&structure->confidenceHighThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDFaceControlType_fallbackStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDFaceControlType_fallbackStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDFaceControlType::fallbackStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->fallbackROISizeThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDFaceControlType_faceChangeRefocusTriggerStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDFaceControlType_faceChangeRefocusTriggerStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDFaceControlType::faceChangeRefocusTriggerStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->roiChangeThreshPercentage, alignment);
    result = result && entry->Read(&structure->roiSizeStableThresh, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDMultiwindowType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDMultiwindowType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDMultiwindowType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->HClipRatioNormalLight, alignment);
    result = result && entry->Read(&structure->VClipRatioNormalLight, alignment);
    result = result && entry->Read(&structure->HClipRatioLowLight, alignment);
    result = result && entry->Read(&structure->VClipRatioLowLight, alignment);
    result = result && entry->Read(&structure->HNumWindows, alignment);
    result = result && entry->Read(&structure->VNumWindows, alignment);
    result = result && entry->Read(&structure->PDPercentile, alignment);
    result = result && entry->Read(&structure->defocusThreshold, alignment);
    result = result && entry->Read(&structure->confidenceThMultiple, alignment);
    result = result && LoadchromatixPDMultiwindowType_multiDepthDetectStruct(entry, &structure->multiDepthDetect, alignment);
    result = result && LoadchromatixPDMultiwindowType_lowLightDetectStruct(entry, &structure->lowLightDetect, alignment);
    result = result && entry->Read(&structure->lockToPeripheralDuringSearch, alignment);
    result = result && LoadchromatixPDMultiwindowType_activZoomControlStruct(entry, &structure->activZoomControl, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDMultiwindowType_multiDepthDetectStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDMultiwindowType_multiDepthDetectStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDMultiwindowType::multiDepthDetectStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->percentile, alignment);
    result = result && entry->Read(&structure->detectThLow, alignment);
    result = result && entry->Read(&structure->detectThHigh, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDMultiwindowType_lowLightDetectStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDMultiwindowType_lowLightDetectStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDMultiwindowType::lowLightDetectStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->gainThLow, alignment);
    result = result && entry->Read(&structure->gainThHigh, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDMultiwindowType_activZoomControlStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDMultiwindowType_activZoomControlStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDMultiwindowType::activZoomControlStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->zoomThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDInternalType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDInternalType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDInternalType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->type, alignment);
    result = result && entry->Read(&structure->initialPosition, alignment);
    result = result && entry->Read(&structure->PDAFEnableFaceCAFPriority, alignment);
    result = result && entry->Read(&structure->incDefocusThresholdPreviousError, alignment);
    result = result && entry->Read(&structure->fineScanRangeEnhance, alignment);
    result = result && entry->Read(&structure->softRegionThresholdMultiplier, alignment);
    result = result && entry->Read(&structure->enableSoftConfidenceThreshold, alignment);
    result = result && entry->Read(&structure->softConfidenceThresholdDelta, alignment);
    result = result && entry->Read(&structure->softConfidenceFocus_pnt, alignment);
    result = result && entry->Read(&structure->enableSoftRegionThresholdHigh, alignment);
    result = result && entry->Read(&structure->softRegionThresholdHighMultiplier, alignment);
    result = result && entry->Read(&structure->softSceneChangeCount, alignment);
    result = result && LoadchromatixPDInternalType_cafStableFrameAllowStruct(entry, &structure->cafStableFrameAllow, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDInternalType_cafStableFrameAllowStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDInternalType_cafStableFrameAllowStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDInternalType::cafStableFrameAllowStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->frameCount, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDPreprocessingType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDPreprocessingType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDPreprocessingType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->enableDoNotUseDefocusSampleByPD, alignment);
    result = result && entry->Read(&structure->enableIncMinConfidenceThresholdByPD, alignment);
    result = result && entry->Read(&structure->PDMaxLimitDoNotUseDefocusSample, alignment);
    result = result && entry->Read(&structure->PDMaxLimitIncMinConfidenceThreshold, alignment);
    result = result && entry->Read(&structure->incMinConfidenceThresholdByPDScaler, alignment);
    result = result && entry->Read(&structure->PDStdThreshold, alignment);
    result = result && entry->Read(&structure->PDDefocusHighErrorScCheck, alignment);
    result = result && entry->Read(&structure->PDAverageDefocusHighErrScCheck, alignment);
    result = result && entry->Read(&structure->PDLowlightGainThresholdScCheck, alignment);

    // Reading Array PDDefocusHighScCheck from symbol table
    {
        result = result && entry->Read(&structure->PDDefocusHighScCheckCount, alignment);
        structure->PDDefocusHighScCheckID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->PDDefocusHighScCheck = pointerEntry->ReadArray<INT32>(structure->PDDefocusHighScCheckCount, alignment);
            result = structure->PDDefocusHighScCheck != NULL;
        }
        if (!result || structure->PDDefocusHighScCheck == NULL)
        {
            structure->PDDefocusHighScCheckCount = 0;
        }
    }

    // Reading Array PDAverageDefocusHighScCheck from symbol table
    {
        result = result && entry->Read(&structure->PDAverageDefocusHighScCheckCount, alignment);
        structure->PDAverageDefocusHighScCheckID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->PDAverageDefocusHighScCheck = pointerEntry->ReadArray<INT32>(structure->PDAverageDefocusHighScCheckCount, alignment);
            result = structure->PDAverageDefocusHighScCheck != NULL;
        }
        if (!result || structure->PDAverageDefocusHighScCheck == NULL)
        {
            structure->PDAverageDefocusHighScCheckCount = 0;
        }
    }

    // Reading Array PDLowlightDefocusHighScCheck from symbol table
    {
        result = result && entry->Read(&structure->PDLowlightDefocusHighScCheckCount, alignment);
        structure->PDLowlightDefocusHighScCheckID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->PDLowlightDefocusHighScCheck = pointerEntry->ReadArray<INT32>(structure->PDLowlightDefocusHighScCheckCount, alignment);
            result = structure->PDLowlightDefocusHighScCheck != NULL;
        }
        if (!result || structure->PDLowlightDefocusHighScCheck == NULL)
        {
            structure->PDLowlightDefocusHighScCheckCount = 0;
        }
    }

    // Reading Array PDLowlightAverageDefocusHighScCheck from symbol table
    {
        result = result && entry->Read(&structure->PDLowlightAverageDefocusHighScCheckCount, alignment);
        structure->PDLowlightAverageDefocusHighScCheckID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->PDLowlightAverageDefocusHighScCheck = pointerEntry->ReadArray<INT32>(structure->PDLowlightAverageDefocusHighScCheckCount, alignment);
            result = structure->PDLowlightAverageDefocusHighScCheck != NULL;
        }
        if (!result || structure->PDLowlightAverageDefocusHighScCheck == NULL)
        {
            structure->PDLowlightAverageDefocusHighScCheckCount = 0;
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDMonitorType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDMonitorType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDMonitorType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->waitAfterFocusCount, alignment);
    result = result && entry->Read(&structure->waitConfidenceRecoverCount, alignment);
    result = result && entry->Read(&structure->defocusedThreshold, alignment);
    result = result && entry->Read(&structure->depthStableThreshold, alignment);
    result = result && entry->Read(&structure->defocusStableFilterLength, alignment);
    result = result && entry->Read(&structure->enableTriggerSuppressionBySceneChange, alignment);
    result = result && entry->Read(&structure->defocusDOFMultiplier, alignment);
    result = result && entry->Read(&structure->defocusThresholdScaler, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDFocusScanType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDFocusScanType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDFocusScanType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->focusConvergeFrameSkip, alignment);
    result = result && entry->Read(&structure->enableFineScan, alignment);
    result = result && entry->Read(&structure->minimumFineScanRange, alignment);
    result = result && entry->Read(&structure->fineScanStepSize, alignment);
    result = result && entry->Read(&structure->focusDoneThreshold, alignment);
    result = result && entry->Read(&structure->enableFineScanExtension, alignment);
    result = result && entry->Read(&structure->firstRunNotConfidenceAdd, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDDofScalerEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDDofScalerEntryType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDDofScalerEntryType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->normalizedLensPosition, alignment);
    result = result && entry->Read(&structure->dofScaler, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDDofScalerTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDDofScalerTableType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDDofScalerTableType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array dofScalerEntries from symbol table
    {
        result = entry->Read(&structure->dofScalerEntriesCount, alignment);
        structure->dofScalerEntriesID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->dofScalerEntries = PARAMETER_NEW chromatixPDDofScalerEntryType[structure->dofScalerEntriesCount];
        }
        if (!result || structure->dofScalerEntries == NULL)
        {
            structure->dofScalerEntriesCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->dofScalerEntriesCount; i++)
        {
            result = LoadchromatixPDDofScalerEntryType(pointerEntry, &structure->dofScalerEntries[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDStableTableEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDStableTableEntryType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDStableTableEntryType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->FPS, alignment);
    result = result && entry->Read(&structure->minimumStableCount, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDStableTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDStableTableType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDStableTableType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array stableEntries from symbol table
    {
        result = entry->Read(&structure->stableEntriesCount, alignment);
        structure->stableEntriesID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->stableEntries = PARAMETER_NEW chromatixPDStableTableEntryType[structure->stableEntriesCount];
        }
        if (!result || structure->stableEntries == NULL)
        {
            structure->stableEntriesCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->stableEntriesCount; i++)
        {
            result = LoadchromatixPDStableTableEntryType(pointerEntry, &structure->stableEntries[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDConfidenceTableEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDConfidenceTableEntryType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDConfidenceTableEntryType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->noiseGain, alignment);
    result = result && entry->Read(&structure->minimumConfidence, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDConfidenceTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDConfidenceTableType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDConfidenceTableType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array confidenceEntries from symbol table
    {
        result = entry->Read(&structure->confidenceEntriesCount, alignment);
        structure->confidenceEntriesID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->confidenceEntries = PARAMETER_NEW chromatixPDConfidenceTableEntryType[structure->confidenceEntriesCount];
        }
        if (!result || structure->confidenceEntries == NULL)
        {
            structure->confidenceEntriesCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->confidenceEntriesCount; i++)
        {
            result = LoadchromatixPDConfidenceTableEntryType(pointerEntry, &structure->confidenceEntries[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDNoiseTableEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDNoiseTableEntryType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDNoiseTableEntryType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->noiseGain, alignment);
    result = result && entry->Read(&structure->noiseGainMultiplier, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDNoiseTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDNoiseTableType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDNoiseTableType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array noiseEntries from symbol table
    {
        result = entry->Read(&structure->noiseEntriesCount, alignment);
        structure->noiseEntriesID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->noiseEntries = PARAMETER_NEW chromatixPDNoiseTableEntryType[structure->noiseEntriesCount];
        }
        if (!result || structure->noiseEntries == NULL)
        {
            structure->noiseEntriesCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->noiseEntriesCount; i++)
        {
            result = LoadchromatixPDNoiseTableEntryType(pointerEntry, &structure->noiseEntries[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDROIConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDROIConfigType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDROIConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->ROILocationY, alignment);
    result = result && entry->Read(&structure->ROILocationX, alignment);
    result = result && entry->Read(&structure->ROINumRows, alignment);
    result = result && entry->Read(&structure->ROINumCols, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDROIType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDROIType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDROIType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array Configuration from symbol table
    {
        result = entry->Read(&structure->ConfigurationCount, alignment);
        structure->ConfigurationID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->Configuration = PARAMETER_NEW chromatixPDROIConfigType[structure->ConfigurationCount];
        }
        if (!result || structure->Configuration == NULL)
        {
            structure->ConfigurationCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->ConfigurationCount; i++)
        {
            result = LoadchromatixPDROIConfigType(pointerEntry, &structure->Configuration[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPDAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadchromatixPDAFType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDAFType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && entry->Read(&structure->is2PDEnable, alignment);
    result = result && LoadchromatixPDROIType(entry, &structure->ROI, alignment);
    result = result && LoadchromatixPDFocusTableType(entry, &structure->focusTable, alignment);
    result = result && LoadchromatixPDNoiseTableType(entry, &structure->noiseTable, alignment);
    result = result && LoadchromatixPDConfidenceTableType(entry, &structure->confidenceTable, alignment);
    result = result && LoadchromatixPDConfidenceTableType(entry, &structure->confidenceHighTable, alignment);
    result = result && entry->Read(&structure->fallbackConfidence, alignment);
    result = result && LoadchromatixPDStableTableType(entry, &structure->stableTable, alignment);
    result = result && LoadchromatixPDDofScalerTableType(entry, &structure->dofScalerTable, alignment);
    result = result && LoadchromatixPDFocusScanType(entry, &structure->focusScan, alignment);
    result = result && LoadchromatixPDMonitorType(entry, &structure->sceneMonitor, alignment);
    result = result && LoadchromatixPDPreprocessingType(entry, &structure->PDPreprocessing, alignment);
    result = result && LoadchromatixPDInternalType(entry, &structure->PDInternal, alignment);
    result = result && LoadchromatixPDMultiwindowType(entry, &structure->PDMultiWindow, alignment);
    result = result && entry->Read(&structure->enableCheckVHStatsRatio, alignment);
    result = result && entry->Read(&structure->VHStatsRatioUnconfidentThreshold, alignment);
    result = result && entry->Read(&structure->enablePDEarlyInterrupt, alignment);
    result = result && entry->Read(&structure->dynamicFrameSkipVBlankThreshold, alignment);
    result = result && LoadledPdafMaxFrameAllowStruct(entry, &structure->ledPdafMaxFrameAllow, alignment);
    result = result && entry->Read(&structure->sparsePDTouchFaceConfidenceThreshold, alignment);
    result = result && entry->Read(&structure->sparsePDTouchFaceLowDefocusConfidenceThreshold, alignment);
    result = result && entry->Read(&structure->enableEnterLSPLowConfidenceHunting, alignment);
    result = result && entry->Read(&structure->LSPLowConfidenceHuntingThreshold, alignment);
    result = result && LoadchromatixPDFaceControlType(entry, &structure->face, alignment);
    result = result && LoadchromatixPDTouchControlType(entry, &structure->touch, alignment);
    result = result && LoadchromatixPDTrackControlType(entry, &structure->track, alignment);
    result = result && LoadchromaitxPDConvergeDoneFilterType(entry, &structure->convergeDoneFilter, alignment);
    result = result && LoadchromatixPDForceEnterFineSearchType(entry, &structure->forceEnterFineSearch, alignment);
    result = result && LoadchromatixAdvancedSparsePDControlType(entry, &structure->advancedSparseControl, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDAFType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDAFType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ledPdafMaxFrameAllowStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixPDAFTypeClass::LoadledPdafMaxFrameAllowStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixPDAFType::ledPdafMaxFrameAllowStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->maxFrameCnt, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDFocusTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixPDFocusTableType(
    chromatixPDFocusTableType* structure)
{
    PARAMETER_DELETE[] structure->focusEntries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixAdvancedSparsePDControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixAdvancedSparsePDControlType(
    chromatixAdvancedSparsePDControlType* structure)
{
    UnloadchromatixPDFocusTableType(&structure->focusTable);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDTrackControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixPDTrackControlType(
    chromatixPDTrackControlType* structure)
{
    UnloadchromatixPDTrackControlType_trackROIProcessStruct(&structure->trackROIProcess);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDTrackControlType_trackROIProcessStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixPDTrackControlType_trackROIProcessStruct(
    chromatixPDTrackControlType::trackROIProcessStruct* structure)
{
    statsroidifference::statsroidifferenceClass::UnloadchromatixStatsROIDifferenceType(&structure->trackROIRoughStable);
    statsroidifference::statsroidifferenceClass::UnloadchromatixStatsROIDifferenceType(&structure->trackROIStrictStable);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDFaceControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixPDFaceControlType(
    chromatixPDFaceControlType* structure)
{
    UnloadchromatixPDFaceControlType_faceROIProcessStruct(&structure->faceROIProcess);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDFaceControlType_faceROIProcessStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixPDFaceControlType_faceROIProcessStruct(
    chromatixPDFaceControlType::faceROIProcessStruct* structure)
{
    statsroidifference::statsroidifferenceClass::UnloadchromatixStatsROIDifferenceType(&structure->ROIRoughStable);
    statsroidifference::statsroidifferenceClass::UnloadchromatixStatsROIDifferenceType(&structure->ROIStrictStable);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDPreprocessingType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixPDPreprocessingType(
    chromatixPDPreprocessingType* structure)
{
    PARAMETER_DELETE[] structure->PDDefocusHighScCheck;
    PARAMETER_DELETE[] structure->PDAverageDefocusHighScCheck;
    PARAMETER_DELETE[] structure->PDLowlightDefocusHighScCheck;
    PARAMETER_DELETE[] structure->PDLowlightAverageDefocusHighScCheck;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDDofScalerTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixPDDofScalerTableType(
    chromatixPDDofScalerTableType* structure)
{
    PARAMETER_DELETE[] structure->dofScalerEntries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDStableTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixPDStableTableType(
    chromatixPDStableTableType* structure)
{
    PARAMETER_DELETE[] structure->stableEntries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDConfidenceTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixPDConfidenceTableType(
    chromatixPDConfidenceTableType* structure)
{
    PARAMETER_DELETE[] structure->confidenceEntries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDNoiseTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixPDNoiseTableType(
    chromatixPDNoiseTableType* structure)
{
    PARAMETER_DELETE[] structure->noiseEntries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDROIType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixPDROIType(
    chromatixPDROIType* structure)
{
    PARAMETER_DELETE[] structure->Configuration;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixPDAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::UnloadchromatixPDAFType(
    chromatixPDAFType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadchromatixPDROIType(&structure->ROI);
    UnloadchromatixPDFocusTableType(&structure->focusTable);
    UnloadchromatixPDNoiseTableType(&structure->noiseTable);
    UnloadchromatixPDConfidenceTableType(&structure->confidenceTable);
    UnloadchromatixPDConfidenceTableType(&structure->confidenceHighTable);
    UnloadchromatixPDStableTableType(&structure->stableTable);
    UnloadchromatixPDDofScalerTableType(&structure->dofScalerTable);
    UnloadchromatixPDPreprocessingType(&structure->PDPreprocessing);
    UnloadchromatixPDFaceControlType(&structure->face);
    UnloadchromatixPDTrackControlType(&structure->track);
    UnloadchromatixAdvancedSparsePDControlType(&structure->advancedSparseControl);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixPDAFTypeClass::Unloadparameter_versionStruct(
    chromatixPDAFType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixPDAFTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixPDAFTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixPDAFTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixPDAFType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AFPDAFELEMENTS_NAMESPACE_END
