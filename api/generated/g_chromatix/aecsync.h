////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecsync.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AECSYNC_H
#define AECSYNC_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "globalelements.h"
#include "aecglobalelements.h"

#define AECSYNC_NAMESPACE_BEGIN namespace aecSync {
#define AECSYNC_NAMESPACE_END }

AECSYNC_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DynamicMixingZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DynamicMixingZoneDataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// weight
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Weight is computed based on absolute difference between self target and peer luma. Higher the difference,
    ///                greater the weight. Weight will be used to compute the final target as: Self target * weight + (1 -
    ///                weight) * peer luma.
    /// Type:          float
    /// Default Value: 0.5
    /// Range:         [0, 1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT weight;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DynamicMixingConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DynamicMixingConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType          zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    DynamicMixingZoneDataType zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// StaticMixingConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct StaticMixingConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lumaMixingWeight
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The weight given to the luma value of the self camera while mixing.
    /// Type:          float
    /// Default Value: 0.5
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT lumaMixingWeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// targetMixingWeight
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   The weight given to the target value of the self camera while mixing.
    /// Type:          float
    /// Default Value: 0.5
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT targetMixingWeight;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECMeteringMixConfigType
///
/// Description:   AEC Static and Dynamic Weight allocation tuning parameters.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECMeteringMixConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// staticMixingConfig
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    StaticMixingConfigType   staticMixingConfig;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dynamicMixingConfig - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                   dynamicMixingConfigCount;
    UINT32                   dynamicMixingConfigID;
    DynamicMixingConfigType* dynamicMixingConfig;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// MultiCamCCTExpCompType
///
/// Description:   CCT-based adjustments to make dual camera exposures similar
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct MultiCamCCTExpCompType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData
    ///
    /// Tuning Level:  often_tune
    /// Description:   Ratio to compensate slave camera exposure based on CCT index
    /// Type:          float
    /// Default Value: 1.0
    /// Range:         [0.0,2.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AbsSensitivityValueType
///
/// Description:   Absolute sensitivity values for different lux conditions.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AbsSensitivityValueType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Reference sensitivity values to be used when absolute sensitivity used for multi-cam.
    /// Type:          float
    /// Default Value: 1.0
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECExposureSyncConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECExposureSyncConfigType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableRelSensitivity
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Setting this flag enables relative sensitivity logic for exposure sync.
    /// Type:          bool
    /// Default Value: true
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                     enableRelSensitivity;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableExposureTimeMatch
    ///
    /// Tuning Level:  often_tune
    /// Description:   Setting this flag enables the matching of slave exposure time to master exposure time.
    /// Type:          bool
    /// Default Value: true
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                     enableExposureTimeMatch;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// expCompMultiplier
    ///
    /// Tuning Level:  must_tune
    /// Description:   Exposure Compensation Multiplier to adjust sensitivity difference factor.
    /// Type:          float
    /// Default Value: 1.0
    /// Range:         [0.5, 2.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                    expCompMultiplier;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// refAbsSensitivity - Array
    ///
    /// Description:   Absolute sensitivity values for different lux conditions.
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                   refAbsSensitivityCount;
    UINT32                   refAbsSensitivityID;
    AbsSensitivityValueType* refAbsSensitivity;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableCCTBasedExpComp
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Setting this flag enables relative sensitivity logic for exposure sync.
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                     enableCCTBasedExpComp;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CCTBasedExpComp - Array
    ///
    /// Description:   CCT-based adjustments to make dual camera exposures similar
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                   CCTBasedExpCompCount;
    UINT32                   CCTBasedExpCompID;
    MultiCamCCTExpCompType*  CCTBasedExpComp;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECMeteringAndExpModeType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECMeteringAndExpModeType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// master
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Master mode metering and exposure configuration selected for multicam usecases.
    /// Default Value: MtrIndepExpIndep
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::AECMtrAndExpoConfigType master;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// slave
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Slave mode metering and exposure configuration selected for multicam usecases.
    /// Default Value: MtrIndepExpFollow
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::AECMtrAndExpoConfigType slave;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECMultiCamType
/// Comments:       Core MultiCam Tuning Definition
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECMultiCamType
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mtrAndExpMode
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECMeteringAndExpModeType mtrAndExpMode;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// luxIndexSelection
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Lux index value to be assigned of slave.
    /// Default Value: UseMaster
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::AECDualCamSlaveLuxType    luxIndexSelection;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// expSyncConfig
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECExposureSyncConfigType expSyncConfig;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mtrMixConfig
    ///
    /// Description:   AEC Static and Dynamic Weight allocation tuning parameters.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECMeteringMixConfigType  mtrMixConfig;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECMultiCamTypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class AECMultiCamTypeClass : public ParameterModule, public AECMultiCamType
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 8;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECMultiCamTypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECMultiCamTypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~AECMultiCamTypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load DynamicMixingZoneDataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadDynamicMixingZoneDataType(
        ParameterFileSymbolTableEntry* entry,
        DynamicMixingZoneDataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load DynamicMixingConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadDynamicMixingConfigType(
        ParameterFileSymbolTableEntry* entry,
        DynamicMixingConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load StaticMixingConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadStaticMixingConfigType(
        ParameterFileSymbolTableEntry* entry,
        StaticMixingConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECMeteringMixConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECMeteringMixConfigType(
        ParameterFileSymbolTableEntry* entry,
        AECMeteringMixConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load MultiCamCCTExpCompType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadMultiCamCCTExpCompType(
        ParameterFileSymbolTableEntry* entry,
        MultiCamCCTExpCompType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AbsSensitivityValueType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAbsSensitivityValueType(
        ParameterFileSymbolTableEntry* entry,
        AbsSensitivityValueType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECExposureSyncConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECExposureSyncConfigType(
        ParameterFileSymbolTableEntry* entry,
        AECExposureSyncConfigType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECMeteringAndExpModeType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECMeteringAndExpModeType(
        ParameterFileSymbolTableEntry* entry,
        AECMeteringAndExpModeType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECMultiCamType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECMultiCamType(
        ParameterFileSymbolTableEntry* entry,
        AECMultiCamType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECMultiCamType::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECMultiCamType::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECMeteringMixConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECMeteringMixConfigType(
        AECMeteringMixConfigType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECExposureSyncConfigType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECExposureSyncConfigType(
        AECExposureSyncConfigType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECMultiCamType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECMultiCamType(
        AECMultiCamType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        AECMultiCamType::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class AECMultiCamTypeClass

AECSYNC_NAMESPACE_END
#endif // AECSYNC_H

