////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afalgotuningelements.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AFALGOTUNINGELEMENTS_H
#define AFALGOTUNINGELEMENTS_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "afglobalelements.h"
#include "statsroipriority.h"

#define AFALGOTUNINGELEMENTS_NAMESPACE_BEGIN namespace afalgotuningelements {
#define AFALGOTUNINGELEMENTS_NAMESPACE_END }

AFALGOTUNINGELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FocusMapConfidenceEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FocusMapConfidenceEntryType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// triggerPoint
    ///
    /// Description:   trigger points
    /// Type:          float
    /// Default Value: 0.0
    /// Range:         [0, unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT triggerPoint;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// confidenceThreshold
    ///
    /// Description:   defocus threshold
    /// Type:          int
    /// Default Value: 50
    /// Range:         [0, 100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 confidenceThreshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FocusMapDefocusEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FocusMapDefocusEntryType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// triggerPoint
    ///
    /// Description:   trigger points
    /// Type:          float
    /// Default Value: 0.0
    /// Range:         [0, unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT triggerPoint;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusThreshold
    ///
    /// Description:   defocus threshold
    /// Type:          int
    /// Default Value: 10
    /// Range:         [0, 399]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 defocusThreshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFFocusMapControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixAFFocusMapControlType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   flag to control enable/disable AF generate focus map
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL            enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// resolution
    ///
    /// Description:   define the output resolution of the focus map
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct resolutionStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// width
        ///
        /// Description:   define the output focus map width
        /// Type:          int
        /// Default Value: 20
        /// Range:         [1, 240]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 width;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// height
        ///
        /// Description:   define the output focus map height
        /// Type:          int
        /// Default Value: 20
        /// Range:         [1, 180]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 height;
    } resolution;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusTable
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct defocusTableStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// triggerMode
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        enum class triggerModeEnum
        {
            AECGain      = 0,
            AECLuxIndex  = 1,
            LensPosition = 2
        } triggerMode;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// triggerEntries - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                    triggerEntriesCount;
        UINT32                    triggerEntriesID;
        FocusMapDefocusEntryType* triggerEntries;
    } defocusTable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// confidenceTable
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct confidenceTableStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// triggerMode
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        enum class triggerModeEnum
        {
            AECGain      = 0,
            AECLuxIndex  = 1,
            LensPosition = 2
        } triggerMode;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// triggerEntries - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                       triggerEntriesCount;
        UINT32                       triggerEntriesID;
        FocusMapConfidenceEntryType* triggerEntries;
    } confidenceTable;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFDistancemapControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixAFDistancemapControlType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// useOTPData
    ///
    /// Description:   if this flag is true, the mapping between lens position and distance will use the data from OTP,
    ///                otherwise, will use the single AF lens table
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL useOTPData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixSagCompensation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixSagCompensation
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   Enable/Disable lens sag compensation.
    /// Type:          uint
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32  enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fDAC - Array
    ///
    /// Description:   fDAC
    /// Type:          uint
    /// Range:         [0,unbounded]
    /// Min Length:    1
    /// Max Length:    3
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32  fDACCount;
    UINT32  fDACID;
    UINT32* fDAC;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fDistance
    ///
    /// Description:   fDistance
    /// Type:          float
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT   fDistance;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// triggerThreshold
    ///
    /// Description:   triggerThreshold
    /// Type:          float
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT   triggerThreshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixModuleTuningReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixModuleTuningReserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lensSagCompensation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixSagCompensation lensSagCompensation;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableHysteresisOffset
    ///
    /// Description:   It enables/disables Hysteresis compensation by provided offset. If Peak is found by only coarse search,
    ///                shift-offset for compensating hysteresis is needed in case of open loop type, especially far area.
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type         enableHysteresisOffset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatixHysteresisOffset
    ///
    /// Description:   Max depending on tuning circumstance. It's the offset value of hysteresis compensation. Please check with
    ///                AFChromatixEnableHysteresisOffset.
    /// Type:          int
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                    chromatixHysteresisOffset;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFOutdoorConfigurationReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixAFOutdoorConfigurationReserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// EnableOutdoorROITune
    ///
    /// Description:   It enhances AF performance in bright spot with low contrast of indoor. Finally, it makes outdoor ROI be
    ///                configured or downsized. We can have situation which indoor and outdoor ROI should be compromised
    ///                simultaneously. This is the case: Outdoor ROI should be downsized because we change the ROI for not
    ///                letting bright spot with low contrast in ROI.
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type EnableOutdoorROITune;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// OutdoorROIRatioX
    ///
    /// Description:   It provides Outdoor ROI x Ratio from chromatix. Please check with AFChromatix_ENOutdoorROITune.
    /// Type:          float
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            OutdoorROIRatioX;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// OutdoorROIRatioY
    ///
    /// Description:   It provides Outdoor ROI y Ratio from chromatix. Please check with AFChromatix_ENOutdoorROITune.
    /// Type:          float
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            OutdoorROIRatioY;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFOrientationDetectionReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixAFOrientationDetectionReserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gravityXLandscapeThreshold
    ///
    /// Description:   a gravity x-axis threshold to determine is device orientation in landscape mode.
    /// Type:          float
    /// Range:         [0,9.8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT gravityXLandscapeThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gravityYLandscapeThreshold
    ///
    /// Description:   a gravity y-axis threshold to determine is device orientation in landscape mode.
    /// Type:          float
    /// Range:         [0,9.8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT gravityYLandscapeThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gravityXPortraitThreshold
    ///
    /// Description:   a gravity x-axis threshold to determine is device orientation in portrait mode.
    /// Type:          float
    /// Range:         [0,9.8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT gravityXPortraitThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gravityYPortraitThreshold
    ///
    /// Description:   a gravity y-axis threshold to determine is device orientation in portrait mode.
    /// Type:          float
    /// Range:         [0,9.8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT gravityYPortraitThreshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFFaceDetectionReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixAFFaceDetectionReserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// robustFaceDetectEnable
    ///
    /// Description:   1 will enable robust fd af feature and 0 will disable it. This feature is required to make existing FD
    ///                based CAF more robust and reduce hunting in some problematic scene. Below 4 param are related to it.
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type robustFaceDetectEnable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// nofaceCountThreshold
    ///
    /// Description:   number of frame threshold after that we wont delay fd based trigger even if scene is not changed.
    ///                Normally keep it very high value like 30sec-1min, (frames as per 30fps, we internally adjust for fps
    ///                change)
    /// Type:          int
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            nofaceCountThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stableCountThreshold
    ///
    /// Description:   number of frame threshold to wait when fd report face detected but scene is not changed and roi size is
    ///                similar to prev. normally it should be around 3-4sec. (frames as per 30fps, we internally adjust for fps
    ///                change)
    /// Type:          int
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            stableCountThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceDetectionROIPositionChangeThreshold
    ///
    /// Description:   Percentage of coordinate change from previous reported roi, Used to minimize CAF trigger when fd report
    ///                coordinate very similar. Should be around 5-15%
    /// Type:          float
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            faceDetectionROIPositionChangeThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceLostTriggerEnable
    ///
    /// Description:   This is optional feature to enable logic where we trigger caf when face lost reported from fd even if
    ///                scene is not changed, This is useful for corcer-face case but this doesn't go well with robust fd logic,
    ///                so should be enabled with robust only with proper tuning of thresholds.
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type faceLostTriggerEnable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceLostStableThreshold
    ///
    /// Description:   number of frame threshold to wait for no face frame after reporting face lost from fd before we trigger
    ///                caf if faceLostTriggerEnable enabled. Value should be around 1-5sec.
    /// Type:          int
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            faceLostStableThreshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFFaceDetectionROITuningReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixAFFaceDetectionROITuningReserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FDROITune
    ///
    /// Description:   In some cases, FD ROI includes non-face area, such as it's located backward from the face. This causes AF
    ///                is focusing to the backward high frequency area instead of face area and it causes blurred face shot. It
    ///                makes ROI be downsized. It can be solved with multi grid ROI, but some target doesn't provide it. In such
    ///                case, it's worth.
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type FDROITune;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FDROIRatio
    ///
    /// Description:   It provides FD ROI Ratio from chromatix with AFChromatix_EN_FDROITune. Please check with
    ///                AFChromatixFDROITune.
    /// Type:          float
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            FDROIRatio;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFFaceROIExtensionReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixAFFaceROIExtensionReserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROIFaceExtensionEnable
    ///
    /// Description:   a switch to turn on face ROI extension which extend ROI region from face detection region and gravity
    ///                information to include hair region and neck region to avoid flat focus value. Constraints: enable to
    ///                include hair region, but may including some background region.
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type ROIFaceExtensionEnable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROIFaceScaleX
    ///
    /// Description:   Face ROI width will be (1+scale) times of width of face detection region.Constraints: set too large will
    ///                include background region. Should not set too high due to no face region in extra horizontal region.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            ROIFaceScaleX;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROIFaceScaleY
    ///
    /// Description:   Face ROI height will be (1+scale) times of height of face detection region. Constraints: this parameter
    ///                enlarge vertical ROI region from face detection region and include hair region and neck region. It will
    ///                avoid flat focus region when face is too smooth.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            ROIFaceScaleY;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROIFaceSymmetricX
    ///
    /// Description:   decide how face ROI extend to left/right side. Value 0.5 means symmetric extension. 0 means extend to
    ///                left. 1 means extend to right.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            ROIFaceSymmetricX;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROIFaceSymmetricY
    ///
    /// Description:   decide how face ROI extend to up/down side. Value 0.5 means symmetric extension. 1 means extend to
    ///                upside. 0 means extend to downside.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            ROIFaceSymmetricY;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixFDPriorityCAF
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixFDPriorityCAF
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// positionChangeThreshold
    ///
    /// Description:   Controls when to reconfigure ROI when position has changed with respect to last stable ROI.
    /// Type:          float
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT positionChangeThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// positionStableThresholdHigh
    ///
    /// Description:   Percentage difference between last and current position above this value indicates face is moving and not
    ///                stable to trigger new search.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT positionStableThresholdHigh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// positionStableThresholdLow
    ///
    /// Description:   Position is deemed stable only after face position change is less than this threshold.
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT positionStableThresholdLow;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sizeChangeThreshold
    ///
    /// Description:   Threshold to check if size change has decreased enough to be considered stable.
    /// Type:          float
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT sizeChangeThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// oldNewSizeDifferenceThreshold
    ///
    /// Description:   Percentage difference between last biggest face and current biggest face to check if we should start
    ///                focusing on new face.
    /// Type:          float
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT oldNewSizeDifferenceThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stableCountSize
    ///
    /// Description:   Number of frames face size should remain stable to trigger new search.
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 stableCountSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stableCountPosition
    ///
    /// Description:   Number of frames face position should remain stable to trigger new search.
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 stableCountPosition;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// noFaceWaitThreshold
    ///
    /// Description:   Number of frames to wait to reset default ROI once face disappears.
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 noFaceWaitThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fpsAdjustmentThreshold
    ///
    /// Description:   If current fps falls below this threshold we'll adjust stability counts.
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 fpsAdjustmentThreshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixFaceDetectionTuningType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixFaceDetectionTuningType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceDetectionPriority
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixFDPriorityCAF                       faceDetectionPriority;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceROIExtension
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAFFaceROIExtensionReserveType       faceROIExtension;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceDetectionROITuning
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAFFaceDetectionROITuningReserveType faceDetectionROITuning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceDetection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAFFaceDetectionReserveType          faceDetection;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceHVWeight
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct faceHVWeightStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Description:   flag to decide whether we should use difference weight for H and V FV value.
        /// Type:          bool
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BOOL  enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// hWeight
        ///
        /// Description:   Focus value will be hWeight*H+(1-hWeight)*V for face case.
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT hWeight;
    } faceHVWeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceFarEnd
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct faceFarEndStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Description:   when enable , new far end will be used for face fine search.
        /// Type:          int
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        globalelements::enable_flag_type enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// farEnd
        ///
        /// Description:   this value will be updated as the new lens far end when fine search happened for face ROI.
        /// Type:          int
        /// Range:         [0,1000]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32            farEnd;
    } faceFarEnd;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixFocusModeSearchLimitType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixFocusModeSearchLimitType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   Determines whether the stats of the first frame will be skipped or not.
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// nearEnd
    ///
    /// Description:   Nearest position lens can move to in this mode
    /// Type:          uint
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32           nearEnd;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// farEnd
    ///
    /// Description:   Farest position lens can move to in this mode
    /// Type:          uint
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32           farEnd;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defaultPosition
    ///
    /// Description:   Default lens reset position in current focus mode.
    /// Type:          uint
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32           defaultPosition;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixFOVCorrection
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixFOVCorrection
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   Enable/Disable FOV compenstation function in AF side.
    /// Type:          uint
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fudgeFactor
    ///
    /// Description:   Compensation factor inorder to get the right crop factor
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  fudgeFactor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// anchorLensPosition1
    ///
    /// Description:   Lens position corresponding to the anchor_distance_mm_1 Need to specify the lens position, can refer to
    ///                Contrast AF tuning settings from single_index_t
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  anchorLensPosition1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// anchorLensPosition2
    ///
    /// Description:   Lens position corresponding to the anchor_distance_mm_2 Need to specify the lens position, can refer to
    ///                Contrast AF tuning settings from single_index_t
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  anchorLensPosition2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// anchorDistanceMM1
    ///
    /// Description:   Physical distance in millimeters at which anchor_lens_pos1 corresponds to.
    /// Type:          int
    /// Range:         [0,3000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  anchorDistanceMM1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// anchorDistanceMM2
    ///
    /// Description:   Physical distance in millimeters at which anchor_lens_pos2 corresponds to.
    /// Type:          int
    /// Range:         [0,3000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  anchorDistanceMM2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// focusConvergeStepSizeBrightLight
    ///
    /// Description:   Step size for focus converge in bright light
    /// Type:          int
    /// Range:         [0,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  focusConvergeStepSizeBrightLight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fineSearchStepSizeBrightLight
    ///
    /// Description:   Step size for fine search in bright light
    /// Type:          int
    /// Range:         [0,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  fineSearchStepSizeBrightLight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// focusConvergeStepSizeLowLight
    ///
    /// Description:   Step size for focus converge in low light
    /// Type:          int
    /// Range:         [0,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  focusConvergeStepSizeLowLight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// fineSearchStepSizeLowLight
    ///
    /// Description:   Step size for fine search in low light
    /// Type:          int
    /// Range:         [0,50]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  fineSearchStepSizeLowLight;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFCommonType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixAFCommonType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// positionNearEnd
    ///
    /// Description:   Nearest position lens can move to.
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 positionNearEnd;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// positionDefaultInMacro
    ///
    /// Description:   Default lens rest position when focus mode is Macro.
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 positionDefaultInMacro;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// positionBoundary
    ///
    /// Description:   Determines near end of search range for Normal focus mode.
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 positionBoundary;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// positionDefaultInNormal
    ///
    /// Description:   Default lens reset position when focus mode is other than macro.
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 positionDefaultInNormal;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// positionFarEnd
    ///
    /// Description:   Farthest point of the search range.
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 positionFarEnd;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// positionNormalHyperfocal
    ///
    /// Description:   Normal position of the lens when focus fails.
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 positionNormalHyperfocal;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// positionMacroRegion
    ///
    /// Description:   Starting lens position of macro region.
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 positionMacroRegion;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lowLightGainThreshold
    ///
    /// Description:   When the AEC gain is above this threshold, we assume it's low light condition.
    /// Type:          int
    /// Range:         [0,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 lowLightGainThreshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFAlgoTuningType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixAFAlgoTuningType
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// commonElements
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAFCommonType                      commonElements;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FOVCorrection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixFOVCorrection                     FOVCorrection;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// searchLimit - Array
    /// Min Length:    1
    /// Max Length:    5
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                                     searchLimitCount;
    UINT32                                     searchLimitID;
    chromatixFocusModeSearchLimitType*         searchLimit;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// faceDetection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixFaceDetectionTuningType           faceDetection;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// statsROIProcess
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct statsROIProcessStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        globalelements::enable_flag_type              ROIProcessEnable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// statsROIPriority
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        statsroipriority::chromatixStatsROIPriorityType statsROIPriority;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// trackROIPriority
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        statsroipriority::chromatixStatsROIPriorityType trackROIPriority;
    } statsROIProcess;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// orientationDetection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAFOrientationDetectionReserveType orientationDetection;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// outdoorROIConfiguration
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAFOutdoorConfigurationReserveType outdoorROIConfiguration;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// moduleTuning
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixModuleTuningReserveType           moduleTuning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// setInvalidFrame
    ///
    /// Description:   Determines whether the stats of the first frame will be skipped or not.
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type                           setInvalidFrame;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// handJitter
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct handJitterStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// AFSingle
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct AFSingleStruct
        {
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// Binary file symbol table entry ID
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32 SymbolTableID;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// enable
            ///
            /// Description:   Enable/Disable Hand jitter function in single AF algorithm
            /// Type:          bool
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            BOOL         enable;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// maxFVInBeginning
            ///
            /// Description:   Check is max fv in first frame
            /// Type:          float
            /// Range:         [0,1]
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            FLOAT        maxFVInBeginning;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// coarseSearch
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            struct coarseSearchStruct
            {
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// Binary file symbol table entry ID
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                UINT32 SymbolTableID;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// minSampleSize
                ///
                /// Description:   Minimum stats number for LSP curve fitting calculation during coarse search
                /// Type:          uint
                /// Range:         [1,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                UINT32 minSampleSize;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// currentGyroscopeThreshold
                ///
                /// Description:   Minimum HJ threshold of average gyro square value during coarse search
                /// Type:          float
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                FLOAT  currentGyroscopeThreshold;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// currentGyroscopeSTDThreshold
                ///
                /// Description:   Minimum HJ threshold of the STD of gyro square value during coarse search
                /// Type:          float
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                FLOAT  currentGyroscopeSTDThreshold;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// gyroscopeThresholdForDifferenceRatio
                ///
                /// Description:   Minimum HJ threshold of gyro square value need to calculate gyro ratio during coarse search
                /// Type:          float
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                FLOAT  gyroscopeThresholdForDifferenceRatio;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// gyroscodeDifferenceRatioThreshold
                ///
                /// Description:   Minimum HJ threshold of gyro difference ratio during fine search
                /// Type:          float
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                FLOAT  gyroscodeDifferenceRatioThreshold;
            } coarseSearch;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// fineSearch
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            struct fineSearchStruct
            {
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// Binary file symbol table entry ID
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                UINT32 SymbolTableID;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// minSampleSize
                ///
                /// Description:   Minimum stats number for LSP curve fitting calculation during fine search
                /// Type:          uint
                /// Range:         [1,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                UINT32       minSampleSize;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// currentGyroscopeThreshold
                ///
                /// Description:   Minimum HJ threshold of average gyro square value during coarse search
                /// Type:          float
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                FLOAT        currentGyroscopeThreshold;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// currentGyroscopeSTDThreshold
                ///
                /// Description:   Minimum HJ threshold of the STD of gyro square value during coarse search
                /// Type:          float
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                FLOAT        currentGyroscopeSTDThreshold;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// gyroscopeThresholdForDifferenceRatio
                ///
                /// Description:   Minimum HJ threshold of gyro square value need to calculate gyro ratio during coarse search
                /// Type:          float
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                FLOAT        gyroscopeThresholdForDifferenceRatio;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// gyroscodeDifferenceRatioThreshold
                ///
                /// Description:   Minimum HJ threshold of gyro difference ratio during fine search
                /// Type:          float
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                FLOAT        gyroscodeDifferenceRatioThreshold;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// FVNormalized
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                struct FVNormalizedStruct
                {
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// Binary file symbol table entry ID
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    UINT32 SymbolTableID;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// enable
                    ///
                    /// Description:   Turn on HJ filter process during fine search
                    /// Type:          bool
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    BOOL   enable;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// highGyroscopeDifferenceThreshold
                    ///
                    /// Description:   Highest threshold of gyro difference of HJ filter process
                    /// Type:          float
                    /// Range:         [0,10]
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    FLOAT  highGyroscopeDifferenceThreshold;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// lowGyroscopeDifferenceThreshold
                    ///
                    /// Description:   Lowest threshold of gyro difference of HJ filter process
                    /// Type:          float
                    /// Range:         [0,10]
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    FLOAT  lowGyroscopeDifferenceThreshold;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// highGryoscopeFVWeight
                    ///
                    /// Description:   Focus value weight when gyro difference is above AF_LSP_HJ_High_Gyro_Diff_Thrs
                    /// Type:          float
                    /// Range:         [0,1]
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    FLOAT  highGryoscopeFVWeight;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// weightType
                    ///
                    /// Description:   choose how to decide FV weight in filter process. 0 use gyro to decide weight. 1 use gyro_diff to decide
                    ///                weight
                    /// Type:          uint
                    /// Range:         [0,1]
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    UINT32 weightType;
                } FVNormalized;
            } fineSearch;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// redoRateThreshold
            ///
            /// Description:   Percentage ratio to retrigger AF search (HJ stats number/ All stats number)
            /// Type:          float
            /// Range:         [0,1]
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            FLOAT        redoRateThreshold;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// handleNeedCount
            ///
            /// Description:   Minimum HJ stats count threshold to trigger HJ algorithm
            /// Type:          uint
            /// Range:         [0,10]
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32       handleNeedCount;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// resetDataBeforeFineSearch
            ///
            /// Description:   Turn on Stats reset function before enter fine search
            /// Type:          bool
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            BOOL         resetDataBeforeFineSearch;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// workingExposureIndex
            ///
            /// Description:   Minimum exposure index requirement to enter HJ algorithm
            /// Type:          uint
            /// Range:         [0,1024]
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32       workingExposureIndex;
        } AFSingle;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// HAFFineSearch
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct HAFFineSearchStruct
        {
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// Binary file symbol table entry ID
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32 SymbolTableID;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// enable
            ///
            /// Description:   enable/disable Hand Jitter function in HAF fine search
            /// Type:          bool
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            BOOL       enable;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// fineSearch
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            struct fineSearchStruct
            {
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// Binary file symbol table entry ID
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                UINT32 SymbolTableID;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// minSampleSize
                ///
                /// Description:   Minimum stats number for LSP curve fitting calculation during HAF fine search
                /// Type:          uint
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                UINT32       minSampleSize;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// currentGyroscopeThreshold
                ///
                /// Description:   Minimum HJ threshold of average gyro square value during HAF fine search
                /// Type:          float
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                FLOAT        currentGyroscopeThreshold;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// currentGyroscopeSTDThreshold
                ///
                /// Description:   Minimum HJ threshold of the STD of gyro square value during HAF fine search
                /// Type:          float
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                FLOAT        currentGyroscopeSTDThreshold;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// gyroscopeThresholdForDifferenceRatio
                ///
                /// Description:   Minimum HJ threshold of gyro square value need to calculate gyro ratio during HAF search
                /// Type:          float
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                FLOAT        gyroscopeThresholdForDifferenceRatio;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// gyroscodeDifferenceRatioThreshold
                ///
                /// Description:   Minimum HJ stats count threshold to trigger HJ algorithm
                /// Type:          float
                /// Range:         [0,10]
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                FLOAT        gyroscodeDifferenceRatioThreshold;

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                /// FVNormalized
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                struct FVNormalizedStruct
                {
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// Binary file symbol table entry ID
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    UINT32 SymbolTableID;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// enable
                    ///
                    /// Description:   Enable/Disable HJ filter process during fine search
                    /// Type:          bool
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    BOOL   enable;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// highGyroscopeDifferenceThreshold
                    ///
                    /// Description:   Highest threshold of gyro difference of HJ filter process
                    /// Type:          float
                    /// Range:         [0,10]
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    FLOAT  highGyroscopeDifferenceThreshold;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// lowGyroscopeDifferenceThreshold
                    ///
                    /// Description:   Lowest threshold of gyro difference of HJ filter process
                    /// Type:          float
                    /// Range:         [0,10]
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    FLOAT  lowGyroscopeDifferenceThreshold;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// highGryoscopeFVWeight
                    ///
                    /// Description:   Focus value weight when gyro difference is above HAF_LSP_HJ_High_Gyro_Diff_Thrs
                    /// Type:          float
                    /// Range:         [0,1]
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    FLOAT  highGryoscopeFVWeight;

                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /// weightType
                    ///
                    /// Description:   choose how to decide FV weight in filter process. 0 use gyro to decide weight. 1 use gyro_diff to decide
                    ///                weight
                    /// Type:          uint
                    /// Range:         [0,1]
                    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    UINT32 weightType;
                } FVNormalized;
            } fineSearch;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// handleNeedCount
            ///
            /// Description:   Minimum HJ threshold of gyro difference ratio during HAF fine search
            /// Type:          uint
            /// Range:         [0,10]
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32     handleNeedCount;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// workingExposureIndex
            ///
            /// Description:   Minimum exposure index requirement to enter HJ algorithm
            /// Type:          uint
            /// Range:         [0,1024]
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32     workingExposureIndex;
        } HAFFineSearch;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// samplingRate
        ///
        /// Description:   Hand jitter need higher sample Gryo sample rate. This value specified how much is Gyro sample rate when
        ///                Hand Jitter function enable
        /// Type:          uint
        /// Range:         [0,1024]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32        samplingRate;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// reportingRate
        ///
        /// Description:   Hand jitter need higher sample Gryo sample rate. This value specified how much is Gyro report rate when
        ///                Hand Jitter function enable
        /// Type:          uint
        /// Range:         [0,1024]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32        reportingRate;
    } handJitter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// spotlightDetection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct spotlightDetectionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Description:   Enable/Disable spotlight detection in AF function
        /// Type:          bool
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BOOL             enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// statsType
        ///
        /// Description:   Range: [0 or 1] 0 - 16x16 YSum stats 1 - 64x48 BG stats; Description: This flag determines spotlight
        ///                detection algorithm stats type. When value is 0, it runs with default 16x16 YSum stats. If the value is
        ///                1, then SPD will run with 64x48 BG stats which provides finer granularity. Constraints: None
        /// Type:          int
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32            statsType;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// bgStatsThreshAutoConvertEnable
        ///
        /// Description:   When enable, all the YSum spotlight tuning thresholds will be auto converted to BG stats compatible
        ///                thresholds. For example, if spotlight tuning thresholds are start_h = 4 and end_h = 12, then with BG auto
        ///                convert, it will directly runtime change thresholds to start_h = 16 and en_h = 48(By multiplying the
        ///                BG/YSum grid ratio). If it is disabled, then the grids will be use as it is, and no auto-convert will
        ///                happen.
        /// Type:          int
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        globalelements::enable_flag_type bgStatsThreshAutoConvertEnable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// bgStatsBrightRegionSatRatioThresh
        ///
        /// Description:   While running BG stats spotlight detection, if any bright region detection zone grid has saturation ratio
        ///                higher than this threshold, then the grid will be count as a bright region.
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            bgStatsBrightRegionSatRatioThresh;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// far_flat_th
        ///
        /// Description:   flat_threshold for far scene when detecting spotlight condition
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            far_flat_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// marco_flat_th
        ///
        /// Description:   flat_threshold for marco scene when detecting spotlight condition
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            marco_flat_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// inc_flat_th
        ///
        /// Description:   inc_flat_threshold to judge current af position is in increase or flat condition
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            inc_flat_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// dec_flat_th
        ///
        /// Description:   dec_flat_threshold to judge current af position is in decrease or flat condition
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            dec_flat_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// spotlight_zone_start_h
        ///
        /// Description:   Defines the horizontal start region of spotlight zone in 16x16 total regions
        /// Type:          uint
        /// Range:         [0,15]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           spotlight_zone_start_h;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// spotlight_zone_end_h
        ///
        /// Description:   Defines the horizontal end region of spotlight zone in 16x16 total regions, the spotlight zone horizontal
        ///                end region = spotlight_zone_end_h - 1
        /// Type:          uint
        /// Range:         [1,16]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           spotlight_zone_end_h;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// spotlight_zone_start_v
        ///
        /// Description:   Defines the vertical start region of spotlight zone in 16x16 total regions
        /// Type:          uint
        /// Range:         [0,15]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           spotlight_zone_start_v;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// spotlight_zone_end_v
        ///
        /// Description:   Defines the vertical end region of spotlight zone in 16x16 total regions, the spotlight zone vertical end
        ///                region = spotlight_zone_end_v - 1
        /// Type:          uint
        /// Range:         [1,16]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           spotlight_zone_end_v;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// background_zone_start_h
        ///
        /// Description:   Defines the horizontal start region of background zone in 16x16 total regions
        /// Type:          uint
        /// Range:         [0,15]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           background_zone_start_h;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// background_zone_end_h
        ///
        /// Description:   Defines the horizontal end region of background zone in 16x16 total regions, the background zone
        ///                horizontal end region = background_zone_end_h - 1
        /// Type:          uint
        /// Range:         [1,16]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           background_zone_end_h;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// background_zone_start_v
        ///
        /// Description:   Defines the vertical start region of background zone in 16x16 total regions
        /// Type:          uint
        /// Range:         [0,15]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           background_zone_start_v;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// background_zone_end_v
        ///
        /// Description:   Defines the vertical end region of background zone in 16x16 total regions, the background zone vertical
        ///                end region = background_zone_end_v - 1
        /// Type:          uint
        /// Range:         [1,16]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           background_zone_end_v;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// exposure_index_trigger_th
        ///
        /// Description:   if exposure index is smaller than this threshold, the spotlight will not be detected
        /// Type:          int
        /// Range:         [200,400]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32            exposure_index_trigger_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// background_luma_avg_th
        ///
        /// Description:   If the average luma of background zone is higher than this threshold, the spotlight will not be detected
        /// Type:          uint
        /// Range:         [1,255]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           background_luma_avg_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// region_low_grey_th
        ///
        /// Description:   Defines the low grey luma threshold. If luma is smaller than this threshold, it will be recognized as a
        ///                low grey region, suggest to disable it by default value 255
        /// Type:          uint
        /// Range:         [1,255]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           region_low_grey_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// region_low_dark_th
        ///
        /// Description:   Defines the dark grey luma threshold. If luma is smaller than this threshold, it will be recognized as a
        ///                dark grey region, good to keep default value
        /// Type:          uint
        /// Range:         [1,255]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           region_low_dark_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// background_low_grey_pct_th
        ///
        /// Description:   if the low grey percentage is higher than this threshold, the low grey flag will be raised. Suggest to
        ///                disable it by default
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            background_low_grey_pct_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// background_dark_grey_pct_th
        ///
        /// Description:   if the dark grey percentage is higher than this threshold, the dark grey flag will be raised
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            background_dark_grey_pct_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// bright_region_luma_delta_background_zone
        ///
        /// Description:   if regions luma is higher than average luma of background zone multiply this parameter, this region will
        ///                be recognize as a bright region
        /// Type:          float
        /// Range:         [0,8]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            bright_region_luma_delta_background_zone;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// bright_region_luma_delta_spotlight_zone_low_grey
        ///
        /// Description:   In low grey condition and cluster is enabled,if regions luma is higher than average luma of background
        ///                zone multiply. This parameter, this region will be recognize as a bright region
        /// Type:          float
        /// Range:         [0,8]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            bright_region_luma_delta_spotlight_zone_low_grey;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// bright_region_luma_delta_spotlight_zone_dark_grey
        ///
        /// Description:   In dark grey condition and cluster is enabled,if regions luma is higher than average luma of background
        ///                zone multiply. This parameter, this region will be recognize as a bright region
        /// Type:          float
        /// Range:         [0,8]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            bright_region_luma_delta_spotlight_zone_dark_grey;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// square_cluster_inc_size
        ///
        /// Description:   The maximum bright region will be the center region and the square cluster size will depends on the
        ///                parameter, set to 0 will disable this cluster effect
        /// Type:          uint
        /// Range:         [0,2]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           square_cluster_inc_size;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// vertical_cluster_inc_size
        ///
        /// Description:   The maximum bright region will be the center region and the vertical cluster size will depends on the
        ///                parameter, set to 0 will disable this cluster effect
        /// Type:          uint
        /// Range:         [0,2]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           vertical_cluster_inc_size;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// horizontal_cluster_inc_size
        ///
        /// Description:   The maximum bright region will be the center region and the vertical cluster size will depends on the
        ///                parameter, set to 0 will disable this cluster effect
        /// Type:          uint
        /// Range:         [0,2]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           horizontal_cluster_inc_size;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// square_cluster_pct_th
        ///
        /// Description:   If the bright region percentage of square cluster zones is higher this threshold, the flag of
        ///                square_bright_region_cluster will be raised
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            square_cluster_pct_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// vertical_cluster_pct_th
        ///
        /// Description:   If the bright region percentage of vertical cluster zones is higher this threshold, the flag of
        ///                vertical_bright_region_cluster will be raised
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            vertical_cluster_pct_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// horizontal_cluster_pct_th
        ///
        /// Description:   If the bright region percentage of horizontal cluster zones is higher this threshold, the flag of
        ///                horizontal_bright_region_cluster will be raised
        /// Type:          float
        /// Range:         [0,1]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT            horizontal_cluster_pct_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// spotlight_detect_cnt_th
        ///
        /// Description:   Spotlight detect flag threshold. Only if consecutive success spotlight detect over the threshold count
        ///                will result in the final spotlight detected flag be updated.
        /// Type:          uint
        /// Range:         [1,unbounded]
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32           spotlight_detect_cnt_th;
    } spotlightDetection;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// distanceMapControl
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAFDistancemapControlType          distanceMapControl;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// focusMapControl
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAFFocusMapControlType             focusMapControl;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFFocusModeType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixAFFocusModeType
{
    AFFocusModeAuto       = 0,
    AFFocusModeContinuous = 1,
    AFFocusModeInfinity   = 2,
    AFFocusModeMacro      = 3,
    AFFocusModeManual     = 4
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixAFAlgoTuningTypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatixAFAlgoTuningTypeClass : public ParameterModule, public chromatixAFAlgoTuningType
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 9;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAFAlgoTuningTypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixAFAlgoTuningTypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatixAFAlgoTuningTypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FocusMapConfidenceEntryType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFocusMapConfidenceEntryType(
        ParameterFileSymbolTableEntry* entry,
        FocusMapConfidenceEntryType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FocusMapDefocusEntryType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFocusMapDefocusEntryType(
        ParameterFileSymbolTableEntry* entry,
        FocusMapDefocusEntryType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFFocusMapControlType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFFocusMapControlType(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFFocusMapControlType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFFocusMapControlType_resolutionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFFocusMapControlType_resolutionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFFocusMapControlType::resolutionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFFocusMapControlType_defocusTableStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFFocusMapControlType_defocusTableStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFFocusMapControlType::defocusTableStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFFocusMapControlType_confidenceTableStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFFocusMapControlType_confidenceTableStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFFocusMapControlType::confidenceTableStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFDistancemapControlType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFDistancemapControlType(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFDistancemapControlType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixSagCompensation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixSagCompensation(
        ParameterFileSymbolTableEntry* entry,
        chromatixSagCompensation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixModuleTuningReserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixModuleTuningReserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatixModuleTuningReserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFOutdoorConfigurationReserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFOutdoorConfigurationReserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFOutdoorConfigurationReserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFOrientationDetectionReserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFOrientationDetectionReserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFOrientationDetectionReserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFFaceDetectionReserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFFaceDetectionReserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFFaceDetectionReserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFFaceDetectionROITuningReserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFFaceDetectionROITuningReserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFFaceDetectionROITuningReserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFFaceROIExtensionReserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFFaceROIExtensionReserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFFaceROIExtensionReserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixFDPriorityCAF
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixFDPriorityCAF(
        ParameterFileSymbolTableEntry* entry,
        chromatixFDPriorityCAF* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixFaceDetectionTuningType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixFaceDetectionTuningType(
        ParameterFileSymbolTableEntry* entry,
        chromatixFaceDetectionTuningType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixFaceDetectionTuningType_faceHVWeightStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixFaceDetectionTuningType_faceHVWeightStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixFaceDetectionTuningType::faceHVWeightStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixFaceDetectionTuningType_faceFarEndStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixFaceDetectionTuningType_faceFarEndStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixFaceDetectionTuningType::faceFarEndStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixFocusModeSearchLimitType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixFocusModeSearchLimitType(
        ParameterFileSymbolTableEntry* entry,
        chromatixFocusModeSearchLimitType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixFOVCorrection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixFOVCorrection(
        ParameterFileSymbolTableEntry* entry,
        chromatixFOVCorrection* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFCommonType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFCommonType(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFCommonType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixAFAlgoTuningType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixAFAlgoTuningType(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load statsROIProcessStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadstatsROIProcessStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType::statsROIProcessStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load handJitterStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadhandJitterStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType::handJitterStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load handJitterStruct_AFSingleStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadhandJitterStruct_AFSingleStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType::handJitterStruct::AFSingleStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load handJitterStruct_AFSingleStruct_coarseSearchStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadhandJitterStruct_AFSingleStruct_coarseSearchStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType::handJitterStruct::AFSingleStruct::coarseSearchStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load handJitterStruct_AFSingleStruct_fineSearchStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadhandJitterStruct_AFSingleStruct_fineSearchStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType::handJitterStruct::AFSingleStruct::fineSearchStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load handJitterStruct_AFSingleStruct_fineSearchStruct_FVNormalizedStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadhandJitterStruct_AFSingleStruct_fineSearchStruct_FVNormalizedStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType::handJitterStruct::AFSingleStruct::fineSearchStruct::FVNormalizedStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load handJitterStruct_HAFFineSearchStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadhandJitterStruct_HAFFineSearchStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType::handJitterStruct::HAFFineSearchStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load handJitterStruct_HAFFineSearchStruct_fineSearchStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadhandJitterStruct_HAFFineSearchStruct_fineSearchStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType::handJitterStruct::HAFFineSearchStruct::fineSearchStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load handJitterStruct_HAFFineSearchStruct_fineSearchStruct_FVNormalizedStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadhandJitterStruct_HAFFineSearchStruct_fineSearchStruct_FVNormalizedStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType::handJitterStruct::HAFFineSearchStruct::fineSearchStruct::FVNormalizedStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load spotlightDetectionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadspotlightDetectionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixAFAlgoTuningType::spotlightDetectionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixAFFocusMapControlType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixAFFocusMapControlType(
        chromatixAFFocusMapControlType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixAFFocusMapControlType_defocusTableStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixAFFocusMapControlType_defocusTableStruct(
        chromatixAFFocusMapControlType::defocusTableStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixAFFocusMapControlType_confidenceTableStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixAFFocusMapControlType_confidenceTableStruct(
        chromatixAFFocusMapControlType::confidenceTableStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixSagCompensation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixSagCompensation(
        chromatixSagCompensation* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixModuleTuningReserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixModuleTuningReserveType(
        chromatixModuleTuningReserveType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixAFAlgoTuningType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixAFAlgoTuningType(
        chromatixAFAlgoTuningType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatixAFAlgoTuningType::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload statsROIProcessStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadstatsROIProcessStruct(
        chromatixAFAlgoTuningType::statsROIProcessStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatixAFAlgoTuningTypeClass

AFALGOTUNINGELEMENTS_NAMESPACE_END
#endif // AFALGOTUNINGELEMENTS_H

