////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecgyro.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "aecgyro.h"
#include "parametersetmanager.h"

AECGYRO_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECGyroTypeClass::AECGyroTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(enableFlag);
    PARAMETER_INITIALIZE(movingAvgFilterLength);
    PARAMETER_INITIALIZE(level2ZoneType);
    PARAMETER_INITIALIZE(triggerDataType);
    PARAMETER_INITIALIZE(gyroExpCtrlTriggerCount);
    PARAMETER_INITIALIZE(gyroExpCtrlTriggerID);
    PARAMETER_INITIALIZE(gyroExpCtrlTrigger);
    PARAMETER_INITIALIZE(gyroExpCtrlValueMonitorsCount);
    PARAMETER_INITIALIZE(gyroExpCtrlValueMonitorsID);
    PARAMETER_INITIALIZE(gyroExpCtrlValueMonitors);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECGyroTypeClass::AECGyroTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(enableFlag);
    PARAMETER_INITIALIZE(movingAvgFilterLength);
    PARAMETER_INITIALIZE(level2ZoneType);
    PARAMETER_INITIALIZE(triggerDataType);
    PARAMETER_INITIALIZE(gyroExpCtrlTrigger);
    PARAMETER_INITIALIZE(gyroExpCtrlValueMonitors);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECGyroTypeClass::~AECGyroTypeClass()
{
    UnloadAECGyroType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* AECGyroTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "aecGyro")) == 0)
    {
        name = "aecGyro";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load GyroExpCtrlValueMonitorType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECGyroTypeClass::LoadGyroExpCtrlValueMonitorType(
    ParameterFileSymbolTableEntry* entry,
    GyroExpCtrlValueMonitorType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String name from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->name = NULL;
        result = result && stringPointerEntry->ReadString(&structure->name, count, alignment);
    }
    result = result && entry->Read(&structure->sensitivity, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadAECValueMonitorType(entry, &structure->valueMonitor, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load GyroExpCtrlAuxZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECGyroTypeClass::LoadGyroExpCtrlAuxZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    GyroExpCtrlAuxZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load GyroExpCtrlAuxZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECGyroTypeClass::LoadGyroExpCtrlAuxZoneType(
    ParameterFileSymbolTableEntry* entry,
    GyroExpCtrlAuxZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadGyroExpCtrlAuxZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load GyroExpCtrlZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECGyroTypeClass::LoadGyroExpCtrlZoneType(
    ParameterFileSymbolTableEntry* entry,
    GyroExpCtrlZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);

    // Reading Array zoneData from symbol table
    {
        result = result && entry->Read(&structure->zoneDataCount, alignment);
        structure->zoneDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->zoneData = PARAMETER_NEW GyroExpCtrlAuxZoneType[structure->zoneDataCount];
        }
        if (!result || structure->zoneData == NULL)
        {
            structure->zoneDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->zoneDataCount; i++)
        {
            result = LoadGyroExpCtrlAuxZoneType(pointerEntry, &structure->zoneData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECGyroType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECGyroTypeClass::LoadAECGyroType(
    ParameterFileSymbolTableEntry* entry,
    AECGyroType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && entry->Read(&structure->enableFlag, alignment);
    result = result && entry->Read(&structure->movingAvgFilterLength, alignment);
    structure->level2ZoneType = (aecglobalelements::AECGyroExpCtrlKeyLevelZoneType)entry->ReadEnum(&result, alignment);
    structure->triggerDataType = (aecglobalelements::AECGyroExpCtrlTriggerDataType)entry->ReadEnum(&result, alignment);

    // Reading Array gyroExpCtrlTrigger from symbol table
    {
        result = result && entry->Read(&structure->gyroExpCtrlTriggerCount, alignment);
        structure->gyroExpCtrlTriggerID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->gyroExpCtrlTrigger = PARAMETER_NEW GyroExpCtrlZoneType[structure->gyroExpCtrlTriggerCount];
        }
        if (!result || structure->gyroExpCtrlTrigger == NULL)
        {
            structure->gyroExpCtrlTriggerCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->gyroExpCtrlTriggerCount; i++)
        {
            result = LoadGyroExpCtrlZoneType(pointerEntry, &structure->gyroExpCtrlTrigger[i], alignment);
        }
    }

    // Reading Array gyroExpCtrlValueMonitors from symbol table
    {
        result = result && entry->Read(&structure->gyroExpCtrlValueMonitorsCount, alignment);
        structure->gyroExpCtrlValueMonitorsID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->gyroExpCtrlValueMonitors = PARAMETER_NEW GyroExpCtrlValueMonitorType[structure->gyroExpCtrlValueMonitorsCount];
        }
        if (!result || structure->gyroExpCtrlValueMonitors == NULL)
        {
            structure->gyroExpCtrlValueMonitorsCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->gyroExpCtrlValueMonitorsCount; i++)
        {
            result = LoadGyroExpCtrlValueMonitorType(pointerEntry, &structure->gyroExpCtrlValueMonitors[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECGyroTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECGyroType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECGyroTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECGyroType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload GyroExpCtrlValueMonitorType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECGyroTypeClass::UnloadGyroExpCtrlValueMonitorType(
    GyroExpCtrlValueMonitorType* structure)
{
    PARAMETER_DELETE[] structure->name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload GyroExpCtrlZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECGyroTypeClass::UnloadGyroExpCtrlZoneType(
    GyroExpCtrlZoneType* structure)
{
    PARAMETER_DELETE[] structure->zoneData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECGyroType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECGyroTypeClass::UnloadAECGyroType(
    AECGyroType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    for (UINT32 i = 0; i < structure->gyroExpCtrlTriggerCount; i++)
    {
        UnloadGyroExpCtrlZoneType(&structure->gyroExpCtrlTrigger[i]);
    }
    PARAMETER_DELETE[] structure->gyroExpCtrlTrigger;
    for (UINT32 i = 0; i < structure->gyroExpCtrlValueMonitorsCount; i++)
    {
        UnloadGyroExpCtrlValueMonitorType(&structure->gyroExpCtrlValueMonitors[i]);
    }
    PARAMETER_DELETE[] structure->gyroExpCtrlValueMonitors;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECGyroTypeClass::Unloadparameter_versionStruct(
    AECGyroType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* AECGyroTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    AECGyroTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW AECGyroTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadAECGyroType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AECGYRO_NAMESPACE_END
