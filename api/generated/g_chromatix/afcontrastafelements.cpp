////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afcontrastafelements.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "afcontrastafelements.h"
#include "parametersetmanager.h"

AFCONTRASTAFELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixContrastAFTypeClass::chromatixContrastAFTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(statisticsSelection);
    PARAMETER_INITIALIZE(face);
    PARAMETER_INITIALIZE(track);
    PARAMETER_INITIALIZE(fullSweep);
    PARAMETER_INITIALIZE(singleSearch);
    PARAMETER_INITIALIZE(spotlightTuning);
    PARAMETER_INITIALIZE(weightedWindow);
    PARAMETER_INITIALIZE(exposureCompensation);
    PARAMETER_INITIALIZE(HVFocusValueStatisticWeighting);
    PARAMETER_INITIALIZE(stepBack);
    PARAMETER_INITIALIZE(secondScan);
    PARAMETER_INITIALIZE(flatnessDetection);
    PARAMETER_INITIALIZE(sceneChangeBV);
    PARAMETER_INITIALIZE(miscellaneous);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixContrastAFTypeClass::chromatixContrastAFTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(statisticsSelection);
    PARAMETER_INITIALIZE(face);
    PARAMETER_INITIALIZE(track);
    PARAMETER_INITIALIZE(fullSweep);
    PARAMETER_INITIALIZE(singleSearch);
    PARAMETER_INITIALIZE(spotlightTuning);
    PARAMETER_INITIALIZE(weightedWindow);
    PARAMETER_INITIALIZE(exposureCompensation);
    PARAMETER_INITIALIZE(HVFocusValueStatisticWeighting);
    PARAMETER_INITIALIZE(stepBack);
    PARAMETER_INITIALIZE(secondScan);
    PARAMETER_INITIALIZE(flatnessDetection);
    PARAMETER_INITIALIZE(sceneChangeBV);
    PARAMETER_INITIALIZE(miscellaneous);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixContrastAFTypeClass::~chromatixContrastAFTypeClass()
{
    UnloadchromatixContrastAFType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixContrastAFTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "chromatixContrastAF")) == 0)
    {
        name = "chromatixContrastAF";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFMiscellaneousType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixAFMiscellaneousType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFMiscellaneousType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->peakDetectInDecreaseEnable, alignment);
    result = result && entry->Read(&structure->frameSkipGoToPeak, alignment);
    result = result && entry->Read(&structure->forceEnableFineSearch, alignment);
    result = result && entry->Read(&structure->optimizePrescan, alignment);
    result = result && entry->Read(&structure->optimizePeakEnable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFSceneChangeBVReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixAFSceneChangeBVReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFSceneChangeBVReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->sceneChangeByBVEnable, alignment);
    result = result && entry->Read(&structure->BVUnstableThresholdOutdoor, alignment);
    result = result && entry->Read(&structure->BVStableThresholdOutdoor, alignment);
    result = result && entry->Read(&structure->BVTriggerCountThresholdOutdoor, alignment);
    result = result && entry->Read(&structure->BVUnstableThresholdNormalLux, alignment);
    result = result && entry->Read(&structure->BVStableThresholdNormalLux, alignment);
    result = result && entry->Read(&structure->BVTriggerCountThresholdNormalLux, alignment);
    result = result && entry->Read(&structure->BVUnstableThresholdLowLux, alignment);
    result = result && entry->Read(&structure->BVStableThresholdLowLux, alignment);
    result = result && entry->Read(&structure->BVTriggerCountThresholdLowLux, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFFlatDetectReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixAFFlatDetectReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFFlatDetectReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->flatDetectSupportEnable, alignment);
    result = result && entry->Read(&structure->BVThresholdFlatDetect, alignment);
    result = result && entry->Read(&structure->flatIncreasingThreshold, alignment);
    result = result && entry->Read(&structure->flatDecreasingThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFSecondScanReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixAFSecondScanReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFSecondScanReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->fRatioMin, alignment);
    result = result && entry->Read(&structure->fRatioMax, alignment);
    result = result && entry->Read(&structure->firstPreviousY1, alignment);
    result = result && entry->Read(&structure->nextY1, alignment);
    result = result && entry->Read(&structure->firstPreviousY2, alignment);
    result = result && entry->Read(&structure->nextY2, alignment);
    result = result && entry->Read(&structure->secondPreviousY1, alignment);
    result = result && entry->Read(&structure->secondNextY1, alignment);
    result = result && entry->Read(&structure->secondPreviousY2, alignment);
    result = result && entry->Read(&structure->secondNextY2, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFStepBackReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixAFStepBackReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFStepBackReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->stepBackEnable, alignment);
    result = result && entry->Read(&structure->stepBackStartInfinity, alignment);
    result = result && entry->Read(&structure->stepBackReverseInfinity, alignment);
    result = result && entry->Read(&structure->stepBackStartMacro, alignment);
    result = result && entry->Read(&structure->stepBackReverseMacro, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFHVStatWeightReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixAFHVStatWeightReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFHVStatWeightReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableHVStatsRatio, alignment);
    result = result && entry->Read(&structure->hvFocusValueWeight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFExposureCompensation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixBAFExposureCompensation(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFExposureCompensation* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->exposureCompensationEnable, alignment);
    result = result && entry->Read(&structure->kickinProgress, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixFaceTableEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixFaceTableEntryType(
    ParameterFileSymbolTableEntry* entry,
    chromatixFaceTableEntryType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->fvIndex, alignment);
    result = result && entry->Read(&structure->weight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixFaceTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixFaceTableType(
    ParameterFileSymbolTableEntry* entry,
    chromatixFaceTableType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->numEntries, alignment);

    // Reading Array indexEntries from symbol table
    {
        result = result && entry->Read(&structure->indexEntriesCount, alignment);
        structure->indexEntriesID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->indexEntries = PARAMETER_NEW chromatixFaceTableEntryType[structure->indexEntriesCount];
        }
        if (!result || structure->indexEntries == NULL)
        {
            structure->indexEntriesCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->indexEntriesCount; i++)
        {
            result = LoadchromatixFaceTableEntryType(pointerEntry, &structure->indexEntries[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixLumaTableEntryType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixLumaTableEntryType(
    ParameterFileSymbolTableEntry* entry,
    chromatixLumaTableEntryType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->luma, alignment);
    result = result && entry->Read(&structure->weight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixLumaTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixLumaTableType(
    ParameterFileSymbolTableEntry* entry,
    chromatixLumaTableType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->numEntries, alignment);

    // Reading Array lumaEntries from symbol table
    {
        result = result && entry->Read(&structure->lumaEntriesCount, alignment);
        structure->lumaEntriesID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->lumaEntries = PARAMETER_NEW chromatixLumaTableEntryType[structure->lumaEntriesCount];
        }
        if (!result || structure->lumaEntries == NULL)
        {
            structure->lumaEntriesCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->lumaEntriesCount; i++)
        {
            result = LoadchromatixLumaTableEntryType(pointerEntry, &structure->lumaEntries[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixRegionTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixRegionTableType(
    ParameterFileSymbolTableEntry* entry,
    chromatixRegionTableType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->numEntries, alignment);

    // Reading Array weight from symbol table
    {
        result = result && entry->Read(&structure->weightCount, alignment);
        structure->weightID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->weight = pointerEntry->ReadArray<FLOAT>(structure->weightCount, alignment);
            result = structure->weight != NULL;
        }
        if (!result || structure->weight == NULL)
        {
            structure->weightCount = 0;
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFWeightedWindowReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixAFWeightedWindowReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFWeightedWindowReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableAFRegionWeightTable, alignment);
    result = result && LoadchromatixRegionTableType(entry, &structure->AFRegionWeightTable, alignment);
    result = result && entry->Read(&structure->enableAFLumaWeightTable, alignment);
    result = result && LoadchromatixLumaTableType(entry, &structure->AFLumaWeightTable, alignment);
    result = result && entry->Read(&structure->enableAFFaceWeightTable, alignment);
    result = result && LoadchromatixFaceTableType(entry, &structure->AFFaceWeightTable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFSpotlightReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixAFSpotlightReserveType(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFSpotlightReserveType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableSpotlightFilterSwitch, alignment);
    result = result && entry->ReadArray(structure->secondOrderSpotlightFilterCoefficients, 10, alignment);
    result = result && entry->ReadArray(structure->fourthOrderSpotlightFilterCoefficients, 10, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFSingleFrameDelay
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixAFSingleFrameDelay(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFSingleFrameDelay* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->baseFrameDelay, alignment);
    result = result && entry->Read(&structure->coarseFrameDelay, alignment);
    result = result && entry->Read(&structure->fineFrameDelay, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBVThreshold
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixBVThreshold(
    ParameterFileSymbolTableEntry* entry,
    chromatixBVThreshold* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->ReadArray(structure->Threshold, 8, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixFVScoreThreshold
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixFVScoreThreshold(
    ParameterFileSymbolTableEntry* entry,
    chromatixFVScoreThreshold* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->defaultStats, alignment);
    result = result && LoadchromatixBVThreshold(entry, &structure->scoreRatioShowDif, alignment);
    result = result && entry->Read(&structure->strictNoise, alignment);
    result = result && entry->Read(&structure->normalNoise, alignment);
    result = result && entry->Read(&structure->lighttNoise, alignment);
    result = result && entry->Read(&structure->strongPeakThres, alignment);
    result = result && entry->Read(&structure->strongIncThres, alignment);
    result = result && entry->Read(&structure->strongDecThres, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixSingleOptic
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixSingleOptic(
    ParameterFileSymbolTableEntry* entry,
    chromatixSingleOptic* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->CAFFarEnd, alignment);
    result = result && entry->Read(&structure->CAFNearEnd, alignment);
    result = result && entry->Read(&structure->TAFFarEnd, alignment);
    result = result && entry->Read(&structure->TAFNearEnd, alignment);
    result = result && entry->Read(&structure->searchRegion1, alignment);
    result = result && entry->Read(&structure->searchRegion2, alignment);
    result = result && entry->Read(&structure->searchRegion3, alignment);
    result = result && entry->Read(&structure->fineSearchRegion, alignment);
    result = result && entry->Read(&structure->farZone, alignment);
    result = result && entry->Read(&structure->nearZone, alignment);
    result = result && entry->Read(&structure->midZone, alignment);
    result = result && entry->Read(&structure->farStartPosition, alignment);
    result = result && entry->Read(&structure->nearStartPosition, alignment);
    result = result && entry->Read(&structure->initialPosition, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixSingleThreshold
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixSingleThreshold(
    ParameterFileSymbolTableEntry* entry,
    chromatixSingleThreshold* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->changeRatioInc, alignment);
    result = result && entry->Read(&structure->changeRatioDec, alignment);
    result = result && entry->Read(&structure->flatIncThres, alignment);
    result = result && entry->Read(&structure->flatDecThres, alignment);
    result = result && entry->Read(&structure->fvIncFlatThres, alignment);
    result = result && entry->Read(&structure->fvDecFlatThres, alignment);
    result = result && entry->Read(&structure->fvIncFlatThresSpotlight, alignment);
    result = result && entry->Read(&structure->fvDecFlatThresSpotlight, alignment);
    result = result && entry->Read(&structure->macroThres, alignment);
    result = result && entry->Read(&structure->dropThres, alignment);
    result = result && entry->Read(&structure->histogramDecreaseDecreaseThreshold, alignment);
    result = result && entry->Read(&structure->histogramIncreaseDecreaseThreshold, alignment);
    result = result && LoadchromatixBVThreshold(entry, &structure->threeFrameDecreaseDecreasePeakThreshold, alignment);
    result = result && LoadchromatixBVThreshold(entry, &structure->threeFrameIncreaseDecreasePeakThreshold, alignment);
    result = result && LoadchromatixBVThreshold(entry, &structure->decreaseDecreasePeakThreshold, alignment);
    result = result && LoadchromatixBVThreshold(entry, &structure->decreaseDecreasePeakWithNoiseThreshold, alignment);
    result = result && LoadchromatixBVThreshold(entry, &structure->increaseDecreasePeakThreshold, alignment);
    result = result && LoadchromatixBVThreshold(entry, &structure->increaseDecreasePeakWithNoiseThreshold, alignment);
    result = result && LoadchromatixBVThreshold(entry, &structure->flatThreshold, alignment);
    result = result && entry->Read(&structure->spotlightFlatThresholdMarco, alignment);
    result = result && entry->Read(&structure->spotlightFlatThresholdInfinity, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixStepSize
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixStepSize(
    ParameterFileSymbolTableEntry* entry,
    chromatixStepSize* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->region0, alignment);
    result = result && entry->Read(&structure->region1, alignment);
    result = result && entry->Read(&structure->region2, alignment);
    result = result && entry->Read(&structure->region3, alignment);
    result = result && entry->Read(&structure->region4, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixStepSizeTable
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixStepSizeTable(
    ParameterFileSymbolTableEntry* entry,
    chromatixStepSizeTable* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadchromatixStepSize(entry, &structure->prescanNormalLight, alignment);
    result = result && LoadchromatixStepSize(entry, &structure->prescanLowLight, alignment);
    result = result && LoadchromatixStepSize(entry, &structure->finescanNormalLight, alignment);
    result = result && LoadchromatixStepSize(entry, &structure->finescanLowLight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFTuningSingle
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixAFTuningSingle(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFTuningSingle* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array index from symbol table
    {
        result = entry->Read(&structure->indexCount, alignment);
        structure->indexID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->index = pointerEntry->ReadArray<UINT32>(structure->indexCount, alignment);
            result = structure->index != NULL;
        }
        if (!result || structure->index == NULL)
        {
            structure->indexCount = 0;
        }
    }
    result = result && entry->Read(&structure->actuatorType, alignment);
    result = result && entry->Read(&structure->isHysteresisCompensationNeeded, alignment);
    result = result && entry->Read(&structure->stepIndexPerMicroMeter, alignment);
    result = result && entry->Read(&structure->previewAssistedAFEnable, alignment);
    result = result && LoadchromatixStepSizeTable(entry, &structure->TAFStepTable, alignment);
    result = result && LoadchromatixStepSizeTable(entry, &structure->CAFStepTable, alignment);
    result = result && LoadchromatixSingleThreshold(entry, &structure->software, alignment);
    result = result && LoadchromatixSingleThreshold(entry, &structure->hardware, alignment);
    result = result && LoadchromatixSingleOptic(entry, &structure->optics, alignment);
    result = result && LoadchromatixFVScoreThreshold(entry, &structure->FVScoreThreshold, alignment);
    result = result && LoadchromatixAFSingleFrameDelay(entry, &structure->frameDelay, alignment);
    result = result && entry->ReadArray(structure->BVGain, 8, alignment);
    result = result && entry->Read(&structure->ignoreFirstInvalidFrame, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixAFTuningFullsweep
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixAFTuningFullsweep(
    ParameterFileSymbolTableEntry* entry,
    chromatixAFTuningFullsweep* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->numStepsBetweenStatPoints, alignment);
    result = result && entry->Read(&structure->frameDelayInf, alignment);
    result = result && entry->Read(&structure->frameDelayNorm, alignment);
    result = result && entry->Read(&structure->frameDelayFinal, alignment);
    result = result && entry->Read(&structure->previewAssistedAFEnable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixContrastAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadchromatixContrastAFType(
    ParameterFileSymbolTableEntry* entry,
    chromatixContrastAFType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    structure->statisticsSelection = (AFStatisticComputationType)entry->ReadEnum(&result, alignment);
    result = result && LoadfaceStruct(entry, &structure->face, alignment);
    result = result && LoadtrackStruct(entry, &structure->track, alignment);
    result = result && LoadchromatixAFTuningFullsweep(entry, &structure->fullSweep, alignment);
    result = result && LoadchromatixAFTuningSingle(entry, &structure->singleSearch, alignment);
    result = result && LoadchromatixAFSpotlightReserveType(entry, &structure->spotlightTuning, alignment);
    result = result && LoadchromatixAFWeightedWindowReserveType(entry, &structure->weightedWindow, alignment);
    result = result && LoadchromatixBAFExposureCompensation(entry, &structure->exposureCompensation, alignment);
    result = result && LoadchromatixAFHVStatWeightReserveType(entry, &structure->HVFocusValueStatisticWeighting, alignment);
    result = result && LoadchromatixAFStepBackReserveType(entry, &structure->stepBack, alignment);
    result = result && LoadchromatixAFSecondScanReserveType(entry, &structure->secondScan, alignment);
    result = result && LoadchromatixAFFlatDetectReserveType(entry, &structure->flatnessDetection, alignment);
    result = result && LoadchromatixAFSceneChangeBVReserveType(entry, &structure->sceneChangeBV, alignment);
    result = result && LoadchromatixAFMiscellaneousType(entry, &structure->miscellaneous, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixContrastAFType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixContrastAFType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load faceStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadfaceStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixContrastAFType::faceStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->ROIProcessEnable, alignment);
    result = result && statsroidifference::statsroidifferenceClass::LoadchromatixStatsROIDifferenceType(entry, &structure->ROIStable, alignment);
    result = result && statsroidifference::statsroidifferenceClass::LoadchromatixStatsROIDifferenceType(entry, &structure->ROIChange, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load trackStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixContrastAFTypeClass::LoadtrackStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixContrastAFType::trackStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = statsroidifference::statsroidifferenceClass::LoadchromatixStatsROIDifferenceType(entry, &structure->TrackROIStable, alignment);
    result = result && statsroidifference::statsroidifferenceClass::LoadchromatixStatsROIDifferenceType(entry, &structure->TrackROIChange, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixFaceTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixContrastAFTypeClass::UnloadchromatixFaceTableType(
    chromatixFaceTableType* structure)
{
    PARAMETER_DELETE[] structure->indexEntries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixLumaTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixContrastAFTypeClass::UnloadchromatixLumaTableType(
    chromatixLumaTableType* structure)
{
    PARAMETER_DELETE[] structure->lumaEntries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixRegionTableType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixContrastAFTypeClass::UnloadchromatixRegionTableType(
    chromatixRegionTableType* structure)
{
    PARAMETER_DELETE[] structure->weight;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixAFWeightedWindowReserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixContrastAFTypeClass::UnloadchromatixAFWeightedWindowReserveType(
    chromatixAFWeightedWindowReserveType* structure)
{
    UnloadchromatixRegionTableType(&structure->AFRegionWeightTable);
    UnloadchromatixLumaTableType(&structure->AFLumaWeightTable);
    UnloadchromatixFaceTableType(&structure->AFFaceWeightTable);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixAFTuningSingle
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixContrastAFTypeClass::UnloadchromatixAFTuningSingle(
    chromatixAFTuningSingle* structure)
{
    PARAMETER_DELETE[] structure->index;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixContrastAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixContrastAFTypeClass::UnloadchromatixContrastAFType(
    chromatixContrastAFType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadfaceStruct(&structure->face);
    UnloadtrackStruct(&structure->track);
    UnloadchromatixAFTuningSingle(&structure->singleSearch);
    UnloadchromatixAFWeightedWindowReserveType(&structure->weightedWindow);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixContrastAFTypeClass::Unloadparameter_versionStruct(
    chromatixContrastAFType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload faceStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixContrastAFTypeClass::UnloadfaceStruct(
    chromatixContrastAFType::faceStruct* structure)
{
    statsroidifference::statsroidifferenceClass::UnloadchromatixStatsROIDifferenceType(&structure->ROIStable);
    statsroidifference::statsroidifferenceClass::UnloadchromatixStatsROIDifferenceType(&structure->ROIChange);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload trackStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixContrastAFTypeClass::UnloadtrackStruct(
    chromatixContrastAFType::trackStruct* structure)
{
    statsroidifference::statsroidifferenceClass::UnloadchromatixStatsROIDifferenceType(&structure->TrackROIStable);
    statsroidifference::statsroidifferenceClass::UnloadchromatixStatsROIDifferenceType(&structure->TrackROIChange);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixContrastAFTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixContrastAFTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixContrastAFTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixContrastAFType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AFCONTRASTAFELEMENTS_NAMESPACE_END
