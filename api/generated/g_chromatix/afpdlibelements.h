////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afpdlibelements.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AFPDLIBELEMENTS_H
#define AFPDLIBELEMENTS_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "afglobalelements.h"
#include "statsglobalelements.h"

#define AFPDLIBELEMENTS_NAMESPACE_BEGIN namespace afpdlibelements {
#define AFPDLIBELEMENTS_NAMESPACE_END }

AFPDLIBELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDAFHardwareResamplerInstruction
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDAFHardwareResamplerInstruction
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// S - Array
    ///
    /// Description:   Array of indices indicating the coordinates of pixels that resampler will use for calculation in the form
    ///                of [S0x, S0y...S4x, S4y]
    /// Type:          int
    /// Range:         [-3,34]
    /// Min Length:    1
    /// Max Length:    8
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SCount;
    UINT32 SID;
    INT32* S;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// O - Array
    ///
    /// Description:   Array of resampler coefficients in the form of [OP0-OP3][K0-K3]
    /// Type:          float
    /// Range:         [-2,2]
    /// Min Length:    1
    /// Max Length:    16
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 OCount;
    UINT32 OID;
    FLOAT* O;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDAFHardwareResampler
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDAFHardwareResampler
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   Enables resampler block in PD Hardware.
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type                           enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// inputBlockWidth
    ///
    /// Description:   Input block width for resampler
    /// Type:          int
    /// Range:         [0,31]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                      inputBlockWidth;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// inputBlockHeight
    ///
    /// Description:   Input block height for resampler
    /// Type:          int
    /// Range:         [0,3]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                      inputBlockHeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// outputBlockWidth
    ///
    /// Description:   Output block width for resampler
    /// Type:          int
    /// Range:         [0,31]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                      outputBlockWidth;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// outputBlockHeight
    ///
    /// Description:   Output block height for resampler
    /// Type:          int
    /// Range:         [0,31]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                      outputBlockHeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// instructions - Array
    /// Min Length:    1
    /// Max Length:    32
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                                     instructionsCount;
    UINT32                                     instructionsID;
    chromatixPDAFHardwareResamplerInstruction* instructions;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDAFHardwarePixelSeparator
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDAFHardwarePixelSeparator
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// inputBlockWidth
    ///
    /// Description:   Input block width for pixel separator
    /// Type:          int
    /// Range:         [0,15]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  inputBlockWidth;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// inputBlockHeight
    ///
    /// Description:   Input block height for pixel separator
    /// Type:          int
    /// Range:         [0,15]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  inputBlockHeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// outputBlockWidth
    ///
    /// Description:   Output block width for each buffer (L/R) outputted from pixel separator
    /// Type:          int
    /// Range:         [0,31]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  outputBlockWidth;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// outputBlockHeight
    ///
    /// Description:   Output block height for each buffer (L/R) outputted from pixel separator
    /// Type:          int
    /// Range:         [0,3]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  outputBlockHeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// L_map - Array
    ///
    /// Description:   Array of indices indicating where L pixels are located for incoming buffer
    /// Type:          int
    /// Range:         [0,255]
    /// Min Length:    1
    /// Max Length:    128
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 L_mapCount;
    UINT32 L_mapID;
    INT32* L_map;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// R_map - Array
    ///
    /// Description:   Array of indices indicating where R pixels are located for incoming buffer
    /// Type:          int
    /// Range:         [0,255]
    /// Min Length:    1
    /// Max Length:    128
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 R_mapCount;
    UINT32 R_mapID;
    INT32* R_map;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDAFHardwareLineExtractor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDAFHardwareLineExtractor
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// XOffset
    ///
    /// Description:   Horizontal offset for each line
    /// Type:          int
    /// Range:         [0,1451]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 XOffset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// YOffset
    ///
    /// Description:   Vertical offset for each line
    /// Type:          int
    /// Range:         [0,127]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 YOffset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// HalfLine
    ///
    /// Description:   Half line indication for each line
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL  HalfLine;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDAFHardwarePixelExtractor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDAFHardwarePixelExtractor
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   Enabling pixel extractor
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// outputWidth
    ///
    /// Description:   Expected output width
    /// Type:          int
    /// Range:         [0,63]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            outputWidth;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// outputHeight
    ///
    /// Description:   Expected output height
    /// Type:          int
    /// Range:         [0,63]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            outputHeight;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTuningHardwarePattern
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTuningHardwarePattern
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// pixelExtractor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDAFHardwarePixelExtractor pixelExtractor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lineExtractor - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                              lineExtractorCount;
    UINT32                              lineExtractorID;
    chromatixPDAFHardwareLineExtractor* lineExtractor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// pixelSeparator
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDAFHardwarePixelSeparator pixelSeparator;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// resampler
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDAFHardwareResampler      resampler;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gridWidthScaleRatio
    ///
    /// Description:   Ratio of HW grid width for different sets of hardwarePattern
    /// Type:          float
    /// Range:         [0,4]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                               gridWidthScaleRatio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gridHeightScaleRatio
    ///
    /// Description:   Ratio of HW grid height for different sets of hardwarePattern
    /// Type:          float
    /// Range:         [0,4]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                               gridHeightScaleRatio;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTuningHardwareGeometry
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTuningHardwareGeometry
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enabldHardwarePDModule
    ///
    /// Description:   A flag indicating hardware PD module is enabled or not.
    /// Type:          int
    /// Default Value: 0
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type enabldHardwarePDModule;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableOverlap
    ///
    /// Description:   A flag indicating overlap in postprocess grid in enabled or not.
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type enableOverlap;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// numOfHoriGrids
    ///
    /// Description:   Number of horizontal grids for the postprocess grids (multiwindow)
    /// Type:          int
    /// Range:         [1,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            numOfHoriGrids;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// numOfVertGrids
    ///
    /// Description:   Number of vertical grids for the postprocess grids (multiwindow)
    /// Type:          int
    /// Range:         [1,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            numOfVertGrids;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// horiNumOfRGNInGridUnit
    ///
    /// Description:   Number of horizontal HW RGN in the grid unit
    /// Type:          int
    /// Range:         [1,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            horiNumOfRGNInGridUnit;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// vertNumOfRGNInGridUnit
    ///
    /// Description:   Number of vertical HW RGN in the grid unit
    /// Type:          int
    /// Range:         [1,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            vertNumOfRGNInGridUnit;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// horiRegionOffset
    ///
    /// Description:   horizontal offset for the HWGrid configuration
    /// Type:          int
    /// Range:         [0,2047]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            horiRegionOffset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// vertRegionOffset
    ///
    /// Description:   vertical offset for the HWGrid configuration
    /// Type:          int
    /// Range:         [0,2047]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            vertRegionOffset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// widhtOfRegion
    ///
    /// Description:   width of each HWGrid size
    /// Type:          int
    /// Range:         [0,2047]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            widhtOfRegion;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// heightOfRegion
    ///
    /// Description:   height of each HWGrid size
    /// Type:          int
    /// Range:         [0,2047]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            heightOfRegion;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// horiNumOfRegion
    ///
    /// Description:   number of HWGRid in horizontal direction
    /// Type:          int
    /// Range:         [1,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            horiNumOfRegion;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// vertNumOfRegion
    ///
    /// Description:   number of HWGrid in vertical direction
    /// Type:          int
    /// Range:         [1,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            vertNumOfRegion;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTuningSkipControl
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTuningSkipControl
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// staticFrameCountThres
    ///
    /// Description:   Frame count thres for static lens to trigger PD processing skip logic
    /// Type:          int
    /// Range:         [3,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 staticFrameCountThres;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxFrameRate
    ///
    /// Description:   Specify the PD processing frame rate when PD processing skip logic kick in, 30 means no skip.
    /// Type:          int
    /// Range:         [5,30]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 maxFrameRate;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixHVConfWeight
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixHVConfWeight
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// weight
    ///
    /// Description:   Weight at specific confidence
    /// Type:          float
    /// Range:         [0,unbounded]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT weight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// confThreshold
    ///
    /// Description:   Confidence threshold for HV
    /// Type:          int
    /// Range:         [0,2048]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 confThreshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDAxisControl
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixPDAxisControl
{
    Horizontal         = 0,
    Vertical           = 1,
    HorizontalVertical = 2
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixHVControl
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixHVControl
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDProcessingAxis
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDAxisControl PDProcessingAxis;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// horizontalConfWeightTuning - Array
    /// Min Length:    1
    /// Max Length:    4
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                 horizontalConfWeightTuningCount;
    UINT32                 horizontalConfWeightTuningID;
    chromatixHVConfWeight* horizontalConfWeightTuning;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// verticalConfWeightTuning - Array
    /// Min Length:    1
    /// Max Length:    4
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                 verticalConfWeightTuningCount;
    UINT32                 verticalConfWeightTuningID;
    chromatixHVConfWeight* verticalConfWeightTuning;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDProcessingMode
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixPDProcessingMode
{
    PD_PROCESSING_MODE_DYNAMIC          = 0,
    PD_PROCESSING_MODE_LOW              = 1,
    PD_PROCESSING_MODE_MED              = 2,
    PD_PROCESSING_MODE_HIGH             = 3,
    PD_PROCESSING_MODE_CONSTANT_QUALITY = 4,
    PD_PROCESSING_MODE_CONSTANT_COST    = 5
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTuningProcessLevel
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTuningProcessLevel
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// processingMode
    ///
    /// Description:   Specify the PD processing Mode, Dynamic/LOW/MED/HIGH is deprecate, use const_quality/cost instead
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDProcessingMode processingMode;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dynamicLevel
    ///
    /// Description:   Tuning parameter for dynamic adjustment of vertical density at which PD is computed in focusing state
    /// Type:          int
    /// Range:         [1,1000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                     dynamicLevel;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// staticLevel
    ///
    /// Description:   Tuning parameter for dynamic adjustment of vertical density at which PD is computed in monitor state
    /// Type:          int
    /// Range:         [1,1000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                     staticLevel;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTuningAdaptiveK
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTuningAdaptiveK
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable
    ///
    /// Description:   A flag for enabling adaptive k feature or not.
    /// Type:          int
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// timeoutFrameCntThres
    ///
    /// Description:   A timeout frame number. If frame counter meets the threshold as adaptive k is in state 1, it will return
    ///                to state 0.
    /// Type:          int
    /// Range:         [1,255]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            timeoutFrameCntThres;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// filterSize
    ///
    /// Description:   Size of the median filter. The median filter process is utilized as estimating DCC value from adaptive k
    ///                data history.
    /// Type:          int
    /// Range:         [1,9]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            filterSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// state0StableCntThres
    ///
    /// Description:   Stable count threshold as adaptive k is in state 0. Before entering state 1, all adaptive k input stats
    ///                should meet state-0-requirements for at least state0StableCntThres frames.
    /// Type:          int
    /// Range:         [1,255]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            state0StableCntThres;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// state1StableCntThres
    ///
    /// Description:   Stable count threshold as adaptive k is in state 1. Before entering state 2, all adaptive k input stats
    ///                should meet state-2-requirements for at least state1StableCntThres frames.
    /// Type:          int
    /// Range:         [1,255]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            state1StableCntThres;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minimumLensPosDelta
    ///
    /// Description:   Minimum number of lens position delta as estimating K value in state 2. If the lens position delta is
    ///                less than the value, the K estimate will be abandoned.
    /// Type:          int
    /// Range:         [1,400]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            minimumLensPosDelta;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// state0ConfThres
    ///
    /// Description:   Minimum confidence value before entering state 1 as adaptive k is in state 0.
    /// Type:          int
    /// Range:         [1,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            state0ConfThres;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// state1ConfThres
    ///
    /// Description:   Minimum confidence value before entering state 2 as adaptive k is in state 1.
    /// Type:          int
    /// Range:         [1,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32            state1ConfThres;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// state0PhaseDiffThres
    ///
    /// Description:   Minimum phase difference value before entering state 1 as adaptive k is in state 0.
    /// Type:          float
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            state0PhaseDiffThres;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// state1PhaseDiffThres
    ///
    /// Description:   Minimum phase difference value before entering state 2 as adaptive k is in state 1.
    /// Type:          float
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            state1PhaseDiffThres;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tolNearTargetUpperBound
    ///
    /// Description:   Upper bound ratio with respect to golden module K value as target is at near end (MACRO). If estimated K
    ///                is within the bound, this means K value is valid for proper AF behavior.
    /// Type:          float
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            tolNearTargetUpperBound;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tolNearTargetLowerBound
    ///
    /// Description:   Lower bound ratio with respect to golden module K value as target is at near end (MACRO). If estimated K
    ///                is within the bound, this means K value is valid for proper AF behavior.
    /// Type:          float
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            tolNearTargetLowerBound;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tolFarTargetUpperBound
    ///
    /// Description:   Upper bound ratio with respect to golden module K value as target is at far end (INFINITY). If estimated
    ///                K is within the bound, this means K value is valid for proper AF behavior.
    /// Type:          float
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            tolFarTargetUpperBound;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// tolFarTargetLowerBound
    ///
    /// Description:   Lower bound ratio with respect to golden module K value as target is at far end (INFINITY). If estimated
    ///                K is within the bound, this means K value is valid for proper AF behavior.
    /// Type:          float
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            tolFarTargetLowerBound;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDLIBPostprocessingTemporalFilterSetting
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDLIBPostprocessingTemporalFilterSetting
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// AECTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::trigger_pt_type_aec AECTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dynamicWeight
    ///
    /// Description:   Weight of temporal filter while lens is moving. Weight=1.0 disables temporal filter.
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               dynamicWeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// staticWeight
    ///
    /// Description:   Weight of temporal filter while lens is not moving. Weight=1.0 disables temporal filter.
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               staticWeight;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTemporalFilterTrigger
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTemporalFilterTrigger
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// temporalFilterSet - Array
    /// Length:        3
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDLIBPostprocessingTemporalFilterSetting temporalFilterSet[3];
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTuningPostProcess
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTuningPostProcess
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// biasVectorStrength
    ///
    /// Description:   Strength of bias to be applied to disparity vector for the case of repeating patterns.
    /// Type:          float
    /// Range:         [0.0,0.4]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                          biasVectorStrength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// temporalFilterStaticWeight
    ///
    /// Description:   Weight of temporal filter while lens is not moving. Weight=1.0 disables temporal filter.
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                          temporalFilterStaticWeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// temporalFilterDynamicWeight
    ///
    /// Description:   Weight of temporal filter while lens is moving. Weight=1.0 disables temporal filter.
    /// Type:          float
    /// Range:         [0.0,1.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                          temporalFilterDynamicWeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// temporalFilterTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTemporalFilterTrigger temporalFilterTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableGridOverlap
    ///
    /// Description:   Enables PD statistics to be computed in overlapping grids.
    /// Type:          int
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::enable_flag_type               enableGridOverlap;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// confIntegralWidth
    ///
    /// Description:   Tuning parameter for confidence level. Increasing this tuning increases confidence level.
    /// Type:          int
    /// Range:         [24,32]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                          confIntegralWidth;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDRange
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDRange
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// from
    ///
    /// Description:   PD search range near limit.
    /// Type:          int
    /// Range:         [-48,0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 from;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// to
    ///
    /// Description:   PD search range far limit.
    /// Type:          int
    /// Range:         [0,32]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 to;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTuningCorrelation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTuningCorrelation
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// minimumConfidenceLevel
    ///
    /// Description:   Minimum confidence level threshold for binary confidence flag provided to aut focus algorithms.
    /// Type:          float
    /// Range:         [50,200]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            minimumConfidenceLevel;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// defocusConfidenceThreshold
    ///
    /// Description:   Minimum confidence level threshold for triggering PD computation on additional ROI for sparse PDAF
    ///                sensors.
    /// Type:          float
    /// Range:         [50,200]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            defocusConfidenceThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDRangeControl
    ///
    /// Description:   Tuning for Confident Range.
    /// Type:          float
    /// Range:         [0.02,0.10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT            PDRangeControl;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// searchRange
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDRange searchRange;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lcrSearchRange
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDRange lcrSearchRange;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixLCRRawType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixLCRRawType
{
    PDAF_BAYER_RAW = 0,
    PDAF_IDEAL_RAW = 1,
    PDAF_CAMIF_RAW = 2
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixLCRBinningMode
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixLCRBinningMode
{
    PDAF_LCR_BINNING_DEFAULT = 0,
    PDAF_LCR_BINNING_ALL     = 1,
    PDAF_LCR_BINNING_SHIELD  = 2
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixLCRChannel
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixLCRChannel
{
    PDAF_LCR_CHANNEL_G = 0,
    PDAF_LCR_CHANNEL_Y = 1
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDLIBPreprocessingFilterSettings
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDLIBPreprocessingFilterSettings
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// AECTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::trigger_pt_type_aec AECTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// verticalMode
    ///
    /// Description:   Vertical skip for preprocessing. Use of 2 means process 1 row and skip 1 row.
    /// Type:          int
    /// Range:         [1,32]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               verticalMode;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// horizontalMode
    ///
    /// Description:   Horizontal skip for preprocessing. Use of 2 means process 2 columns to generate 1 column.
    /// Type:          int
    /// Range:         [1,8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               horizontalMode;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// boxFilterLength
    ///
    /// Description:   Not used.
    /// Type:          int
    /// Range:         [1,8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               boxFilterLength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// antiAliasFilterThreshold
    ///
    /// Description:   Not used.
    /// Type:          int
    /// Range:         [80,120]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32               antiAliasFilterThreshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixLCRFilterTrigger
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixLCRFilterTrigger
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// filterSet - Array
    /// Length:        3
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDLIBPreprocessingFilterSettings filterSet[3];
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixDPDFilterTrigger
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixDPDFilterTrigger
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// filterSet - Array
    /// Length:        3
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDLIBPreprocessingFilterSettings filterSet[3];
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixHDRChannelSelection
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixHDRChannelSelection
{
    DPD_HDR_AUTO_MODE  = 0,
    DPD_HDR_LONG_MODE  = 1,
    DPD_HDR_SHORT_MODE = 2
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTuningHDRCfg
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTuningHDRCfg
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// channelSelection
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixHDRChannelSelection channelSelection;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// longThreshold
    ///
    /// Description:   Selection of PD processing on long-exposure frame (1), short-exposure frame (2), or auto selection (0).
    /// Type:          int
    /// Range:         [0,2]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                        longThreshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixSparsePDProcMode
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class chromatixSparsePDProcMode
{
    SPARSE_PD_PROC_SIMPLE = 0,
    SPARSE_PD_PROC_LCR    = 1
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixTuningPreProcess
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixTuningPreProcess
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sparseProcessingMode
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixSparsePDProcMode sparseProcessingMode;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// HDR
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningHDRCfg     HDR;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// boxFilterLength
    ///
    /// Description:   Box filter legenth for sparse PDAF sensors.
    /// Type:          int
    /// Range:         [1,8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                     boxFilterLength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// antiAliasFilterThreshold
    ///
    /// Description:   Anti-aliasing filter threshold for sparse PDAF sensors.
    /// Type:          int
    /// Range:         [80,120]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                     antiAliasFilterThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// saturationThreshold
    ///
    /// Description:   2PD pixel value higher than this threshold will be clipped to threshold value
    /// Type:          int
    /// Range:         [0,5000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                     saturationThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// filterTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixDPDFilterTrigger filterTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lcrFilterTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixLCRFilterTrigger lcrFilterTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lcrChannel
    ///
    /// Description:   This parameter specify LCR channel.
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixLCRChannel       lcrChannel;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lcrBinningMode
    ///
    /// Description:   This parameter specify LCR binning strategy.
    /// Range:         [0,2]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixLCRBinningMode   lcrBinningMode;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lcrRawType
    ///
    /// Description:   This parameter specify raw data type for LCR virtual pixel generation.
    /// Range:         [0,2]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixLCRRawType       lcrRawType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lcrMaxBinningNum
    ///
    /// Description:   Max pixel number for generate the virtual center pixel for advanced sparse PD mode.
    /// Type:          int
    /// Range:         [1,4]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                     lcrMaxBinningNum;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lcrChannelSeparated
    ///
    /// Description:   indicated to use separate channel or not
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                      lcrChannelSeparated;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDLibType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatixPDLibType
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// preProcess
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningPreProcess       preProcess;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// preProcessVertical
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningPreProcess       preProcessVertical;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// correlation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningCorrelation      correlation;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// correlationVertical
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningCorrelation      correlationVertical;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// postProcess
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningPostProcess      postProcess;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// postProcessVertical
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningPostProcess      postProcessVertical;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// adaptiveK
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningAdaptiveK        adaptiveK;
    globalelements::enable_flag_type                enablePeripheralWindows;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// singleWindowProcessingLevel
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningProcessLevel     singleWindowProcessingLevel;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// singleWindowProcessingLevelVertical
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningProcessLevel     singleWindowProcessingLevelVertical;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gridProcessingLevel
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningProcessLevel     gridProcessingLevel;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gridProcessingLevelVertical
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningProcessLevel     gridProcessingLevelVertical;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PeripheralProcessing
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningProcessLevel     PeripheralProcessing;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PeripheralProcessingVertical
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningProcessLevel     PeripheralProcessingVertical;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// HVControl
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixHVControl              HVControl;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// skipControl
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningSkipControl      skipControl;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hardwareGeometry
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixTuningHardwareGeometry hardwareGeometry;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hardwarePattern - Array
    /// Min Length:    1
    /// Max Length:    3
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          hardwarePatternCount;
    UINT32                          hardwarePatternID;
    chromatixTuningHardwarePattern* hardwarePattern;
    globalelements::enable_flag_type                enableFocusMaps;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// extensionParam - Array
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   extension feature
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          extensionParamCount;
    UINT32                          extensionParamID;
    statsglobalelements::statsExtensionParamType*        extensionParam;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatixPDLibTypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatixPDLibTypeClass : public ParameterModule, public chromatixPDLibType
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 9;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDLibTypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatixPDLibTypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatixPDLibTypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDAFHardwareResamplerInstruction
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDAFHardwareResamplerInstruction(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDAFHardwareResamplerInstruction* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDAFHardwareResampler
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDAFHardwareResampler(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDAFHardwareResampler* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDAFHardwarePixelSeparator
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDAFHardwarePixelSeparator(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDAFHardwarePixelSeparator* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDAFHardwareLineExtractor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDAFHardwareLineExtractor(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDAFHardwareLineExtractor* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDAFHardwarePixelExtractor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDAFHardwarePixelExtractor(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDAFHardwarePixelExtractor* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTuningHardwarePattern
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTuningHardwarePattern(
        ParameterFileSymbolTableEntry* entry,
        chromatixTuningHardwarePattern* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTuningHardwareGeometry
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTuningHardwareGeometry(
        ParameterFileSymbolTableEntry* entry,
        chromatixTuningHardwareGeometry* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTuningSkipControl
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTuningSkipControl(
        ParameterFileSymbolTableEntry* entry,
        chromatixTuningSkipControl* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixHVConfWeight
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixHVConfWeight(
        ParameterFileSymbolTableEntry* entry,
        chromatixHVConfWeight* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixHVControl
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixHVControl(
        ParameterFileSymbolTableEntry* entry,
        chromatixHVControl* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTuningProcessLevel
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTuningProcessLevel(
        ParameterFileSymbolTableEntry* entry,
        chromatixTuningProcessLevel* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTuningAdaptiveK
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTuningAdaptiveK(
        ParameterFileSymbolTableEntry* entry,
        chromatixTuningAdaptiveK* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDLIBPostprocessingTemporalFilterSetting
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDLIBPostprocessingTemporalFilterSetting(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDLIBPostprocessingTemporalFilterSetting* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTemporalFilterTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTemporalFilterTrigger(
        ParameterFileSymbolTableEntry* entry,
        chromatixTemporalFilterTrigger* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTuningPostProcess
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTuningPostProcess(
        ParameterFileSymbolTableEntry* entry,
        chromatixTuningPostProcess* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDRange
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDRange(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDRange* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTuningCorrelation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTuningCorrelation(
        ParameterFileSymbolTableEntry* entry,
        chromatixTuningCorrelation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDLIBPreprocessingFilterSettings
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDLIBPreprocessingFilterSettings(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDLIBPreprocessingFilterSettings* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixLCRFilterTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixLCRFilterTrigger(
        ParameterFileSymbolTableEntry* entry,
        chromatixLCRFilterTrigger* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixDPDFilterTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixDPDFilterTrigger(
        ParameterFileSymbolTableEntry* entry,
        chromatixDPDFilterTrigger* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTuningHDRCfg
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTuningHDRCfg(
        ParameterFileSymbolTableEntry* entry,
        chromatixTuningHDRCfg* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixTuningPreProcess
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixTuningPreProcess(
        ParameterFileSymbolTableEntry* entry,
        chromatixTuningPreProcess* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatixPDLibType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadchromatixPDLibType(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDLibType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDLibType::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatixPDLibType::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDAFHardwareResamplerInstruction
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDAFHardwareResamplerInstruction(
        chromatixPDAFHardwareResamplerInstruction* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDAFHardwareResampler
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDAFHardwareResampler(
        chromatixPDAFHardwareResampler* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDAFHardwarePixelSeparator
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDAFHardwarePixelSeparator(
        chromatixPDAFHardwarePixelSeparator* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixTuningHardwarePattern
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixTuningHardwarePattern(
        chromatixTuningHardwarePattern* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixHVControl
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixHVControl(
        chromatixHVControl* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatixPDLibType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadchromatixPDLibType(
        chromatixPDLibType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatixPDLibType::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatixPDLibTypeClass

AFPDLIBELEMENTS_NAMESPACE_END
#endif // AFPDLIBELEMENTS_H

