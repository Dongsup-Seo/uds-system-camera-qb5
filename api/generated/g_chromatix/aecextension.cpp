////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecextension.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "aecextension.h"
#include "parametersetmanager.h"

AECEXTENSION_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECCoreExtensionTypeClass::AECCoreExtensionTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(YHistStretch);
    PARAMETER_INITIALIZE(touchEVScnMonitor);
    PARAMETER_INITIALIZE(dualCam);
    PARAMETER_INITIALIZE(enableLVTest);
    PARAMETER_INITIALIZE(ApertureControl);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECCoreExtensionTypeClass::AECCoreExtensionTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(YHistStretch);
    PARAMETER_INITIALIZE(touchEVScnMonitor);
    PARAMETER_INITIALIZE(dualCam);
    PARAMETER_INITIALIZE(enableLVTest);
    PARAMETER_INITIALIZE(ApertureControl);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECCoreExtensionTypeClass::~AECCoreExtensionTypeClass()
{
    UnloadAECCoreExtensionType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* AECCoreExtensionTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "Extension")) == 0)
    {
        name = "Extension";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ApertureControlZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreExtensionTypeClass::LoadApertureControlZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    ApertureControlZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->FNumber, alignment);
    result = result && entry->Read(&structure->SensitivityFactor, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ApertureControlZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreExtensionTypeClass::LoadApertureControlZoneType(
    ParameterFileSymbolTableEntry* entry,
    ApertureControlZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadApertureControlZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ApertureControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreExtensionTypeClass::LoadApertureControlType(
    ParameterFileSymbolTableEntry* entry,
    ApertureControlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableApertureControl, alignment);
    result = result && entry->Read(&structure->enSettleCntThdforlaunch, alignment);
    result = result && entry->Read(&structure->enSensitivityComp, alignment);
    result = result && entry->Read(&structure->defaultApertureFNumber, alignment);
    result = result && entry->Read(&structure->setCntThdforlaunch, alignment);
    result = result && entry->Read(&structure->SettleCountThd, alignment);
    result = result && entry->Read(&structure->NumofSkipFrame, alignment);
    result = result && entry->Read(&structure->NumofSkipFrameforSystemlatency, alignment);

    // Reading Array ApertureControlZone from symbol table
    {
        result = result && entry->Read(&structure->ApertureControlZoneCount, alignment);
        structure->ApertureControlZoneID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->ApertureControlZone = PARAMETER_NEW ApertureControlZoneType[structure->ApertureControlZoneCount];
        }
        if (!result || structure->ApertureControlZone == NULL)
        {
            structure->ApertureControlZoneCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->ApertureControlZoneCount; i++)
        {
            result = LoadApertureControlZoneType(pointerEntry, &structure->ApertureControlZone[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load DualCamCCTExpCompType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreExtensionTypeClass::LoadDualCamCCTExpCompType(
    ParameterFileSymbolTableEntry* entry,
    DualCamCCTExpCompType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->CCT, alignment);
    result = result && entry->Read(&structure->compensationRatio, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load DualCamType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreExtensionTypeClass::LoadDualCamType(
    ParameterFileSymbolTableEntry* entry,
    DualCamType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableDualCamExpComp, alignment);
    result = result && entry->Read(&structure->dualCamExpCompMultiplier, alignment);

    // Reading Array CCTBasedExpComp from symbol table
    {
        result = result && entry->Read(&structure->CCTBasedExpCompCount, alignment);
        structure->CCTBasedExpCompID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->CCTBasedExpComp = PARAMETER_NEW DualCamCCTExpCompType[structure->CCTBasedExpCompCount];
        }
        if (!result || structure->CCTBasedExpComp == NULL)
        {
            structure->CCTBasedExpCompCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->CCTBasedExpCompCount; i++)
        {
            result = LoadDualCamCCTExpCompType(pointerEntry, &structure->CCTBasedExpComp[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load TouchEVSceneChangeType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreExtensionTypeClass::LoadTouchEVSceneChangeType(
    ParameterFileSymbolTableEntry* entry,
    TouchEVSceneChangeType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableTouchEVScnDet, alignment);
    result = result && entry->Read(&structure->thresLumaDelta, alignment);
    result = result && entry->Read(&structure->thresLumaAvgPct, alignment);
    result = result && entry->Read(&structure->minLumaAvg, alignment);
    result = result && entry->Read(&structure->frameDelayBeforeStable, alignment);
    result = result && entry->Read(&structure->temporalLumaAverageCount, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load YHistStretchZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreExtensionTypeClass::LoadYHistStretchZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    YHistStretchZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->darkBinThres, alignment);
    result = result && entry->Read(&structure->darkBinThresLow, alignment);
    result = result && entry->Read(&structure->satBinThres, alignment);
    result = result && entry->Read(&structure->satBinThresLow, alignment);
    result = result && entry->Read(&structure->darkTargetLvL, alignment);
    result = result && entry->Read(&structure->satTargetLvL, alignment);
    result = result && entry->Read(&structure->satScalingMax, alignment);
    result = result && entry->Read(&structure->darkClampingMax, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load YHistStretchZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreExtensionTypeClass::LoadYHistStretchZoneType(
    ParameterFileSymbolTableEntry* entry,
    YHistStretchZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = aecglobalelements::aecglobalelementsClass::LoadTriggerPointType(entry, &structure->zoneTrigger, alignment);
    result = result && LoadYHistStretchZoneDataType(entry, &structure->zoneData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load YHistStretchType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreExtensionTypeClass::LoadYHistStretchType(
    ParameterFileSymbolTableEntry* entry,
    YHistStretchType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableYHistStretch, alignment);
    result = result && entry->Read(&structure->tempFilter, alignment);

    // Reading Array yHistStretchZone from symbol table
    {
        result = result && entry->Read(&structure->yHistStretchZoneCount, alignment);
        structure->yHistStretchZoneID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->yHistStretchZone = PARAMETER_NEW YHistStretchZoneType[structure->yHistStretchZoneCount];
        }
        if (!result || structure->yHistStretchZone == NULL)
        {
            structure->yHistStretchZoneCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->yHistStretchZoneCount; i++)
        {
            result = LoadYHistStretchZoneType(pointerEntry, &structure->yHistStretchZone[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECCoreExtensionType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreExtensionTypeClass::LoadAECCoreExtensionType(
    ParameterFileSymbolTableEntry* entry,
    AECCoreExtensionType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && LoadYHistStretchType(entry, &structure->YHistStretch, alignment);
    result = result && LoadTouchEVSceneChangeType(entry, &structure->touchEVScnMonitor, alignment);
    result = result && LoadDualCamType(entry, &structure->dualCam, alignment);
    result = result && entry->Read(&structure->enableLVTest, alignment);
    result = result && LoadApertureControlType(entry, &structure->ApertureControl, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreExtensionTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECCoreExtensionType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECCoreExtensionTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECCoreExtensionType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload ApertureControlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreExtensionTypeClass::UnloadApertureControlType(
    ApertureControlType* structure)
{
    PARAMETER_DELETE[] structure->ApertureControlZone;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload DualCamType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreExtensionTypeClass::UnloadDualCamType(
    DualCamType* structure)
{
    PARAMETER_DELETE[] structure->CCTBasedExpComp;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload YHistStretchType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreExtensionTypeClass::UnloadYHistStretchType(
    YHistStretchType* structure)
{
    PARAMETER_DELETE[] structure->yHistStretchZone;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECCoreExtensionType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreExtensionTypeClass::UnloadAECCoreExtensionType(
    AECCoreExtensionType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadYHistStretchType(&structure->YHistStretch);
    UnloadDualCamType(&structure->dualCam);
    UnloadApertureControlType(&structure->ApertureControl);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECCoreExtensionTypeClass::Unloadparameter_versionStruct(
    AECCoreExtensionType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* AECCoreExtensionTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    AECCoreExtensionTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW AECCoreExtensionTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadAECCoreExtensionType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AECEXTENSION_NAMESPACE_END
