////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  hdr_2_0_0.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef HDR_2_0_0_H
#define HDR_2_0_0_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "ispglobalelements.h"

#define HDR_2_0_0_NAMESPACE_BEGIN namespace hdr_2_0_0 {
#define HDR_2_0_0_NAMESPACE_END }

HDR_2_0_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// hdr20_rgn_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct hdr20_rgn_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// recon_min_factor
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents min to mid factor to force vertical edge direction
    /// Type:          uint
    /// Default Value: 12
    /// Range:         [0, 31]
    /// Bit Depth:     5u
    /// Conversion:    No Conversion needed
    /// Notes:         range: 0-16 is meaningful
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT recon_min_factor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// recon_flat_region_th
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents the threshold for the flat region in edge detection
    /// Type:          uint
    /// Default Value: 64
    /// Range:         [0, 1023]
    /// Bit Depth:     10u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT recon_flat_region_th;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// recon_h_edge_th1
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents threshold 1 for the horizontal edge switching function
    /// Type:          uint
    /// Default Value: 16
    /// Range:         [0, 1023]
    /// Bit Depth:     10u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT recon_h_edge_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// recon_h_edge_dth_log2
    ///
    /// Tuning Level:  must_tune
    /// Description:   log2(th2-th1) for horizontal edge switching function.
    /// Type:          uint
    /// Default Value: 4
    /// Range:         [4,7]
    /// Bit Depth:     4u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT recon_h_edge_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// recon_motion_th1
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents threshold 1 for the motion switching function.
    /// Type:          uint
    /// Default Value: 1023
    /// Range:         [0, 1023]
    /// Bit Depth:     10u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT recon_motion_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// recon_motion_dth_log2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Brief description: log2(th2-th1) for motion switching function.
    /// Type:          uint
    /// Default Value: 7
    /// Range:         [4,7]
    /// Bit Depth:     4u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT recon_motion_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// recon_dark_th1
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents threshold 1 for dark noise switching function.
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0, 1023]
    /// Bit Depth:     10u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT recon_dark_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// recon_dark_dth_log2
    ///
    /// Tuning Level:  must_tune
    /// Description:   Brief description: log2(th2-th1) for dark noise switching function.
    /// Type:          uint
    /// Default Value: 4
    /// Range:         [0,4]
    /// Bit Depth:     4u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT recon_dark_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_zrec_prefilt_tap0
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents the strength of the Zigzag HDR prefilter.
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0,63]
    /// Bit Depth:     6u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT hdr_zrec_prefilt_tap0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_zrec_g_grad_th1
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents threshold 1 for the green pixel gradient for directional interpolation.
    /// Type:          uint
    /// Default Value: 32
    /// Range:         [0,4095]
    /// Bit Depth:     12u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT hdr_zrec_g_grad_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_zrec_rb_grad_th1
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents threshold 1 for the red/blue pixel gradient for directional interpolation.
    /// Type:          uint
    /// Default Value: 32
    /// Range:         [0,4095]
    /// Bit Depth:     12u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT hdr_zrec_rb_grad_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_motion0_th1
    ///
    /// Tuning Level:  must_tune
    /// Description:   Noise model is: noise = th2*sqrt(gain*intensity)+th1.
    /// Type:          uint
    /// Default Value: 60
    /// Range:         [0,1023]
    /// Bit Depth:     10u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT mac_motion0_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_motion0_th2
    ///
    /// Tuning Level:  must_tune
    /// Description:   Noise model is: noise = th2*sqrt(gain*intensity)+th1. This value represents the noise-luma slope for
    ///                motion detection.
    /// Type:          uint
    /// Default Value: 24
    /// Range:         [0,255]
    /// Bit Depth:     8u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT mac_motion0_th2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_motion0_strength
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents the motion adaptation strength value.
    /// Type:          uint
    /// Default Value: 8
    /// Range:         [0,16]
    /// Bit Depth:     5u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT mac_motion0_strength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_low_light_th1
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents the threshold 1 value for low light switching.
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0,16383]
    /// Bit Depth:     14u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT mac_low_light_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_low_light_strength
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents the log light switching strength value.
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0,16]
    /// Bit Depth:     5u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT mac_low_light_strength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_high_light_th1
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents the threshold 1 value for high light switching.
    /// Type:          uint
    /// Default Value: 232
    /// Range:         [0,16383]
    /// Bit Depth:     14u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT mac_high_light_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_high_light_dth_log2
    ///
    /// Tuning Level:  must_tune
    /// Description:   This value represents the log2(th2 ?th1) value for high light switching.
    /// Type:          uint
    /// Default Value: 10
    /// Range:         [2, 14]
    /// Bit Depth:     4u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT mac_high_light_dth_log2;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_hdr20_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_hdr20_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    globalelements::trigger_pt_type_aec aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr20_rgn_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    hdr20_rgn_dataType  hdr20_rgn_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// mod_hdr20_hdr_aec_dataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct mod_hdr20_hdr_aec_dataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ispglobalelements::trigger_pt_type_aec_hdr hdr_aec_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_aec_data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct hdr_aec_dataStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// mod_hdr20_aec_data - Array
        /// Min Length:    1
        /// Max Length:    Unbounded
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32                  mod_hdr20_aec_dataCount;
        UINT32                  mod_hdr20_aec_dataID;
        mod_hdr20_aec_dataType* mod_hdr20_aec_data;
    } hdr_aec_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_hdr20_coreType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_hdr20_coreType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mod_hdr20_hdr_aec_data - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                      mod_hdr20_hdr_aec_dataCount;
    UINT32                      mod_hdr20_hdr_aec_dataID;
    mod_hdr20_hdr_aec_dataType* mod_hdr20_hdr_aec_data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_hdr20_reserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_hdr20_reserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_recon_en
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable RECON block of HDR
    /// Type:          uint
    /// Default Value: 1
    /// Range:         [0,1]
    /// Bit Depth:     1u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_recon_en;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_mac_en
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable MAC block of HDR
    /// Type:          uint
    /// Default Value: 1
    /// Range:         [0,1]
    /// Bit Depth:     1u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_mac_en;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_msb_align
    ///
    /// Tuning Level:  never_tune
    /// Description:   MSB Align for HDR module
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     1u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_msb_align;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_zrec_g_grad_dth_log2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   This value represents threshold 2 for the green pixel gradient delta for directional interpolation.
    /// Type:          uint
    /// Default Value: 5
    /// Range:         [0,12]
    /// Bit Depth:     4u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_zrec_g_grad_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hdr_zrec_rb_grad_dth_log2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   This value represents threshold 2 for the red/blue pixel gradient delta for directional interpolation.
    /// Type:          uint
    /// Default Value: 5
    /// Range:         [0,12]
    /// Bit Depth:     4u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 hdr_zrec_rb_grad_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// recon_edge_lpf_tap0
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Tap0 value for low-pass filter applied before edge detection.
    /// Type:          uint
    /// Default Value: 3
    /// Range:         [0,5]
    /// Bit Depth:     3u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 recon_edge_lpf_tap0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_motion_dilation
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Size of motion dilation max filter, 5 means -5 to 5, i.e. 11-tap filter.
    /// Type:          uint
    /// Default Value: 5
    /// Range:         [0,5]
    /// Bit Depth:     3u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 mac_motion_dilation;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_motion0_dt0
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   An additive term to noise estimate, to avoid dividing by zero.
    /// Type:          uint
    /// Default Value: 1
    /// Range:         [1,63]
    /// Bit Depth:     6u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 mac_motion0_dt0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_low_light_dth_log2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   log2(th2-th1) for low light switching.
    /// Type:          uint
    /// Default Value: 6
    /// Range:         [2,14]
    /// Bit Depth:     4u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 mac_low_light_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_smooth_enable
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable motion adaptive smoothing, an optional step in MAC.
    /// Type:          uint
    /// Default Value: 0
    /// Range:         [0,1]
    /// Bit Depth:     1u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 mac_smooth_enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_smooth_th1
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Th1 for motion adaptive smoothing.
    /// Type:          uint
    /// Default Value: 192
    /// Range:         [0,256]
    /// Bit Depth:     9u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 mac_smooth_th1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_smooth_dth_log2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   log2(th2-th1) for motion adaptive smoothing.
    /// Type:          uint
    /// Default Value: 6
    /// Range:         [2,8]
    /// Bit Depth:     4u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 mac_smooth_dth_log2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mac_smooth_tap0
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Tap0 value for the low-pass filter in motion adaptive smoothing.
    /// Type:          uint
    /// Default Value: 5
    /// Range:         [0, 5]
    /// Bit Depth:     3u
    /// Conversion:    No Conversion needed
    /// Notes:         none
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 mac_smooth_tap0;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_hdr20Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_hdr20Type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enable_section
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct enable_sectionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        globalelements::enable_flag_type hdr_enable;
    } enable_section;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_variables
    ///
    /// Default Value: control_aec_exp_sensitivity_ratio, control_gain
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_variablesStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// control_var_type - Array
        /// Default Value: control_aec_exp_sensitivity_ratio, control_gain
        /// Length:        2
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        enum class control_var_typeEnum
        {
            control_lux_idx                   = 0,
            control_gain                      = 1,
            control_exp_time_ratio            = 3,
            control_aec_exp_sensitivity_ratio = 4,
            control_gain_ratio                = 5
        } control_var_type[2];
    } control_variables;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// control_method
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct control_methodStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_exp_control
        /// Default Value: control_gain
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_type     aec_exp_control;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// aec_hdr_control
        /// Default Value: control_aec_exp_sensitivity_ratio
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ispglobalelements::tuning_control_aec_hdr_type aec_hdr_control;
    } control_method;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dynamic_enable_triggers
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct dynamic_enable_triggersStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// hdr_recon_en
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct hdr_recon_enStruct
        {
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// Binary file symbol table entry ID
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32 SymbolTableID;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// enable
            ///
            /// Tuning Level:  rarely_tune
            /// Description:   enable HDR Recon
            /// Type:          int
            /// Default Value: 0
            /// Range:         [0, 1]
            /// Bit Depth:     1u
            /// Notes:         none
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            globalelements::enable_flag_type        enable;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_control_var
            ///
            /// Tuning Level:  rarely_tune
            /// Description:   enable HDR Recon
            /// Type:          uint
            /// Default Value: control_aec_exp_sensitivity_ratio
            /// Range:         [0, 1]
            /// Bit Depth:     1u
            /// Notes:         none
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::control_var_type        hyst_control_var;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_mode
            /// Default Value: UPWARD
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::hyst_direction          hyst_mode;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_trigger
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::trigger_pt_couplet_type hyst_trigger;
        } hdr_recon_en;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// hdr_mac_en
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct hdr_mac_enStruct
        {
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// Binary file symbol table entry ID
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32 SymbolTableID;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// enable
            ///
            /// Tuning Level:  rarely_tune
            /// Description:   enable HDR Mac
            /// Type:          int
            /// Default Value: 0
            /// Range:         [0, 1]
            /// Bit Depth:     1u
            /// Notes:         none
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            globalelements::enable_flag_type        enable;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_control_var
            ///
            /// Tuning Level:  rarely_tune
            /// Description:   enable HDR Mac
            /// Type:          uint
            /// Default Value: control_aec_exp_sensitivity_ratio
            /// Range:         [0, 1]
            /// Bit Depth:     1u
            /// Notes:         none
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::control_var_type        hyst_control_var;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_mode
            /// Default Value: UPWARD
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::hyst_direction          hyst_mode;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// hyst_trigger
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ispglobalelements::trigger_pt_couplet_type hyst_trigger;
        } hdr_mac_en;
    } dynamic_enable_triggers;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_hdr20_reserve
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_hdr20_reserveType chromatix_hdr20_reserve;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_hdr20_core
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_hdr20_coreType    chromatix_hdr20_core;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_hdr20TypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatix_hdr20TypeClass : public ParameterModule, public chromatix_hdr20Type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 2;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_hdr20TypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_hdr20TypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatix_hdr20TypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load hdr20_rgn_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadhdr20_rgn_dataType(
        ParameterFileSymbolTableEntry* entry,
        hdr20_rgn_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_hdr20_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_hdr20_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_hdr20_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_hdr20_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_hdr20_hdr_aec_dataType(
        ParameterFileSymbolTableEntry* entry,
        mod_hdr20_hdr_aec_dataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load mod_hdr20_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmod_hdr20_hdr_aec_dataType_hdr_aec_dataStruct(
        ParameterFileSymbolTableEntry* entry,
        mod_hdr20_hdr_aec_dataType::hdr_aec_dataStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_hdr20_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_hdr20_coreType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr20_coreType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_hdr20_reserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_hdr20_reserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr20_reserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_hdr20Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_hdr20Type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr20Type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load enable_sectionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadenable_sectionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr20Type::enable_sectionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr20Type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr20Type::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_variablesStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_variablesStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr20Type::control_variablesStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load control_methodStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadcontrol_methodStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr20Type::control_methodStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dynamic_enable_triggersStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddynamic_enable_triggersStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr20Type::dynamic_enable_triggersStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dynamic_enable_triggersStruct_hdr_recon_enStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddynamic_enable_triggersStruct_hdr_recon_enStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr20Type::dynamic_enable_triggersStruct::hdr_recon_enStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load dynamic_enable_triggersStruct_hdr_mac_enStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loaddynamic_enable_triggersStruct_hdr_mac_enStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_hdr20Type::dynamic_enable_triggersStruct::hdr_mac_enStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_hdr20_hdr_aec_dataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_hdr20_hdr_aec_dataType(
        mod_hdr20_hdr_aec_dataType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload mod_hdr20_hdr_aec_dataType_hdr_aec_dataStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadmod_hdr20_hdr_aec_dataType_hdr_aec_dataStruct(
        mod_hdr20_hdr_aec_dataType::hdr_aec_dataStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_hdr20_coreType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_hdr20_coreType(
        chromatix_hdr20_coreType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_hdr20Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_hdr20Type(
        chromatix_hdr20Type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatix_hdr20Type::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatix_hdr20TypeClass

HDR_2_0_0_NAMESPACE_END
#endif // HDR_2_0_0_H

