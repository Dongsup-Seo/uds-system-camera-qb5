////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aectouch.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AECTOUCH_H
#define AECTOUCH_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "globalelements.h"
#include "aecglobalelements.h"

#define AECTOUCH_NAMESPACE_BEGIN namespace aecTouch {
#define AECTOUCH_NAMESPACE_END }

AECTOUCH_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// TouchConvergenceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct TouchConvergenceType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// convSpeedAdjRatio
    ///
    /// Tuning Level:  often_tune
    /// Description:   specify the adjustment of convergence speed during touch AEC convergence
    /// Type:          float
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT convSpeedAdjRatio;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// TouchMeteringType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct TouchMeteringType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableTouchROI
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable Flag for Touch ROI AEC Adjustments
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                enableTouchROI;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// weightTouchROI
    ///
    /// Tuning Level:  often_tune
    /// Description:   Specify the blending weight of Touch luma into metered luma
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               weightTouchROI;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// weightTemporalFilter
    ///
    /// Tuning Level:  never_tune
    /// Description:   Temporal weight for Touch Luma and Metered luma transition. Higher weight will have faster transition to
    ///                Touch Luma
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               weightTemporalFilter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// centerWeightStrength
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specify weighting of luma in the center of Touch ROI
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               centerWeightStrength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableTouchLEDMetering
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable flag for LED metering during touch
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                enableTouchLEDMetering;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableTouchROIHistAdj
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable Flag for adjustment on Histogram AEC target calculation
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                enableTouchROIHistAdj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROIHistAdjZone - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32              ROIHistAdjZoneCount;
    UINT32              ROIHistAdjZoneID;
    aecglobalelements::ROIHistAdjZoneType* ROIHistAdjZone;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECTouchType
/// Comments:       Touch Tuning Definition
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECTouchType
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// touchMtr
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TouchMeteringType    touchMtr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// touchConv
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TouchConvergenceType touchConv;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECTouchTypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class AECTouchTypeClass : public ParameterModule, public AECTouchType
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 7;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECTouchTypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECTouchTypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~AECTouchTypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load TouchConvergenceType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadTouchConvergenceType(
        ParameterFileSymbolTableEntry* entry,
        TouchConvergenceType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load TouchMeteringType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadTouchMeteringType(
        ParameterFileSymbolTableEntry* entry,
        TouchMeteringType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECTouchType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECTouchType(
        ParameterFileSymbolTableEntry* entry,
        AECTouchType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECTouchType::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECTouchType::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload TouchMeteringType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadTouchMeteringType(
        TouchMeteringType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECTouchType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECTouchType(
        AECTouchType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        AECTouchType::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class AECTouchTypeClass

AECTOUCH_NAMESPACE_END
#endif // AECTOUCH_H

