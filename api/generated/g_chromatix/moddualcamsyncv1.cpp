////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  moddualcamsyncv1.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "moddualcamsyncv1.h"
#include "parametersetmanager.h"

MODDUALCAMSYNCV1_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixdualcamSyncV1TypeClass::chromatixdualcamSyncV1TypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(moduleID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(enableFlag);
    PARAMETER_INITIALIZE(modeSelection);
    PARAMETER_INITIALIZE(convSpeed);
    PARAMETER_INITIALIZE(refPtSelection);
    PARAMETER_INITIALIZE(customRefPt);
    PARAMETER_INITIALIZE(outlierDistance);
    PARAMETER_INITIALIZE(weightFCM);
    PARAMETER_INITIALIZE(advMulitcamSync);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixdualcamSyncV1TypeClass::chromatixdualcamSyncV1TypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(moduleID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(enableFlag);
    PARAMETER_INITIALIZE(modeSelection);
    PARAMETER_INITIALIZE(convSpeed);
    PARAMETER_INITIALIZE(refPtSelection);
    PARAMETER_INITIALIZE(customRefPt);
    PARAMETER_INITIALIZE(outlierDistance);
    PARAMETER_INITIALIZE(weightFCM);
    PARAMETER_INITIALIZE(advMulitcamSync);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixdualcamSyncV1TypeClass::~chromatixdualcamSyncV1TypeClass()
{
    UnloadchromatixdualcamSyncV1Type(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixdualcamSyncV1TypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "dualcamSyncV1")) == 0)
    {
        name = "dualcamSyncV1";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load moddualcamSyncCCTDifftV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixdualcamSyncV1TypeClass::LoadmoddualcamSyncCCTDifftV1Type(
    ParameterFileSymbolTableEntry* entry,
    moddualcamSyncCCTDifftV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbglobalelements::awbTriggerDataFloatType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbTriggerDataFloatType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load moddualcamSyncMixingV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixdualcamSyncV1TypeClass::LoadmoddualcamSyncMixingV1Type(
    ParameterFileSymbolTableEntry* entry,
    moddualcamSyncMixingV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadmoddualcamSyncCCTDifftV1Type(entry, &structure->cctDiffWeight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modmulticamSyncV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixdualcamSyncV1TypeClass::LoadmodmulticamSyncV1Type(
    ParameterFileSymbolTableEntry* entry,
    modmulticamSyncV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    structure->colorMapping = (dualcamColorMappingType)entry->ReadEnum(&result, alignment);
    result = result && LoadmoddualcamSyncMixingV1Type(entry, &structure->dynamicMixing, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load modmulticamAdvSyncV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixdualcamSyncV1TypeClass::LoadmodmulticamAdvSyncV1Type(
    ParameterFileSymbolTableEntry* entry,
    modmulticamAdvSyncV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadmodmulticamSyncV1Type(entry, &structure->master, alignment);
    result = result && LoadmodmulticamSyncV1Type(entry, &structure->slave, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load moddualcamSyncV1Level2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixdualcamSyncV1TypeClass::LoadmoddualcamSyncV1Level2Type(
    ParameterFileSymbolTableEntry* entry,
    moddualcamSyncV1Level2Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbglobalelements::awbTriggerDataFloatType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbTriggerDataFloatType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load moddualcamSyncV1Level1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixdualcamSyncV1TypeClass::LoadmoddualcamSyncV1Level1Type(
    ParameterFileSymbolTableEntry* entry,
    moddualcamSyncV1Level1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW moddualcamSyncV1Level2Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadmoddualcamSyncV1Level2Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load moddualcamSyncWeightFCMType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixdualcamSyncV1TypeClass::LoadmoddualcamSyncWeightFCMType(
    ParameterFileSymbolTableEntry* entry,
    moddualcamSyncWeightFCMType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW moddualcamSyncV1Level1Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadmoddualcamSyncV1Level1Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load moddualcamSyncOutlierV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixdualcamSyncV1TypeClass::LoadmoddualcamSyncOutlierV1Type(
    ParameterFileSymbolTableEntry* entry,
    moddualcamSyncOutlierV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW moddualcamSyncV1Level2Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadmoddualcamSyncV1Level2Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load moddualcamSyncRefPtV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixdualcamSyncV1TypeClass::LoadmoddualcamSyncRefPtV1Type(
    ParameterFileSymbolTableEntry* entry,
    moddualcamSyncRefPtV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->condition = (dualcamRefPtConditiontype)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->calFactor, alignment);
    result = result && awbglobalelements::awbglobalelementsClass::LoadawbPointDataType(entry, &structure->point, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load moddualcamSyncCusRefPtV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixdualcamSyncV1TypeClass::LoadmoddualcamSyncCusRefPtV1Type(
    ParameterFileSymbolTableEntry* entry,
    moddualcamSyncCusRefPtV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->luxThreshold, alignment);
    result = result && entry->Read(&structure->luxRange, alignment);

    // Reading Array refPt from symbol table
    {
        result = result && entry->Read(&structure->refPtCount, alignment);
        structure->refPtID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->refPt = PARAMETER_NEW moddualcamSyncRefPtV1Type[structure->refPtCount];
        }
        if (!result || structure->refPt == NULL)
        {
            structure->refPtCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->refPtCount; i++)
        {
            result = LoadmoddualcamSyncRefPtV1Type(pointerEntry, &structure->refPt[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixdualcamSyncV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixdualcamSyncV1TypeClass::LoadchromatixdualcamSyncV1Type(
    ParameterFileSymbolTableEntry* entry,
    chromatixdualcamSyncV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = awbglobalelements::awbglobalelementsClass::LoadmoduleIDType(entry, &structure->moduleID, alignment);
    result = result && Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && entry->Read(&structure->enableFlag, alignment);
    structure->modeSelection = (dualcamSyncModeType)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->convSpeed, alignment);
    structure->refPtSelection = (dualcamRefPtSelecttype)entry->ReadEnum(&result, alignment);
    result = result && LoadmoddualcamSyncCusRefPtV1Type(entry, &structure->customRefPt, alignment);
    result = result && LoadmoddualcamSyncOutlierV1Type(entry, &structure->outlierDistance, alignment);
    result = result && LoadmoddualcamSyncWeightFCMType(entry, &structure->weightFCM, alignment);
    result = result && LoadmodmulticamAdvSyncV1Type(entry, &structure->advMulitcamSync, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixdualcamSyncV1TypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixdualcamSyncV1Type::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload moddualcamSyncCCTDifftV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixdualcamSyncV1TypeClass::UnloadmoddualcamSyncCCTDifftV1Type(
    moddualcamSyncCCTDifftV1Type* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload moddualcamSyncMixingV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixdualcamSyncV1TypeClass::UnloadmoddualcamSyncMixingV1Type(
    moddualcamSyncMixingV1Type* structure)
{
    UnloadmoddualcamSyncCCTDifftV1Type(&structure->cctDiffWeight);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modmulticamSyncV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixdualcamSyncV1TypeClass::UnloadmodmulticamSyncV1Type(
    modmulticamSyncV1Type* structure)
{
    UnloadmoddualcamSyncMixingV1Type(&structure->dynamicMixing);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload modmulticamAdvSyncV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixdualcamSyncV1TypeClass::UnloadmodmulticamAdvSyncV1Type(
    modmulticamAdvSyncV1Type* structure)
{
    UnloadmodmulticamSyncV1Type(&structure->master);
    UnloadmodmulticamSyncV1Type(&structure->slave);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload moddualcamSyncV1Level2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixdualcamSyncV1TypeClass::UnloadmoddualcamSyncV1Level2Type(
    moddualcamSyncV1Level2Type* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload moddualcamSyncV1Level1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixdualcamSyncV1TypeClass::UnloadmoddualcamSyncV1Level1Type(
    moddualcamSyncV1Level1Type* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadmoddualcamSyncV1Level2Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload moddualcamSyncWeightFCMType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixdualcamSyncV1TypeClass::UnloadmoddualcamSyncWeightFCMType(
    moddualcamSyncWeightFCMType* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadmoddualcamSyncV1Level1Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload moddualcamSyncOutlierV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixdualcamSyncV1TypeClass::UnloadmoddualcamSyncOutlierV1Type(
    moddualcamSyncOutlierV1Type* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadmoddualcamSyncV1Level2Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload moddualcamSyncCusRefPtV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixdualcamSyncV1TypeClass::UnloadmoddualcamSyncCusRefPtV1Type(
    moddualcamSyncCusRefPtV1Type* structure)
{
    PARAMETER_DELETE[] structure->refPt;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixdualcamSyncV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixdualcamSyncV1TypeClass::UnloadchromatixdualcamSyncV1Type(
    chromatixdualcamSyncV1Type* structure)
{
    UnloadmoddualcamSyncCusRefPtV1Type(&structure->customRefPt);
    UnloadmoddualcamSyncOutlierV1Type(&structure->outlierDistance);
    UnloadmoddualcamSyncWeightFCMType(&structure->weightFCM);
    UnloadmodmulticamAdvSyncV1Type(&structure->advMulitcamSync);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixdualcamSyncV1TypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixdualcamSyncV1TypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixdualcamSyncV1TypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixdualcamSyncV1Type(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


MODDUALCAMSYNCV1_NAMESPACE_END
