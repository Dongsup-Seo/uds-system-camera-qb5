////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  asdtuning.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "asdtuning.h"
#include "parametersetmanager.h"

ASDTUNING_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ChromatixASDTuningTypeClass::ChromatixASDTuningTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(ASD_Software_Type);
    PARAMETER_INITIALIZE(snow_scene_detect);
    PARAMETER_INITIALIZE(backlit_scene_detect);
    PARAMETER_INITIALIZE(landscape_scene_detect);
    PARAMETER_INITIALIZE(portrait_scene_detect);
    PARAMETER_INITIALIZE(auto_hdr_detect);
    PARAMETER_INITIALIZE(hazy_scene_detect);
    PARAMETER_INITIALIZE(gamma_table);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ChromatixASDTuningTypeClass::ChromatixASDTuningTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(ASD_Software_Type);
    PARAMETER_INITIALIZE(snow_scene_detect);
    PARAMETER_INITIALIZE(backlit_scene_detect);
    PARAMETER_INITIALIZE(landscape_scene_detect);
    PARAMETER_INITIALIZE(portrait_scene_detect);
    PARAMETER_INITIALIZE(auto_hdr_detect);
    PARAMETER_INITIALIZE(hazy_scene_detect);
    PARAMETER_INITIALIZE(gamma_table);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ChromatixASDTuningTypeClass::~ChromatixASDTuningTypeClass()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* ChromatixASDTuningTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "ChromatixASDTuningData")) == 0)
    {
        name = "ChromatixASDTuningData";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load asd_gamma_table_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL ChromatixASDTuningTypeClass::Loadasd_gamma_table_type(
    ParameterFileSymbolTableEntry* entry,
    asd_gamma_table_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->bits_depth, alignment);
    result = result && entry->Read(&structure->entries_num, alignment);
    result = result && entry->ReadArray(structure->gamma_G, 256, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load hazy_scene_detect_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL ChromatixASDTuningTypeClass::Loadhazy_scene_detect_type(
    ParameterFileSymbolTableEntry* entry,
    hazy_scene_detect_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->hazy_detection_enable, alignment);
    result = result && entry->Read(&structure->hazy_running_frequency, alignment);
    result = result && entry->Read(&structure->hazy_detection_threshold_on, alignment);
    result = result && entry->Read(&structure->hazy_detection_threshold_off, alignment);
    result = result && entry->Read(&structure->ui_hazy_display_th, alignment);
    result = result && entry->Read(&structure->hazy_3A_compensation_enable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load auto_hdr_detect_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL ChromatixASDTuningTypeClass::Loadauto_hdr_detect_type(
    ParameterFileSymbolTableEntry* entry,
    auto_hdr_detect_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->backlight_high_threshold, alignment);
    result = result && entry->Read(&structure->backlight_low_threshold, alignment);
    result = result && entry->Read(&structure->portrait_high_threshold, alignment);
    result = result && entry->Read(&structure->portrait_low_threshold, alignment);
    result = result && entry->Read(&structure->auto_hdr_3A_compensation_enable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load portrait_scene_detect_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL ChromatixASDTuningTypeClass::Loadportrait_scene_detect_type(
    ParameterFileSymbolTableEntry* entry,
    portrait_scene_detect_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->portrait_detection_enable, alignment);
    result = result && entry->Read(&structure->skin_color_boost_factor, alignment);
    result = result && entry->Read(&structure->min_face_content_threshold, alignment);
    result = result && entry->Read(&structure->max_face_content_threshold, alignment);
    result = result && entry->Read(&structure->soft_focus_degree_7_7, alignment);
    result = result && entry->Read(&structure->soft_focus_degree_5_5, alignment);
    result = result && entry->Read(&structure->aggressiveness, alignment);
    result = result && entry->Read(&structure->ui_portrait_display_th, alignment);
    result = result && entry->Read(&structure->portrait_3A_compensation_enable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load landscape_scene_detect_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL ChromatixASDTuningTypeClass::Loadlandscape_scene_detect_type(
    ParameterFileSymbolTableEntry* entry,
    landscape_scene_detect_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->landscape_detection_enable, alignment);
    result = result && entry->Read(&structure->landscape_red_boost_factor, alignment);
    result = result && entry->Read(&structure->landscape_green_boost_factor, alignment);
    result = result && entry->Read(&structure->landscape_blue_boost_factor, alignment);
    result = result && entry->Read(&structure->min_blue_green_content_detection_threshold, alignment);
    result = result && entry->Read(&structure->max_blue_green_content_detection_threshold, alignment);
    result = result && entry->Read(&structure->green_offset_rg, alignment);
    result = result && entry->Read(&structure->green_offset_bg, alignment);
    result = result && entry->Read(&structure->aggressiveness, alignment);
    result = result && entry->Read(&structure->lux_idx_indoor, alignment);
    result = result && entry->Read(&structure->lux_idx_outdoor, alignment);
    result = result && entry->Read(&structure->ui_landscape_display_th, alignment);
    result = result && entry->Read(&structure->landscape_3A_compensation_enable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load backlit_scene_detect_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL ChromatixASDTuningTypeClass::Loadbacklit_scene_detect_type(
    ParameterFileSymbolTableEntry* entry,
    backlit_scene_detect_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->backlight_detection_enable, alignment);
    result = result && entry->Read(&structure->histogram_offset, alignment);
    result = result && entry->Read(&structure->low_luma_threshold, alignment);
    result = result && entry->Read(&structure->high_luma_threshold, alignment);
    result = result && entry->Read(&structure->low_luma_count_percent_threshold, alignment);
    result = result && entry->Read(&structure->high_luma_count_percent_threshold, alignment);
    result = result && entry->Read(&structure->kept_pixel_ratio_th, alignment);
    result = result && entry->Read(&structure->backlit_aggressiveness, alignment);
    result = result && entry->Read(&structure->max_percent_threshold, alignment);
    result = result && entry->Read(&structure->ui_backlit_display_th, alignment);
    result = result && entry->Read(&structure->backlit_3A_compensation_enable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load snow_scene_detect_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL ChromatixASDTuningTypeClass::Loadsnow_scene_detect_type(
    ParameterFileSymbolTableEntry* entry,
    snow_scene_detect_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->snow_scene_detection_enable = (asd_chrx_flag_t)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->y_cloudy_snow_threshold, alignment);
    result = result && entry->Read(&structure->awb_y_max_in_grey, alignment);
    result = result && entry->Read(&structure->min_snow_cloudy_sample_th, alignment);
    result = result && entry->Read(&structure->extreme_snow_cloudy_sample_th, alignment);
    result = result && entry->Read(&structure->snow_scene_indoor_index, alignment);
    result = result && entry->Read(&structure->snow_scene_outdoor_index, alignment);
    result = result && entry->Read(&structure->severe_snow_scene_cap, alignment);
    result = result && entry->Read(&structure->snowscene_aggressiveness, alignment);
    result = result && entry->Read(&structure->ui_snow_cloudy_display_th, alignment);
    result = result && entry->Read(&structure->snow_scene_3A_compensation_enable, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ChromatixASDTuningType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL ChromatixASDTuningTypeClass::LoadChromatixASDTuningType(
    ParameterFileSymbolTableEntry* entry,
    ChromatixASDTuningType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && entry->Read(&structure->ASD_Software_Type, alignment);
    result = result && Loadsnow_scene_detect_type(entry, &structure->snow_scene_detect, alignment);
    result = result && Loadbacklit_scene_detect_type(entry, &structure->backlit_scene_detect, alignment);
    result = result && Loadlandscape_scene_detect_type(entry, &structure->landscape_scene_detect, alignment);
    result = result && Loadportrait_scene_detect_type(entry, &structure->portrait_scene_detect, alignment);
    result = result && Loadauto_hdr_detect_type(entry, &structure->auto_hdr_detect, alignment);
    result = result && Loadhazy_scene_detect_type(entry, &structure->hazy_scene_detect, alignment);
    result = result && Loadasd_gamma_table_type(entry, &structure->gamma_table, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL ChromatixASDTuningTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    ChromatixASDTuningType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* ChromatixASDTuningTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    ChromatixASDTuningTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW ChromatixASDTuningTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadChromatixASDTuningType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


ASDTUNING_NAMESPACE_END
