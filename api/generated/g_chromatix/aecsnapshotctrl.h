////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecsnapshotctrl.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AECSNAPSHOTCTRL_H
#define AECSNAPSHOTCTRL_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "globalelements.h"
#include "aecglobalelements.h"

#define AECSNAPSHOTCTRL_NAMESPACE_BEGIN namespace aecSnapshotCtrl {
#define AECSNAPSHOTCTRL_NAMESPACE_END }

AECSNAPSHOTCTRL_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LLSLuxExpTimeLUTType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LLSLuxExpTimeLUTType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thresLuxIndex
    ///
    /// Tuning Level:  often_tune
    /// Description:   Specify the lux threshold for mapping the exposure time needed when LLS is triggered.
    /// Type:          float
    /// Range:         [0,1000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT  thresLuxIndex;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// requiredExpTime
    ///
    /// Tuning Level:  often_tune
    /// Description:   Required Exposure time wrt thresLuxIndex.
    /// Type:          ulong
    /// Range:         [1,60000000000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT64 requiredExpTime;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SnapshotCtrlExtensionType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SnapshotCtrlExtensionType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableLLS
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable Flag for Low Light Shot Feature, which extends Exposure time to delay flash trigger lux level
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                  enableLLS;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LLSLuxHysteresis
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Threshold pair of Lux for entering and exiting LLS use case
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType          LLSLuxHysteresis;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LLSExpTimeLUT - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                LLSExpTimeLUTCount;
    UINT32                LLSExpTimeLUTID;
    LLSLuxExpTimeLUTType* LLSExpTimeLUT;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SnapshotCtrlArbitrationType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SnapshotCtrlArbitrationType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// expTableIDSnapshot
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Exposure table Selection for Snapshot.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::ExposureTableIDType expTableIDSnapshot;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bracketingAdjForEVPos2
    ///
    /// Tuning Level:  never_tune
    /// Description:   Specify the EV bracketing adjustment for + 2 EV
    /// Type:          float
    /// Range:         [0,2]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               bracketingAdjForEVPos2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bracketingAdjForEVNeg2
    ///
    /// Tuning Level:  never_tune
    /// Description:   Specify the EV bracketing adjustment for - 2 EV
    /// Type:          float
    /// Range:         [0,2]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               bracketingAdjForEVNeg2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// maxLLSExtendedGain
    ///
    /// Tuning Level:  often_tune
    /// Description:   Specify the max gain LLS can tradeoff for
    /// Type:          float
    /// Range:         [1,512]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT               maxLLSExtendedGain;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECSnapshotCtrlType
/// Comments:       Snapshot Tuning Definition
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECSnapshotCtrlType
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// snapCtrlArb
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SnapshotCtrlArbitrationType snapCtrlArb;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// snapCtrlExt
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SnapshotCtrlExtensionType   snapCtrlExt;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECSnapshotCtrlTypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class AECSnapshotCtrlTypeClass : public ParameterModule, public AECSnapshotCtrlType
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 1;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECSnapshotCtrlTypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECSnapshotCtrlTypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~AECSnapshotCtrlTypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LLSLuxExpTimeLUTType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLLSLuxExpTimeLUTType(
        ParameterFileSymbolTableEntry* entry,
        LLSLuxExpTimeLUTType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SnapshotCtrlExtensionType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSnapshotCtrlExtensionType(
        ParameterFileSymbolTableEntry* entry,
        SnapshotCtrlExtensionType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SnapshotCtrlArbitrationType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSnapshotCtrlArbitrationType(
        ParameterFileSymbolTableEntry* entry,
        SnapshotCtrlArbitrationType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECSnapshotCtrlType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECSnapshotCtrlType(
        ParameterFileSymbolTableEntry* entry,
        AECSnapshotCtrlType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECSnapshotCtrlType::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECSnapshotCtrlType::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload SnapshotCtrlExtensionType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadSnapshotCtrlExtensionType(
        SnapshotCtrlExtensionType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECSnapshotCtrlType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECSnapshotCtrlType(
        AECSnapshotCtrlType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        AECSnapshotCtrlType::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class AECSnapshotCtrlTypeClass

AECSNAPSHOTCTRL_NAMESPACE_END
#endif // AECSNAPSHOTCTRL_H

