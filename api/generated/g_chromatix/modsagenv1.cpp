////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  modsagenv1.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "modsagenv1.h"
#include "parametersetmanager.h"

MODSAGENV1_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixSAGenV1ArrayTypeClass::chromatixSAGenV1ArrayTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(SAGenV1DataCount);
    PARAMETER_INITIALIZE(SAGenV1DataID);
    PARAMETER_INITIALIZE(SAGenV1Data);
    PARAMETER_INITIALIZE(enableFlag);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixSAGenV1ArrayTypeClass::chromatixSAGenV1ArrayTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(SAGenV1Data);
    PARAMETER_INITIALIZE(enableFlag);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixSAGenV1ArrayTypeClass::~chromatixSAGenV1ArrayTypeClass()
{
    UnloadchromatixSAGenV1ArrayType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixSAGenV1ArrayTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "SAGenV1DataArray")) == 0)
    {
        name = "SAGenV1DataArray";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixSAGenV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSAGenV1ArrayTypeClass::LoadchromatixSAGenV1Type(
    ParameterFileSymbolTableEntry* entry,
    chromatixSAGenV1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String Description from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->Description = NULL;
        result = result && stringPointerEntry->ReadString(&structure->Description, count, alignment);
    }
    result = result && awbglobalelements::awbglobalelementsClass::LoadmoduleIDType(entry, &structure->moduleID, alignment);
    result = result && entry->Read(&structure->enableFlag, alignment);
    result = result && entry->Read(&structure->weight, alignment);

    // Reading Array detectionZone from symbol table
    {
        result = result && entry->Read(&structure->detectionZoneCount, alignment);
        structure->detectionZoneID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->detectionZone = PARAMETER_NEW awbglobalelements::awbZoneDefineType[structure->detectionZoneCount];
        }
        if (!result || structure->detectionZone == NULL)
        {
            structure->detectionZoneCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->detectionZoneCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbZoneDefineType(pointerEntry, &structure->detectionZone[i], alignment);
        }
    }
    structure->configenceCmpt = (awbglobalelements::awbSAConfidenceCmptType)entry->ReadEnum(&result, alignment);

    // Reading Array confidenceLevel from symbol table
    {
        result = result && entry->Read(&structure->confidenceLevelCount, alignment);
        structure->confidenceLevelID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->confidenceLevel = PARAMETER_NEW awbglobalelements::awbSAConfidenceDataType[structure->confidenceLevelCount];
        }
        if (!result || structure->confidenceLevel == NULL)
        {
            structure->confidenceLevelCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->confidenceLevelCount; i++)
        {
            result = awbglobalelements::awbglobalelementsClass::LoadawbSAConfidenceDataType(pointerEntry, &structure->confidenceLevel[i], alignment);
        }
    }
    result = result && awbglobalelements::awbglobalelementsClass::LoadawbSATargetDataType(entry, &structure->targetAdjustment, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixSAGenV1ArrayType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSAGenV1ArrayTypeClass::LoadchromatixSAGenV1ArrayType(
    ParameterFileSymbolTableEntry* entry,
    chromatixSAGenV1ArrayType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);

    // Reading Array SAGenV1Data from symbol table
    {
        result = result && entry->Read(&structure->SAGenV1DataCount, alignment);
        structure->SAGenV1DataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->SAGenV1Data = PARAMETER_NEW chromatixSAGenV1Type[structure->SAGenV1DataCount];
        }
        if (!result || structure->SAGenV1Data == NULL)
        {
            structure->SAGenV1DataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->SAGenV1DataCount; i++)
        {
            result = LoadchromatixSAGenV1Type(pointerEntry, &structure->SAGenV1Data[i], alignment);
        }
    }
    result = result && entry->Read(&structure->enableFlag, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixSAGenV1ArrayTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixSAGenV1ArrayType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixSAGenV1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixSAGenV1ArrayTypeClass::UnloadchromatixSAGenV1Type(
    chromatixSAGenV1Type* structure)
{
    PARAMETER_DELETE[] structure->Description;
    for (UINT32 i = 0; i < structure->detectionZoneCount; i++)
    {
        awbglobalelements::awbglobalelementsClass::UnloadawbZoneDefineType(&structure->detectionZone[i]);
    }
    PARAMETER_DELETE[] structure->detectionZone;
    for (UINT32 i = 0; i < structure->confidenceLevelCount; i++)
    {
        awbglobalelements::awbglobalelementsClass::UnloadawbSAConfidenceDataType(&structure->confidenceLevel[i]);
    }
    PARAMETER_DELETE[] structure->confidenceLevel;
    awbglobalelements::awbglobalelementsClass::UnloadawbSATargetDataType(&structure->targetAdjustment);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixSAGenV1ArrayType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixSAGenV1ArrayTypeClass::UnloadchromatixSAGenV1ArrayType(
    chromatixSAGenV1ArrayType* structure)
{
    for (UINT32 i = 0; i < structure->SAGenV1DataCount; i++)
    {
        UnloadchromatixSAGenV1Type(&structure->SAGenV1Data[i]);
    }
    PARAMETER_DELETE[] structure->SAGenV1Data;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixSAGenV1ArrayTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixSAGenV1ArrayTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixSAGenV1ArrayTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixSAGenV1ArrayType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


MODSAGENV1_NAMESPACE_END
