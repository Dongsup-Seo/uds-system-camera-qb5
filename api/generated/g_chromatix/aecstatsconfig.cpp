////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecstatsconfig.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "aecstatsconfig.h"
#include "parametersetmanager.h"

AECSTATSCONFIG_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECStatsConfigClass::AECStatsConfigClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(histStatsConfig);
    PARAMETER_INITIALIZE(gridStatsConfig);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECStatsConfigClass::AECStatsConfigClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(histStatsConfig);
    PARAMETER_INITIALIZE(gridStatsConfig);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECStatsConfigClass::~AECStatsConfigClass()
{
    UnloadAECStatsConfig(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* AECStatsConfigClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "StatsDefaultConfig")) == 0)
    {
        name = "StatsDefaultConfig";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECGridStatsConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECStatsConfigClass::LoadAECGridStatsConfig(
    ParameterFileSymbolTableEntry* entry,
    AECGridStatsConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->numOfRegionsHorizontal, alignment);
    result = result && entry->Read(&structure->numOfRegionsVertical, alignment);
    result = result && entry->Read(&structure->enableStatsQuadSync, alignment);
    result = result && entry->Read(&structure->enableSaturatedStats, alignment);
    result = result && entry->Read(&structure->enableYComputedStats, alignment);
    result = result && entry->ReadArray(structure->YComputationColorWeight, 3, alignment);
    result = result && entry->ReadArray(structure->minStatsChannelThreshold, 4, alignment);
    result = result && entry->ReadArray(structure->maxStatsChannelThreshold, 4, alignment);
    result = result && entry->Read(&structure->HWStatsSkipFactor, alignment);
    structure->ROIConfigControl = (AECROIConfigControlType)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->bitDepth, alignment);
    structure->siteSelection = (aecglobalelements::AECStatsSiteSelection)entry->ReadEnum(&result, alignment);
    structure->pixelExpSelect = (aecglobalelements::AECStatsPixelExpSelect)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->regionSampling, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load HistIndividualConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECStatsConfigClass::LoadHistIndividualConfigType(
    ParameterFileSymbolTableEntry* entry,
    HistIndividualConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->histogramType = (aecglobalelements::AECStatsHistogramType)entry->ReadEnum(&result, alignment);
    structure->binUniformity = (aecglobalelements::AECStatsHistogramUniformityType)entry->ReadEnum(&result, alignment);
    structure->colorChannel = (aecglobalelements::AECStatsHistogramChannelType)entry->ReadEnum(&result, alignment);
    structure->siteSelection = (aecglobalelements::AECStatsSiteSelection)entry->ReadEnum(&result, alignment);
    structure->pixelExpSelect = (aecglobalelements::AECStatsPixelExpSelect)entry->ReadEnum(&result, alignment);
    structure->ROIConfigControl = (AECROIConfigControlType)entry->ReadEnum(&result, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECHistStatsConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECStatsConfigClass::LoadAECHistStatsConfig(
    ParameterFileSymbolTableEntry* entry,
    AECHistStatsConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->ROIConfigControl = (AECROIConfigControlType)entry->ReadEnum(&result, alignment);

    // Reading Array histograms from symbol table
    {
        result = result && entry->Read(&structure->histogramsCount, alignment);
        structure->histogramsID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->histograms = PARAMETER_NEW HistIndividualConfigType[structure->histogramsCount];
        }
        if (!result || structure->histograms == NULL)
        {
            structure->histogramsCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->histogramsCount; i++)
        {
            result = LoadHistIndividualConfigType(pointerEntry, &structure->histograms[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECStatsConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECStatsConfigClass::LoadAECStatsConfig(
    ParameterFileSymbolTableEntry* entry,
    AECStatsConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && LoadAECHistStatsConfig(entry, &structure->histStatsConfig, alignment);
    result = result && LoadAECGridStatsConfig(entry, &structure->gridStatsConfig, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECStatsConfigClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECStatsConfig::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECStatsConfigClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECStatsConfig::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECHistStatsConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECStatsConfigClass::UnloadAECHistStatsConfig(
    AECHistStatsConfig* structure)
{
    PARAMETER_DELETE[] structure->histograms;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECStatsConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECStatsConfigClass::UnloadAECStatsConfig(
    AECStatsConfig* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadAECHistStatsConfig(&structure->histStatsConfig);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECStatsConfigClass::Unloadparameter_versionStruct(
    AECStatsConfig::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* AECStatsConfigClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    AECStatsConfigClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW AECStatsConfigClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadAECStatsConfig(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AECSTATSCONFIG_NAMESPACE_END
