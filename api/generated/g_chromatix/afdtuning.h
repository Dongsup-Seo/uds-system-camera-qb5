////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afdtuning.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AFDTUNING_H
#define AFDTUNING_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "globalelements.h"
#include "statsglobalelements.h"

#define AFDTUNING_NAMESPACE_BEGIN namespace afdTuning {
#define AFDTUNING_NAMESPACE_END }

AFDTUNING_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// afd_param_extension_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct afd_param_extension_type
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// extension_param - Array
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   extension feature
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                   extension_paramCount;
    UINT32                   extension_paramID;
    statsglobalelements::statsExtensionParamType* extension_param;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// trigger_point_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct trigger_point_type
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lux_index_start
    ///
    /// Description:   Lux index based trigger point: start
    /// Type:          long
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT64 lux_index_start;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lux_index_end
    ///
    /// Description:   Lux index based trigger point: end
    /// Type:          long
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT64 lux_index_end;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// num_bands_dependent_downsampling_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct num_bands_dependent_downsampling_type
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// num_bands_start
    ///
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT num_bands_start;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// num_bands_end
    ///
    /// Type:          float
    /// Default Value: 20
    /// Range:         [0,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT num_bands_end;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// downsampling_factor
    ///
    /// Type:          int
    /// Default Value: 2
    /// Range:         [1,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 downsampling_factor;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// af_status_select_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class af_status_select_type
{
    af_active_flag_based = 0,
    af_lens_pos_based    = 1
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// af_status_check_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct af_status_check_type
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// af_status_select
    ///
    /// Description:   select af status as len position based or af_active flag based
    /// Type:          af_status_select_type
    /// Default Value: af_active_flag_based
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    af_status_select_type af_status_select;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stable_lens_pos_threshold
    ///
    /// Type:          float
    /// Default Value: 2
    /// Range:         [0,20]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                 stable_lens_pos_threshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// stable_lens_pos_frame_count
    ///
    /// Type:          int
    /// Default Value: 1
    /// Range:         [1,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                 stable_lens_pos_frame_count;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_afd_rolling_data_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_afd_rolling_data_type
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// std_threshold
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Peak distance standard deviation threshold
    /// Type:          float
    /// Range:         [0.1,0.3]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                                  std_threshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// percent_threshold
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Percentage of peaks rolling in same direction threshold, when FOV is small and there is only one peak per
    ///                frame
    /// Type:          int
    /// Range:         [40,60]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  percent_threshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// diff_threshold
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Differential threshold to detect a peak
    /// Type:          ulong
    /// Range:         [10,1000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT64                                 diff_threshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// num_peaks_threshold
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Number of peaks to detect to declare flicker
    /// Type:          int
    /// Range:         [2,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  num_peaks_threshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// num_flicker_threshold
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   the threshold for total number of flicker detected in column
    /// Type:          int
    /// Range:         [1,8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  num_flicker_threshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// band_dist_comp
    ///
    /// Tuning Level:  never_tune
    /// Description:   Peak distance must be at least computed distance * band_dist_comp to be considered
    /// Type:          float
    /// Range:         [0.8,0.95]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                                  band_dist_comp;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// band_range_min
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   To decide flicker or not: peak width range min
    /// Type:          float
    /// Range:         [0.8,0.9]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                                  band_range_min;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// band_range_max
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   To decide flicker or not: peak width range max
    /// Type:          float
    /// Range:         [1.1,1.3]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                                  band_range_max;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// col_skip_enable
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enable column skip pattern
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                                   col_skip_enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// col_skip_pattern - Array
    ///
    /// Tuning Level:  often_tune
    /// Description:   Colomn skip pattern. Enable required column in rolling band processing
    /// Type:          bool
    /// Length:        16
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                                   col_skip_pattern[16];

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// downsampling_enable
    ///
    /// Tuning Level:  often_tune
    /// Description:   enable downsampling
    /// Type:          bool
    /// Default Value: true
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                                   downsampling_enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// num_bands_dependent_downsampling - Array
    ///
    /// Tuning Level:  often_tune
    /// Description:   downSampling Factor according to number of bands
    /// Type:          num_bands_dependent_downsampling_type
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                                 num_bands_dependent_downsamplingCount;
    UINT32                                 num_bands_dependent_downsamplingID;
    num_bands_dependent_downsampling_type* num_bands_dependent_downsampling;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_afd_scd_data_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_afd_scd_data_type
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sad_thr
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Frame to frame difference threshold
    /// Type:          int
    /// Range:         [20,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 sad_thr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sadr_thr
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   First frame to current 5 frame difference threshold
    /// Type:          int
    /// Range:         [20,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 sadr_thr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sad_max_frame
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   How many frame scene detection should use
    /// Type:          int
    /// Range:         [1,6]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 sad_max_frame;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_afd_static_data_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_afd_static_data_type
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thldLevel2Ratio
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Energy ratio threshold for level 2, Q8 format
    /// Type:          int
    /// Range:         [240,256]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  thldLevel2Ratio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thldLevel3Ratio
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Energy ratio threshold for level 3, Q8 format
    /// Type:          int
    /// Range:         [235,250]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  thldLevel3Ratio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thldLevel2Col
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   How many columns need to detect flicker in level 2
    /// Type:          int
    /// Range:         [1,16]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  thldLevel2Col;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thldLevel3Col
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   How many columns need to detect flicker in level 3
    /// Type:          int
    /// Range:         [1,16]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  thldLevel3Col;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thldEkL
    ///
    /// Tuning Level:  never_tune
    /// Description:   lower energy threshold of k_th level processing, Q10 format
    /// Type:          int
    /// Range:         [6144,7168]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  thldEkL;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thldEkU
    ///
    /// Tuning Level:  never_tune
    /// Description:   lower energy threshold of k_th level processing, Q10 format
    /// Type:          int
    /// Range:         [102400,131072]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  thldEkU;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thldCounterL3
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Positive frame counter threshold for level 3 detection
    /// Type:          int
    /// Range:         [1,4]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  thldCounterL3;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// thldCounterL2
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Positive frame counter threshold for level 2 detection
    /// Type:          int
    /// Range:         [4,8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  thldCounterL2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LevelDepth
    ///
    /// Tuning Level:  never_tune
    /// Description:   Decides whether process only level 3 or both level 2 and 3
    /// Type:          int
    /// Range:         [2,3]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  LevelDepth;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// static_step_size
    ///
    /// Tuning Level:  never_tune
    /// Description:   Moving window step size
    /// Type:          int
    /// Range:         [4,16]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  static_step_size;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// static_down_size
    ///
    /// Tuning Level:  never_tune
    /// Description:   Data downsampling rate
    /// Type:          int
    /// Range:         [2,4]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  static_down_size;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// col_skip_enable
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   enable column skip pattern
    /// Type:          bool
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                                   col_skip_enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// col_skip_pattern - Array
    ///
    /// Tuning Level:  often_tune
    /// Description:   Colomn skip pattern. Enable required column in static band processing
    /// Type:          bool
    /// Length:        16
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                                   col_skip_pattern[16];

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// static_k_step
    ///
    /// Tuning Level:  never_tune
    /// Description:   Fourier series decomposition level
    /// Type:          int
    /// Range:         [4,12]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  static_k_step;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// static_slope_steep_thr
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   When linear regression slope is steeper we will not consider that data. Default value Q16
    /// Type:          int
    /// Range:         [150000,350000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  static_slope_steep_thr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// static_slope_not_steep_thr
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   When linear regression slope is lower we will boost energy ratio. Default value Q16
    /// Type:          int
    /// Range:         [8192,65536]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  static_slope_not_steep_thr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// static_confidence_level_slope_ratio
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   when linear regression is not steep: boost energy ratio that indicates static bands
    /// Type:          float
    /// Range:         [1.1,1.3]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                                  static_confidence_level_slope_ratio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// static_confidence_thr_h
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   High threshold for signal to determine confidence
    /// Type:          int
    /// Range:         [1,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  static_confidence_thr_h;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// static_confidence_thr_l
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Low threshold for signal to determine confidence
    /// Type:          int
    /// Range:         [1,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  static_confidence_thr_l;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// static_confidence_ratio_h
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   How much ratio will be applied for high threshold
    /// Type:          float
    /// Range:         [1.0,1.5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                                  static_confidence_ratio_h;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// static_confidence_ratio_l
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   How much ratio will be applied for low threshold
    /// Type:          float
    /// Range:         [1.0,1.5]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                                  static_confidence_ratio_l;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// static_low_rowsum_thr
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   When rowsum values are lower than this threshold, increase rowsum data itself
    /// Type:          int
    /// Default Value: 5000
    /// Range:         [4000,10000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  static_low_rowsum_thr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// static_low_rowsum_comp
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   When rowsum values are lower than static_low_rowsum_thr apply this compensation gain
    /// Type:          int
    /// Range:         [1,8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                                  static_low_rowsum_comp;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// downsampling_enable
    ///
    /// Tuning Level:  often_tune
    /// Description:   enable downsampling
    /// Type:          bool
    /// Default Value: true
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                                   downsampling_enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// num_bands_dependent_downsampling - Array
    ///
    /// Tuning Level:  often_tune
    /// Description:   downSampling Factor according to number of bands
    /// Type:          num_bands_dependent_downsampling_type
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                                 num_bands_dependent_downsamplingCount;
    UINT32                                 num_bands_dependent_downsamplingID;
    num_bands_dependent_downsampling_type* num_bands_dependent_downsampling;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_auto_flicker_detection_data_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_auto_flicker_detection_data_type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// frame_ct_threshold
    ///
    /// Tuning Level:  often_tune
    /// Description:   Number of frames before AFD algorithm starts
    /// Type:          ulong
    /// Range:         [1,500]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT64                          frame_ct_threshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// frame_smooth_detection_thr
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   After certain frames, detection rate is slower
    /// Type:          int
    /// Range:         [10,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                           frame_smooth_detection_thr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// frame_smooth_ct_threshold
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   After certain frames, detection rate is slower. Recommended value: double frame_smooth_detection_thr
    /// Type:          int
    /// Range:         [20,200]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                           frame_smooth_ct_threshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// num_frames
    ///
    /// Tuning Level:  never_tune
    /// Description:   How many frames to gather before performing analysis
    /// Type:          int
    /// Range:         [5,8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                           num_frames;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// frame_skip
    ///
    /// Tuning Level:  never_tune
    /// Description:   Detecting flicker by comparing frame N to frame N + skip
    /// Type:          int
    /// Range:         [1,3]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                           frame_skip;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// num_rows
    ///
    /// Tuning Level:  never_tune
    /// Description:   Number of rows in rowsum stats
    /// Type:          int
    /// Range:         [300,1024]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                           num_rows;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// num_cols
    ///
    /// Tuning Level:  never_tune
    /// Description:   Number of column regions in rowsum stats
    /// Type:          int
    /// Range:         [4,16]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                           num_cols;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// switch_on_first_detection
    ///
    /// Tuning Level:  often_tune
    /// Description:   AFD detection 2 times to reduce false positive for extreme cases. ex. PIP or low band number
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                            switch_on_first_detection;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// max_attempts_for_second_detection
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   How many frames to be said it is detected twice.
    /// Type:          int
    /// Range:         [0,30]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                           max_attempts_for_second_detection;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// AFD_continuous_enable
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Will keep AFD algorithm running during camera session
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                            AFD_continuous_enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// num_frames_settle
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   max frame count for new AFD setting to take effect
    /// Type:          int
    /// Range:         [1,4]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                           num_frames_settle;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// start_antbanding_table
    ///
    /// Tuning Level:  often_tune
    /// Description:   Start state: either 60Hz or 50Hz
    /// Type:          int
    /// Range:         [50,60]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                           start_antbanding_table;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// max_exp_time_ms
    ///
    /// Tuning Level:  never_tune
    /// Description:   Max exp time we still do AFD, in ms,
    /// Type:          float
    /// Range:         [8.3,200]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           max_exp_time_ms;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// AFD_always_on_enable
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   no matter how less the exp_time, AFD will detect flicker
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                            AFD_always_on_enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// AFD_static_band_enable
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Flag to enable static band processing
    /// Type:          bool
    /// Default Value: true
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                            AFD_static_band_enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// af_status_check
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   params to check AF active or not
    /// Type:          af_status_check_type
    /// Default Value: true
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    af_status_check_type            af_status_check;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// frame_similarity_check_enable
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Flag to enable similarity check between consecutive frames
    /// Type:          bool
    /// Default Value: true
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                            frame_similarity_check_enable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// similarity_ratio_thresh
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   similarity ratio threshold
    /// Type:          float
    /// Default Value: 0.5
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                           similarity_ratio_thresh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// similar_frame_count_thresh
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   similar frame count threshold
    /// Type:          int
    /// Default Value: 3
    /// Range:         [1,8]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32                           similar_frame_count_thresh;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// afd_bright_light_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    trigger_point_type              afd_bright_light_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// afd_low_light_trigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    trigger_point_type              afd_low_light_trigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// afd_rolling_bright
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_afd_rolling_data_type afd_rolling_bright;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// afd_rolling_normal
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_afd_rolling_data_type afd_rolling_normal;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// afd_rolling_lowlight
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_afd_rolling_data_type afd_rolling_lowlight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// afd_static_bright
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_afd_static_data_type  afd_static_bright;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// afd_static_normal
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_afd_static_data_type  afd_static_normal;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// afd_static_lowlight
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_afd_static_data_type  afd_static_lowlight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// afd_scd_bright
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_afd_scd_data_type     afd_scd_bright;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// afd_scd_normal
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_afd_scd_data_type     afd_scd_normal;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// afd_scd_lowlight
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_afd_scd_data_type     afd_scd_lowlight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// afd_param_extension
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    afd_param_extension_type        afd_param_extension;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_auto_flicker_detection_data_typeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatix_auto_flicker_detection_data_typeClass : public ParameterModule, public chromatix_auto_flicker_detection_data_type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 1;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_auto_flicker_detection_data_typeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_auto_flicker_detection_data_typeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatix_auto_flicker_detection_data_typeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load afd_param_extension_type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadafd_param_extension_type(
        ParameterFileSymbolTableEntry* entry,
        afd_param_extension_type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load trigger_point_type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadtrigger_point_type(
        ParameterFileSymbolTableEntry* entry,
        trigger_point_type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load num_bands_dependent_downsampling_type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadnum_bands_dependent_downsampling_type(
        ParameterFileSymbolTableEntry* entry,
        num_bands_dependent_downsampling_type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load af_status_check_type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadaf_status_check_type(
        ParameterFileSymbolTableEntry* entry,
        af_status_check_type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_afd_rolling_data_type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_afd_rolling_data_type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_afd_rolling_data_type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_afd_scd_data_type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_afd_scd_data_type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_afd_scd_data_type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_afd_static_data_type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_afd_static_data_type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_afd_static_data_type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_auto_flicker_detection_data_type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_auto_flicker_detection_data_type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_auto_flicker_detection_data_type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_auto_flicker_detection_data_type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload afd_param_extension_type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadafd_param_extension_type(
        afd_param_extension_type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_afd_rolling_data_type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_afd_rolling_data_type(
        chromatix_afd_rolling_data_type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_afd_static_data_type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_afd_static_data_type(
        chromatix_afd_static_data_type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_auto_flicker_detection_data_type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_auto_flicker_detection_data_type(
        chromatix_auto_flicker_detection_data_type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatix_auto_flicker_detection_data_typeClass

AFDTUNING_NAMESPACE_END
#endif // AFDTUNING_H

