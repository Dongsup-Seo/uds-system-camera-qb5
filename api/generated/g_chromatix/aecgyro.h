////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecgyro.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AECGYRO_H
#define AECGYRO_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "globalelements.h"
#include "aecglobalelements.h"

#define AECGYRO_NAMESPACE_BEGIN namespace aecGyro {
#define AECGYRO_NAMESPACE_END }

AECGYRO_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GyroExpCtrlValueMonitorType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct GyroExpCtrlValueMonitorType
{
    CHAR*               name;
    INT32               sensitivity;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// valueMonitor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::AECValueMonitorType valueMonitor;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GyroExpCtrlAuxZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct GyroExpCtrlAuxZoneDataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// data
    ///
    /// Tuning Level:  often_tune
    /// Description:   trigger zone data depending on the type
    /// Type:          float
    /// Default Value: 0
    /// Range:         [0.0,1000000000]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GyroExpCtrlAuxZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct GyroExpCtrlAuxZoneType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ///
    /// Description:   Second level trigger zone using gyro data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType           zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData
    ///
    /// Description:   Zone data and type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    GyroExpCtrlAuxZoneDataType zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GyroExpCtrlZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct GyroExpCtrlZoneType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneTrigger
    ///
    /// Description:   Gyro start and end values that define trigger region
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::TriggerPointType        zoneTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// zoneData - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                  zoneDataCount;
    UINT32                  zoneDataID;
    GyroExpCtrlAuxZoneType* zoneData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECGyroType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECGyroType
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableFlag
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable Flag for Depth-based AEC Adjustments
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                           enableFlag;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// movingAvgFilterLength
    ///
    /// Tuning Level:  often_tune
    /// Description:   Number of taps for moving average process of gyro data
    /// Default Value: 30
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                         movingAvgFilterLength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// level2ZoneType
    /// Default Value: GyroExpCtrlKeyCurExpTimeType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::AECGyroExpCtrlKeyLevelZoneType level2ZoneType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// triggerDataType
    /// Default Value: GyroExpCtrlTriggerDataTargetExpoTime
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::AECGyroExpCtrlTriggerDataType  triggerDataType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gyroExpCtrlTrigger - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                         gyroExpCtrlTriggerCount;
    UINT32                         gyroExpCtrlTriggerID;
    GyroExpCtrlZoneType*           gyroExpCtrlTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gyroExpCtrlValueMonitors - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                         gyroExpCtrlValueMonitorsCount;
    UINT32                         gyroExpCtrlValueMonitorsID;
    GyroExpCtrlValueMonitorType*   gyroExpCtrlValueMonitors;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECGyroTypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class AECGyroTypeClass : public ParameterModule, public AECGyroType
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 8;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECGyroTypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECGyroTypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~AECGyroTypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load GyroExpCtrlValueMonitorType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadGyroExpCtrlValueMonitorType(
        ParameterFileSymbolTableEntry* entry,
        GyroExpCtrlValueMonitorType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load GyroExpCtrlAuxZoneDataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadGyroExpCtrlAuxZoneDataType(
        ParameterFileSymbolTableEntry* entry,
        GyroExpCtrlAuxZoneDataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load GyroExpCtrlAuxZoneType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadGyroExpCtrlAuxZoneType(
        ParameterFileSymbolTableEntry* entry,
        GyroExpCtrlAuxZoneType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load GyroExpCtrlZoneType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadGyroExpCtrlZoneType(
        ParameterFileSymbolTableEntry* entry,
        GyroExpCtrlZoneType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECGyroType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECGyroType(
        ParameterFileSymbolTableEntry* entry,
        AECGyroType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECGyroType::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECGyroType::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload GyroExpCtrlValueMonitorType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadGyroExpCtrlValueMonitorType(
        GyroExpCtrlValueMonitorType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload GyroExpCtrlZoneType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadGyroExpCtrlZoneType(
        GyroExpCtrlZoneType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECGyroType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECGyroType(
        AECGyroType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        AECGyroType::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class AECGyroTypeClass

AECGYRO_NAMESPACE_END
#endif // AECGYRO_H

