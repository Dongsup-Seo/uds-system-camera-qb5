////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aecsnapshotctrl.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "aecsnapshotctrl.h"
#include "parametersetmanager.h"

AECSNAPSHOTCTRL_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECSnapshotCtrlTypeClass::AECSnapshotCtrlTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(snapCtrlArb);
    PARAMETER_INITIALIZE(snapCtrlExt);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECSnapshotCtrlTypeClass::AECSnapshotCtrlTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(snapCtrlArb);
    PARAMETER_INITIALIZE(snapCtrlExt);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AECSnapshotCtrlTypeClass::~AECSnapshotCtrlTypeClass()
{
    UnloadAECSnapshotCtrlType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* AECSnapshotCtrlTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "SnapshotControl")) == 0)
    {
        name = "SnapshotControl";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load LLSLuxExpTimeLUTType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECSnapshotCtrlTypeClass::LoadLLSLuxExpTimeLUTType(
    ParameterFileSymbolTableEntry* entry,
    LLSLuxExpTimeLUTType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->thresLuxIndex, alignment);
    result = result && entry->Read(&structure->requiredExpTime, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load SnapshotCtrlExtensionType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECSnapshotCtrlTypeClass::LoadSnapshotCtrlExtensionType(
    ParameterFileSymbolTableEntry* entry,
    SnapshotCtrlExtensionType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enableLLS, alignment);
    result = result && aecglobalelements::aecglobalelementsClass::LoadStartEndType(entry, &structure->LLSLuxHysteresis, alignment);

    // Reading Array LLSExpTimeLUT from symbol table
    {
        result = result && entry->Read(&structure->LLSExpTimeLUTCount, alignment);
        structure->LLSExpTimeLUTID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->LLSExpTimeLUT = PARAMETER_NEW LLSLuxExpTimeLUTType[structure->LLSExpTimeLUTCount];
        }
        if (!result || structure->LLSExpTimeLUT == NULL)
        {
            structure->LLSExpTimeLUTCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->LLSExpTimeLUTCount; i++)
        {
            result = LoadLLSLuxExpTimeLUTType(pointerEntry, &structure->LLSExpTimeLUT[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load SnapshotCtrlArbitrationType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECSnapshotCtrlTypeClass::LoadSnapshotCtrlArbitrationType(
    ParameterFileSymbolTableEntry* entry,
    SnapshotCtrlArbitrationType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->expTableIDSnapshot, alignment);
    result = result && entry->Read(&structure->bracketingAdjForEVPos2, alignment);
    result = result && entry->Read(&structure->bracketingAdjForEVNeg2, alignment);
    result = result && entry->Read(&structure->maxLLSExtendedGain, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load AECSnapshotCtrlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECSnapshotCtrlTypeClass::LoadAECSnapshotCtrlType(
    ParameterFileSymbolTableEntry* entry,
    AECSnapshotCtrlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && LoadSnapshotCtrlArbitrationType(entry, &structure->snapCtrlArb, alignment);
    result = result && LoadSnapshotCtrlExtensionType(entry, &structure->snapCtrlExt, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECSnapshotCtrlTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECSnapshotCtrlType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL AECSnapshotCtrlTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    AECSnapshotCtrlType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload SnapshotCtrlExtensionType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECSnapshotCtrlTypeClass::UnloadSnapshotCtrlExtensionType(
    SnapshotCtrlExtensionType* structure)
{
    PARAMETER_DELETE[] structure->LLSExpTimeLUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload AECSnapshotCtrlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECSnapshotCtrlTypeClass::UnloadAECSnapshotCtrlType(
    AECSnapshotCtrlType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadSnapshotCtrlExtensionType(&structure->snapCtrlExt);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AECSnapshotCtrlTypeClass::Unloadparameter_versionStruct(
    AECSnapshotCtrlType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* AECSnapshotCtrlTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    AECSnapshotCtrlTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW AECSnapshotCtrlTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadAECSnapshotCtrlType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AECSNAPSHOTCTRL_NAMESPACE_END
