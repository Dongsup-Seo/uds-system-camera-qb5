////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afbafelements.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "afbafelements.h"
#include "parametersetmanager.h"

AFBAFELEMENTS_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixBAFTypeClass::chromatixBAFTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(configures);
    PARAMETER_INITIALIZE(BAFInputPresets);
    PARAMETER_INITIALIZE(BAFGammaPresets);
    PARAMETER_INITIALIZE(BAFScalerPresets);
    PARAMETER_INITIALIZE(BAFFIRPresets);
    PARAMETER_INITIALIZE(BAFIIRPresets);
    PARAMETER_INITIALIZE(BAFCoringPresets);
    PARAMETER_INITIALIZE(sets);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixBAFTypeClass::chromatixBAFTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(parameter_version);
    PARAMETER_INITIALIZE(configures);
    PARAMETER_INITIALIZE(BAFInputPresets);
    PARAMETER_INITIALIZE(BAFGammaPresets);
    PARAMETER_INITIALIZE(BAFScalerPresets);
    PARAMETER_INITIALIZE(BAFFIRPresets);
    PARAMETER_INITIALIZE(BAFIIRPresets);
    PARAMETER_INITIALIZE(BAFCoringPresets);
    PARAMETER_INITIALIZE(sets);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatixBAFTypeClass::~chromatixBAFTypeClass()
{
    UnloadchromatixBAFType(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatixBAFTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "chromatixBAF")) == 0)
    {
        name = "chromatixBAF";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixTouchROISettingsType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixTouchROISettingsType(
    ParameterFileSymbolTableEntry* entry,
    chromatixTouchROISettingsType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->touchScalingFactorNormalLight, alignment);
    result = result && entry->Read(&structure->touchScalingFactorLowLight, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFFIRType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFFIRType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFFIRType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->FIREnable, alignment);
    result = result && entry->ReadArray(structure->coefficients, 13, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFIIRType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFIIRType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFIIRType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->IIREnable, alignment);
    result = result && entry->ReadArray(structure->coefficients, 10, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFHVFilterSettingsType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFHVFilterSettingsType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFHVFilterSettingsType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadchromatixBAFIIRType(entry, &structure->IIR, alignment);
    result = result && LoadchromatixBAFFIRType(entry, &structure->FIR, alignment);
    result = result && entry->Read(&structure->nFilterShiftBits, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFCoringType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFCoringType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFCoringType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->coringEnable, alignment);
    result = result && entry->ReadArray(structure->LUT, 17, alignment);
    result = result && entry->Read(&structure->coringThreshold, alignment);
    result = result && entry->Read(&structure->coringGain, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFilterSettingsType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFilterSettingsType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFilterSettingsType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->presetID = (chromatixBAFPresetEnumType)entry->ReadEnum(&result, alignment);
    result = result && LoadchromatixBAFCoringType(entry, &structure->coring, alignment);
    result = result && LoadchromatixBAFHVFilterSettingsType(entry, &structure->filterCustom, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFScalerSettings
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFScalerSettings(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFScalerSettings* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->scalerEnable, alignment);
    result = result && entry->Read(&structure->MNScalerMval, alignment);
    result = result && entry->Read(&structure->MNScalerNval, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFFilterType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFFilterType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFFilterType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 2; i++)
    {
        result = LoadchromatixBAFilterSettingsType(entry, &structure->HVFilter[i], alignment);
    }
    result = result && LoadchromatixBAFScalerSettings(entry, &structure->scaler, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFChannelSettings
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFChannelSettings(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFChannelSettings* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->ChannelSelect, alignment);
    result = result && entry->Read(&structure->gbgrChannelSelect, alignment);
    result = result && entry->Read(&structure->yConversionEnable, alignment);
    result = result && entry->ReadArray(structure->RGBToYCoefficients, 3, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFGammaType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFGammaType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFGammaType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadchromatixBAFChannelSettings(entry, &structure->channelSettings, alignment);
    result = result && entry->Read(&structure->gammaEnable, alignment);
    result = result && entry->ReadArray(structure->gammaLUT, 32, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFGammaParamType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFGammaParamType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFGammaParamType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->presetID = (chromatixBAFPresetEnumType)entry->ReadEnum(&result, alignment);
    result = result && LoadchromatixBAFGammaType(entry, &structure->gammaCustom, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFROISettingsType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFROISettingsType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFROISettingsType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->flag, alignment);
    result = result && entry->Read(&structure->startXOffset, alignment);
    result = result && entry->Read(&structure->startYOffset, alignment);
    result = result && entry->Read(&structure->widthRatio, alignment);
    result = result && entry->Read(&structure->heightRatio, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFROIParamsType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFROIParamsType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFROIParamsType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->presetID = (chromatixBAFROIPatternEnumType)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->widthRatio, alignment);
    result = result && entry->Read(&structure->heightRatio, alignment);
    result = result && entry->Read(&structure->gridSizeH, alignment);
    result = result && entry->Read(&structure->gridSizeV, alignment);
    result = result && entry->Read(&structure->gridGapH, alignment);
    result = result && entry->Read(&structure->gridGapV, alignment);
    result = result && entry->Read(&structure->numROI, alignment);

    // Reading Array ROICustom from symbol table
    {
        result = result && entry->Read(&structure->ROICustomCount, alignment);
        structure->ROICustomID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->ROICustom = PARAMETER_NEW chromatixBAFROISettingsType[structure->ROICustomCount];
        }
        if (!result || structure->ROICustom == NULL)
        {
            structure->ROICustomCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->ROICustomCount; i++)
        {
            result = LoadchromatixBAFROISettingsType(pointerEntry, &structure->ROICustom[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFSetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFSetType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFSetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->BAFID = (chromatixBAFSetType::BAFIDEnum)entry->ReadEnum(&result, alignment);
    for (UINT32 i = 0; result && i < 4; i++)
    {
        result = result && LoadchromatixBAFROIParamsType(entry, &structure->ROIConfig[i], alignment);
    }
    for (UINT32 i = 0; result && i < 4; i++)
    {
        result = result && LoadchromatixBAFGammaParamType(entry, &structure->gamma[i], alignment);
    }
    for (UINT32 i = 0; result && i < 4; i++)
    {
        result = result && LoadchromatixBAFFilterType(entry, &structure->filter[i], alignment);
    }
    result = result && LoadchromatixTouchROISettingsType(entry, &structure->touchROI, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFSetsType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFSetsType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFSetsType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadchromatixBAFSetType(entry, &structure->elements, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFCoringPresetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFCoringPresetType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFCoringPresetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array preset from symbol table
    {
        result = entry->Read(&structure->presetCount, alignment);
        structure->presetID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->preset = PARAMETER_NEW chromatixBAFCoringType[structure->presetCount];
        }
        if (!result || structure->preset == NULL)
        {
            structure->presetCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->presetCount; i++)
        {
            result = LoadchromatixBAFCoringType(pointerEntry, &structure->preset[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFIIRPresetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFIIRPresetType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFIIRPresetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array preset from symbol table
    {
        result = entry->Read(&structure->presetCount, alignment);
        structure->presetID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->preset = PARAMETER_NEW chromatixBAFIIRType[structure->presetCount];
        }
        if (!result || structure->preset == NULL)
        {
            structure->presetCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->presetCount; i++)
        {
            result = LoadchromatixBAFIIRType(pointerEntry, &structure->preset[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFFIRPresetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFFIRPresetType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFFIRPresetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array preset from symbol table
    {
        result = entry->Read(&structure->presetCount, alignment);
        structure->presetID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->preset = PARAMETER_NEW chromatixBAFFIRType[structure->presetCount];
        }
        if (!result || structure->preset == NULL)
        {
            structure->presetCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->presetCount; i++)
        {
            result = LoadchromatixBAFFIRType(pointerEntry, &structure->preset[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFScalerPresetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFScalerPresetType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFScalerPresetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array preset from symbol table
    {
        result = entry->Read(&structure->presetCount, alignment);
        structure->presetID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->preset = PARAMETER_NEW chromatixBAFScalerSettings[structure->presetCount];
        }
        if (!result || structure->preset == NULL)
        {
            structure->presetCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->presetCount; i++)
        {
            result = LoadchromatixBAFScalerSettings(pointerEntry, &structure->preset[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFGammaSettingType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFGammaSettingType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFGammaSettingType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->ReadArray(structure->table, 32, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFGammaPresetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFGammaPresetType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFGammaPresetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array preset from symbol table
    {
        result = entry->Read(&structure->presetCount, alignment);
        structure->presetID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->preset = PARAMETER_NEW chromatixBAFGammaSettingType[structure->presetCount];
        }
        if (!result || structure->preset == NULL)
        {
            structure->presetCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->presetCount; i++)
        {
            result = LoadchromatixBAFGammaSettingType(pointerEntry, &structure->preset[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFInputPresetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFInputPresetType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFInputPresetType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array preset from symbol table
    {
        result = entry->Read(&structure->presetCount, alignment);
        structure->presetID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->preset = PARAMETER_NEW chromatixBAFChannelSettings[structure->presetCount];
        }
        if (!result || structure->preset == NULL)
        {
            structure->presetCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->presetCount; i++)
        {
            result = LoadchromatixBAFChannelSettings(pointerEntry, &structure->preset[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFFilterIndexType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFFilterIndexType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFFilterIndexType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->FIRIndex, alignment);
    result = result && entry->Read(&structure->IIRIndex, alignment);
    result = result && entry->Read(&structure->coringIndex, alignment);
    result = result && entry->Read(&structure->bitshift, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixPresetIndexType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixPresetIndexType(
    ParameterFileSymbolTableEntry* entry,
    chromatixPresetIndexType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->inputIndex, alignment);
    result = result && entry->Read(&structure->gammaIndex, alignment);
    result = result && entry->Read(&structure->scalerIndex, alignment);
    result = result && LoadchromatixBAFFilterIndexType(entry, &structure->horizontalFilter, alignment);
    result = result && LoadchromatixBAFFilterIndexType(entry, &structure->verticalFilter, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFConfigureType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFConfigureType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFConfigureType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->type = (AFConfigureType)entry->ReadEnum(&result, alignment);
    result = result && LoadchromatixPresetIndexType(entry, &structure->presetIndex, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFConfiguresType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFConfiguresType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFConfiguresType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array configure from symbol table
    {
        result = entry->Read(&structure->configureCount, alignment);
        structure->configureID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->configure = PARAMETER_NEW chromatixBAFConfigureType[structure->configureCount];
        }
        if (!result || structure->configure == NULL)
        {
            structure->configureCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->configureCount; i++)
        {
            result = LoadchromatixBAFConfigureType(pointerEntry, &structure->configure[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatixBAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::LoadchromatixBAFType(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && Loadparameter_versionStruct(entry, &structure->parameter_version, alignment);
    result = result && LoadchromatixBAFConfiguresType(entry, &structure->configures, alignment);
    result = result && LoadchromatixBAFInputPresetType(entry, &structure->BAFInputPresets, alignment);
    result = result && LoadchromatixBAFGammaPresetType(entry, &structure->BAFGammaPresets, alignment);
    result = result && LoadchromatixBAFScalerPresetType(entry, &structure->BAFScalerPresets, alignment);
    result = result && LoadchromatixBAFFIRPresetType(entry, &structure->BAFFIRPresets, alignment);
    result = result && LoadchromatixBAFIIRPresetType(entry, &structure->BAFIIRPresets, alignment);
    result = result && LoadchromatixBAFCoringPresetType(entry, &structure->BAFCoringPresets, alignment);
    result = result && LoadchromatixBAFSetsType(entry, &structure->sets, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatixBAFTypeClass::Loadparameter_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatixBAFType::parameter_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String revision from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->revision = NULL;
        result = result && stringPointerEntry->ReadString(&structure->revision, count, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixBAFROIParamsType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixBAFTypeClass::UnloadchromatixBAFROIParamsType(
    chromatixBAFROIParamsType* structure)
{
    PARAMETER_DELETE[] structure->ROICustom;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixBAFSetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixBAFTypeClass::UnloadchromatixBAFSetType(
    chromatixBAFSetType* structure)
{
    for (UINT32 i = 0; i < 4; i++)
    {
        UnloadchromatixBAFROIParamsType(&structure->ROIConfig[i]);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixBAFSetsType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixBAFTypeClass::UnloadchromatixBAFSetsType(
    chromatixBAFSetsType* structure)
{
    UnloadchromatixBAFSetType(&structure->elements);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixBAFCoringPresetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixBAFTypeClass::UnloadchromatixBAFCoringPresetType(
    chromatixBAFCoringPresetType* structure)
{
    PARAMETER_DELETE[] structure->preset;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixBAFIIRPresetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixBAFTypeClass::UnloadchromatixBAFIIRPresetType(
    chromatixBAFIIRPresetType* structure)
{
    PARAMETER_DELETE[] structure->preset;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixBAFFIRPresetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixBAFTypeClass::UnloadchromatixBAFFIRPresetType(
    chromatixBAFFIRPresetType* structure)
{
    PARAMETER_DELETE[] structure->preset;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixBAFScalerPresetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixBAFTypeClass::UnloadchromatixBAFScalerPresetType(
    chromatixBAFScalerPresetType* structure)
{
    PARAMETER_DELETE[] structure->preset;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixBAFGammaPresetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixBAFTypeClass::UnloadchromatixBAFGammaPresetType(
    chromatixBAFGammaPresetType* structure)
{
    PARAMETER_DELETE[] structure->preset;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixBAFInputPresetType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixBAFTypeClass::UnloadchromatixBAFInputPresetType(
    chromatixBAFInputPresetType* structure)
{
    PARAMETER_DELETE[] structure->preset;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixBAFConfiguresType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixBAFTypeClass::UnloadchromatixBAFConfiguresType(
    chromatixBAFConfiguresType* structure)
{
    PARAMETER_DELETE[] structure->configure;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatixBAFType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixBAFTypeClass::UnloadchromatixBAFType(
    chromatixBAFType* structure)
{
    Unloadparameter_versionStruct(&structure->parameter_version);
    UnloadchromatixBAFConfiguresType(&structure->configures);
    UnloadchromatixBAFInputPresetType(&structure->BAFInputPresets);
    UnloadchromatixBAFGammaPresetType(&structure->BAFGammaPresets);
    UnloadchromatixBAFScalerPresetType(&structure->BAFScalerPresets);
    UnloadchromatixBAFFIRPresetType(&structure->BAFFIRPresets);
    UnloadchromatixBAFIIRPresetType(&structure->BAFIIRPresets);
    UnloadchromatixBAFCoringPresetType(&structure->BAFCoringPresets);
    UnloadchromatixBAFSetsType(&structure->sets);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload parameter_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatixBAFTypeClass::Unloadparameter_versionStruct(
    chromatixBAFType::parameter_versionStruct* structure)
{
    PARAMETER_DELETE[] structure->revision;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatixBAFTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatixBAFTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatixBAFTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadchromatixBAFType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AFBAFELEMENTS_NAMESPACE_END
