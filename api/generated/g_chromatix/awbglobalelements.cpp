////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  awbglobalelements.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "awbglobalelements.h"
#include "parametersetmanager.h"

AWBGLOBALELEMENTS_NAMESPACE_BEGIN


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load moduleIDType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadmoduleIDType(
    ParameterFileSymbolTableEntry* entry,
    moduleIDType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->moduleID, alignment);
    result = result && entry->Read(&structure->subModuleID, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load triggerPointType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadtriggerPointType(
    ParameterFileSymbolTableEntry* entry,
    triggerPointType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->start, alignment);
    result = result && entry->Read(&structure->end, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbRGBDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbRGBDataType(
    ParameterFileSymbolTableEntry* entry,
    awbRGBDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->red, alignment);
    result = result && entry->Read(&structure->green, alignment);
    result = result && entry->Read(&structure->blue, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbPointDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbPointDataType(
    ParameterFileSymbolTableEntry* entry,
    awbPointDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->rg, alignment);
    result = result && entry->Read(&structure->bg, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    awbZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    for (UINT32 i = 0; result && i < 3; i++)
    {
        result = LoadawbPointDataType(entry, &structure->vertex[i], alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbFloatDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbFloatDataType(
    ParameterFileSymbolTableEntry* entry,
    awbFloatDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->data, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbTriggerDataRGBType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbTriggerDataRGBType(
    ParameterFileSymbolTableEntry* entry,
    awbTriggerDataRGBType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);
    result = result && LoadawbRGBDataType(entry, &structure->triggerData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbTriggerDataZoneType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbTriggerDataZoneType(
    ParameterFileSymbolTableEntry* entry,
    awbTriggerDataZoneType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);
    result = result && LoadawbZoneDataType(entry, &structure->triggerData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbTriggerDataPointType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbTriggerDataPointType(
    ParameterFileSymbolTableEntry* entry,
    awbTriggerDataPointType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);
    result = result && LoadawbPointDataType(entry, &structure->triggerData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbTriggerDataFloatType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbTriggerDataFloatType(
    ParameterFileSymbolTableEntry* entry,
    awbTriggerDataFloatType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);
    result = result && LoadawbFloatDataType(entry, &structure->triggerData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbZoneConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbZoneConfigType(
    ParameterFileSymbolTableEntry* entry,
    awbZoneConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading String Description from symbol table
    {
        UINT32 count = 0;
        result = entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->Description = NULL;
        result = result && stringPointerEntry->ReadString(&structure->Description, count, alignment);
    }
    result = result && entry->Read(&structure->groupID, alignment);
    structure->zoneType = (awbZoneType)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->triggerLevel, alignment);
    for (UINT32 i = 0; result && i < 3; i++)
    {
        structure->triggerCtrlType[i] = (awbTriggerCtrlType)entry->ReadEnum(&result, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbZoneDefineType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbZoneDefineType(
    ParameterFileSymbolTableEntry* entry,
    awbZoneDefineType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadawbZoneConfigType(entry, &structure->zoneConfigData, alignment);
    result = result && LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbTriggerDataZoneType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadawbTriggerDataZoneType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbTriggerDataZoneLevel2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbTriggerDataZoneLevel2Type(
    ParameterFileSymbolTableEntry* entry,
    awbTriggerDataZoneLevel2Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbTriggerDataZoneType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadawbTriggerDataZoneType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbTriggerDataZoneLevel1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbTriggerDataZoneLevel1Type(
    ParameterFileSymbolTableEntry* entry,
    awbTriggerDataZoneLevel1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbTriggerDataZoneLevel2Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadawbTriggerDataZoneLevel2Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbZoneMLCType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbZoneMLCType(
    ParameterFileSymbolTableEntry* entry,
    awbZoneMLCType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadawbZoneConfigType(entry, &structure->zoneConfigData, alignment);
    result = result && LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbTriggerDataZoneLevel1Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadawbTriggerDataZoneLevel1Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbSAConfidenceConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbSAConfidenceConfigType(
    ParameterFileSymbolTableEntry* entry,
    awbSAConfidenceConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->attribute, alignment);
    for (UINT32 i = 0; result && i < 2; i++)
    {
        structure->triggerType[i] = (awbTriggerCtrlType)entry->ReadEnum(&result, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbSAConfidenceLevel2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbSAConfidenceLevel2Type(
    ParameterFileSymbolTableEntry* entry,
    awbSAConfidenceLevel2Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbTriggerDataFloatType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadawbTriggerDataFloatType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbSAConfidenceDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbSAConfidenceDataType(
    ParameterFileSymbolTableEntry* entry,
    awbSAConfidenceDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadawbSAConfidenceConfigType(entry, &structure->commonData, alignment);
    result = result && LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbSAConfidenceLevel2Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadawbSAConfidenceLevel2Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbSATargetConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbSATargetConfigType(
    ParameterFileSymbolTableEntry* entry,
    awbSATargetConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->attribute = (awbSATargetCtrlType)entry->ReadEnum(&result, alignment);
    for (UINT32 i = 0; result && i < 2; i++)
    {
        structure->triggerType[i] = (awbTriggerCtrlType)entry->ReadEnum(&result, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbSATargetLevel2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbSATargetLevel2Type(
    ParameterFileSymbolTableEntry* entry,
    awbSATargetLevel2Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbTriggerDataPointType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadawbTriggerDataPointType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbSATargetDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbSATargetDataType(
    ParameterFileSymbolTableEntry* entry,
    awbSATargetDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadawbSATargetConfigType(entry, &structure->commonData, alignment);
    result = result && LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbSATargetLevel2Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadawbSATargetLevel2Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load CbCrPointDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadCbCrPointDataType(
    ParameterFileSymbolTableEntry* entry,
    CbCrPointDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->Cb, alignment);
    result = result && entry->Read(&structure->Cr, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load CbCrTriggerDataPointType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadCbCrTriggerDataPointType(
    ParameterFileSymbolTableEntry* entry,
    CbCrTriggerDataPointType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);
    result = result && LoadCbCrPointDataType(entry, &structure->triggerData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbCbCrLevel2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbCbCrLevel2Type(
    ParameterFileSymbolTableEntry* entry,
    awbCbCrLevel2Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW CbCrTriggerDataPointType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadCbCrTriggerDataPointType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load CbCrDiffPointDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadCbCrDiffPointDataType(
    ParameterFileSymbolTableEntry* entry,
    CbCrDiffPointDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->CbCrDiffMin, alignment);
    result = result && entry->Read(&structure->CbCrDiffMax, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load CbCrDiffTriggerDataPointType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadCbCrDiffTriggerDataPointType(
    ParameterFileSymbolTableEntry* entry,
    CbCrDiffTriggerDataPointType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);
    result = result && LoadCbCrDiffPointDataType(entry, &structure->triggerData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbCbCrDiffLevel2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbCbCrDiffLevel2Type(
    ParameterFileSymbolTableEntry* entry,
    awbCbCrDiffLevel2Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW CbCrDiffTriggerDataPointType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadCbCrDiffTriggerDataPointType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load OutlierDistPointDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadOutlierDistPointDataType(
    ParameterFileSymbolTableEntry* entry,
    OutlierDistPointDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->Start, alignment);
    result = result && entry->Read(&structure->End, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load OutlierDistTriggerDataPointType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadOutlierDistTriggerDataPointType(
    ParameterFileSymbolTableEntry* entry,
    OutlierDistTriggerDataPointType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);
    result = result && LoadOutlierDistPointDataType(entry, &structure->triggerData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbOutlierDist2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbOutlierDist2Type(
    ParameterFileSymbolTableEntry* entry,
    awbOutlierDist2Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW OutlierDistTriggerDataPointType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadOutlierDistTriggerDataPointType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbWeightedZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbWeightedZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    awbWeightedZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadawbFloatDataType(entry, &structure->Weight, alignment);
    for (UINT32 i = 0; result && i < 3; i++)
    {
        result = result && LoadawbPointDataType(entry, &structure->Vertex[i], alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbTriggerWeightedZoneDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbTriggerWeightedZoneDataType(
    ParameterFileSymbolTableEntry* entry,
    awbTriggerWeightedZoneDataType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);
    result = result && LoadawbWeightedZoneDataType(entry, &structure->triggerData, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbTriggerWeightedZoneLevel2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbTriggerWeightedZoneLevel2Type(
    ParameterFileSymbolTableEntry* entry,
    awbTriggerWeightedZoneLevel2Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbTriggerWeightedZoneDataType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadawbTriggerWeightedZoneDataType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbTriggerWeightedZoneLevel1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbTriggerWeightedZoneLevel1Type(
    ParameterFileSymbolTableEntry* entry,
    awbTriggerWeightedZoneLevel1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbTriggerWeightedZoneLevel2Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadawbTriggerWeightedZoneLevel2Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbWeightedZoneDefineType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbWeightedZoneDefineType(
    ParameterFileSymbolTableEntry* entry,
    awbWeightedZoneDefineType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadawbZoneConfigType(entry, &structure->zoneConfigData, alignment);
    result = result && LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbTriggerWeightedZoneLevel1Type[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadawbTriggerWeightedZoneLevel1Type(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbWeightLUTLevel1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbWeightLUTLevel1Type(
    ParameterFileSymbolTableEntry* entry,
    awbWeightLUTLevel1Type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadtriggerPointType(entry, &structure->triggerPt, alignment);

    // Reading Array triggerData from symbol table
    {
        result = result && entry->Read(&structure->triggerDataCount, alignment);
        structure->triggerDataID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerData = PARAMETER_NEW awbTriggerDataFloatType[structure->triggerDataCount];
        }
        if (!result || structure->triggerData == NULL)
        {
            structure->triggerDataCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerDataCount; i++)
        {
            result = LoadawbTriggerDataFloatType(pointerEntry, &structure->triggerData[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ROIPostionType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadROIPostionType(
    ParameterFileSymbolTableEntry* entry,
    ROIPostionType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->startX, alignment);
    result = result && entry->Read(&structure->endX, alignment);
    result = result && entry->Read(&structure->startY, alignment);
    result = result && entry->Read(&structure->endY, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load awbGWVTriggerConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL awbglobalelementsClass::LoadawbGWVTriggerConfigType(
    ParameterFileSymbolTableEntry* entry,
    awbGWVTriggerConfigType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->attribute, alignment);
    for (UINT32 i = 0; result && i < 3; i++)
    {
        structure->triggerType[i] = (awbGWVTriggerCtrlType)entry->ReadEnum(&result, alignment);
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbZoneConfigType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbZoneConfigType(
    awbZoneConfigType* structure)
{
    PARAMETER_DELETE[] structure->Description;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbZoneDefineType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbZoneDefineType(
    awbZoneDefineType* structure)
{
    UnloadawbZoneConfigType(&structure->zoneConfigData);
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbTriggerDataZoneLevel2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbTriggerDataZoneLevel2Type(
    awbTriggerDataZoneLevel2Type* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbTriggerDataZoneLevel1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbTriggerDataZoneLevel1Type(
    awbTriggerDataZoneLevel1Type* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadawbTriggerDataZoneLevel2Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbZoneMLCType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbZoneMLCType(
    awbZoneMLCType* structure)
{
    UnloadawbZoneConfigType(&structure->zoneConfigData);
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadawbTriggerDataZoneLevel1Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbSAConfidenceLevel2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbSAConfidenceLevel2Type(
    awbSAConfidenceLevel2Type* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbSAConfidenceDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbSAConfidenceDataType(
    awbSAConfidenceDataType* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadawbSAConfidenceLevel2Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbSATargetLevel2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbSATargetLevel2Type(
    awbSATargetLevel2Type* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbSATargetDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbSATargetDataType(
    awbSATargetDataType* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadawbSATargetLevel2Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbCbCrLevel2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbCbCrLevel2Type(
    awbCbCrLevel2Type* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbCbCrDiffLevel2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbCbCrDiffLevel2Type(
    awbCbCrDiffLevel2Type* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbOutlierDist2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbOutlierDist2Type(
    awbOutlierDist2Type* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbTriggerWeightedZoneLevel2Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbTriggerWeightedZoneLevel2Type(
    awbTriggerWeightedZoneLevel2Type* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbTriggerWeightedZoneLevel1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbTriggerWeightedZoneLevel1Type(
    awbTriggerWeightedZoneLevel1Type* structure)
{
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadawbTriggerWeightedZoneLevel2Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbWeightedZoneDefineType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbWeightedZoneDefineType(
    awbWeightedZoneDefineType* structure)
{
    UnloadawbZoneConfigType(&structure->zoneConfigData);
    for (UINT32 i = 0; i < structure->triggerDataCount; i++)
    {
        UnloadawbTriggerWeightedZoneLevel1Type(&structure->triggerData[i]);
    }
    PARAMETER_DELETE[] structure->triggerData;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload awbWeightLUTLevel1Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void awbglobalelementsClass::UnloadawbWeightLUTLevel1Type(
    awbWeightLUTLevel1Type* structure)
{
    PARAMETER_DELETE[] structure->triggerData;
}

AWBGLOBALELEMENTS_NAMESPACE_END
