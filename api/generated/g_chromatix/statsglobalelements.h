////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  statsglobalelements.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STATSGLOBALELEMENTS_H
#define STATSGLOBALELEMENTS_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "globalelements.h"

#define STATSGLOBALELEMENTS_NAMESPACE_BEGIN namespace statsglobalelements {
#define STATSGLOBALELEMENTS_NAMESPACE_END }

STATSGLOBALELEMENTS_NAMESPACE_BEGIN
typedef INT32 glbEnableFlagType;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// glbTriggerPointType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct glbTriggerPointType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// start
    ///
    /// Type:          float
    /// Range:         [-100.0,15000.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT start;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// end
    ///
    /// Type:          float
    /// Range:         [-100.0,15000.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT end;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// glbFloatDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct glbFloatDataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// data
    ///
    /// Type:          float
    /// Range:         [0.0,9999.9]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// glbTriggerDataFloatType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct glbTriggerDataFloatType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// triggerPt
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    glbTriggerPointType triggerPt;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// triggerData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    glbFloatDataType    triggerData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FaceROIDiffThresholdDataType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FaceROIDiffThresholdDataType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// locationThreshold
    ///
    /// Description:   the center of face roi change threshold
    /// Type:          float
    /// Range:         [0.0,100.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT locationThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sizeThreshold
    ///
    /// Description:   the size of face roi change threshold
    /// Type:          float
    /// Range:         [0.0,100.0]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT sizeThreshold;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// countThreshold
    ///
    /// Description:   If the face roi stable keep n frame, and n bigger than this threshold, and this face roi will be set to
    ///                be stable
    /// Type:          int
    /// Range:         [0,100]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32 countThreshold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// FaceROIDiffThresholdType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct FaceROIDiffThresholdType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// triggerPt
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    glbTriggerPointType          triggerPt;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// triggerData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FaceROIDiffThresholdDataType triggerData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// statsExtensionParamType
///
/// Tuning Level:  rarely_tune
/// Description:   extension feature
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct statsExtensionParamType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ID
    ///
    /// Tuning Level:  never_tune
    /// Description:   extension feature ID, defined in the algorithm code so please do not change
    /// Default Value: 0
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    INT32  ID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Name - String
    ///
    /// Tuning Level:  never_tune
    /// Description:   extension feature name
    /// Default Value: Extension feature
    /// Length:        1
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    CHAR*  Name;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableFlag
    ///
    /// Description:   enable flag
    /// Default Value: false
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL   enableFlag;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// data - Array
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   tuning parameter
    /// Default Value: 0.0
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 dataCount;
    UINT32 dataID;
    FLOAT* data;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// statsglobalelementsClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class statsglobalelementsClass
{
public:

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load glbTriggerPointType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadglbTriggerPointType(
        ParameterFileSymbolTableEntry* entry,
        glbTriggerPointType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load glbFloatDataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadglbFloatDataType(
        ParameterFileSymbolTableEntry* entry,
        glbFloatDataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load glbTriggerDataFloatType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadglbTriggerDataFloatType(
        ParameterFileSymbolTableEntry* entry,
        glbTriggerDataFloatType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FaceROIDiffThresholdDataType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFaceROIDiffThresholdDataType(
        ParameterFileSymbolTableEntry* entry,
        FaceROIDiffThresholdDataType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load FaceROIDiffThresholdType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadFaceROIDiffThresholdType(
        ParameterFileSymbolTableEntry* entry,
        FaceROIDiffThresholdType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load statsExtensionParamType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadstatsExtensionParamType(
        ParameterFileSymbolTableEntry* entry,
        statsExtensionParamType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload statsExtensionParamType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadstatsExtensionParamType(
        statsExtensionParamType* structure);

}; // End class statsglobalelementsClass

STATSGLOBALELEMENTS_NAMESPACE_END
#endif // STATSGLOBALELEMENTS_H

