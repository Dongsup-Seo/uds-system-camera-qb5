////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  aectracker.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef AECTRACKER_H
#define AECTRACKER_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "globalelements.h"
#include "statsroipriority.h"
#include "statsroidifference.h"
#include "aecglobalelements.h"

#define AECTRACKER_NAMESPACE_BEGIN namespace aecTracker {
#define AECTRACKER_NAMESPACE_END }

AECTRACKER_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// TrackerConvergenceType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct TrackerConvergenceType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// convSpeedAdjRatio
    ///
    /// Tuning Level:  often_tune
    /// Description:   Specify the adjustment of convergence speed during Tracker AEC convergence
    /// Type:          float
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT convSpeedAdjRatio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// speedAdjDelayTimeEnter
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specify the delay in time to start adjusting Convergence speed
    /// Type:          float
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT speedAdjDelayTimeEnter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// speedAdjDelayTimeExit
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specify the delay in time to start adjusting Convergence speed
    /// Type:          float
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT speedAdjDelayTimeExit;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// TrackerMeteringType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct TrackerMeteringType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableTrackerROI
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable Flag for Tracker ROI AEC Adjustments
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                             enableTrackerROI;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// weightTemporalFilter
    ///
    /// Tuning Level:  never_tune
    /// Description:   Temporal weight for Tracker Luma and Metered luma transition. Higher weight will have faster transition
    ///                to Tracker Luma
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                            weightTemporalFilter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// centerWeightStrength
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specify weighting of luma in the center of Tracker ROI
    /// Type:          float
    /// Range:         [0,1]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                            centerWeightStrength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableLuxTrackerTarget
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Enable Flag for for adjusting luma target based on lux index
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                             enableLuxTrackerTarget;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// luxTrackerLumaTarget
    ///
    /// Description:   Luma target tuning structure, which is shared between normal and flash use case.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::LuxLumaTargetType                luxTrackerLumaTarget;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// statsUpdateDelayTimeEnter
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specify the delay in time to declare official Tracker ROI, for detection Stability
    /// Type:          float
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                            statsUpdateDelayTimeEnter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// statsUpdateDelayTimeExit
    ///
    /// Tuning Level:  rarely_tune
    /// Description:   Specify the delay in time to declare official Tracker ROI, for detection Stability
    /// Type:          float
    /// Range:         [0,10]
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FLOAT                            statsUpdateDelayTimeExit;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// trackerWeight
    ///
    /// Tuning Level:  never_tune
    /// Description:   Min and Max tracker luma weight wrt tracker size.
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType                     trackerWeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// trackerLumaWeightLuxIndexTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct trackerLumaWeightLuxIndexTriggerStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enableTrackerLumaTrigger
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   Enable Flag for for adjusting luma weight based on lux index
        /// Type:          bool
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BOOL                 enableTrackerLumaTrigger;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// LuxTrackerLumaWeight
        ///
        /// Description:   Tracker weight tuning structure, which is shared between normal and flash use case.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        aecglobalelements::LuxTrackerWeightType LuxTrackerLumaWeight;
    } trackerLumaWeightLuxIndexTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// trackerSize
    ///
    /// Tuning Level:  never_tune
    /// Description:   min and max tracker size to determine tracker weight
    /// Comments:       Base Type Tuning Definition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    aecglobalelements::StartEndType                     trackerSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// trackerSizeWeightLuxIndexTrigger
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct trackerSizeWeightLuxIndexTriggerStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enableTrackerSizeTrigger
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   Enable Flag for for adjusting Tracker size weight based on lux index
        /// Type:          bool
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BOOL                 enableTrackerSizeTrigger;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// LuxTrackerSizeWeight
        ///
        /// Description:   Tracker weight tuning structure, which is shared between normal and flash use case.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        aecglobalelements::LuxTrackerWeightType LuxTrackerSizeWeight;
    } trackerSizeWeightLuxIndexTrigger;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableTrackerROIHistAdj
    ///
    /// Tuning Level:  often_tune
    /// Description:   Enable Flag for adjustment on Histogram AEC target calculation
    /// Type:          bool
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL                             enableTrackerROIHistAdj;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ROIHistAdjZone - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                           ROIHistAdjZoneCount;
    UINT32                           ROIHistAdjZoneID;
    aecglobalelements::ROIHistAdjZoneType*              ROIHistAdjZone;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECTrackerType
/// Comments:       Tracker Tuning Definition
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AECTrackerType
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// trackerMtr
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TrackerMeteringType    trackerMtr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// trackerConv
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TrackerConvergenceType trackerConv;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// statsROIProcess
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct statsROIProcessStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        statsglobalelements::glbEnableFlagType               statsROIProcessEnable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// statsROIPriority
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        statsroipriority::chromatixStatsROIPriorityType   statsROIPriority;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// statsROIStable
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        statsroidifference::chromatixStatsROIDifferenceType statsROIStable;
    } statsROIProcess;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AECTrackerTypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class AECTrackerTypeClass : public ParameterModule, public AECTrackerType
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 8;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECTrackerTypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AECTrackerTypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~AECTrackerTypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load TrackerConvergenceType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadTrackerConvergenceType(
        ParameterFileSymbolTableEntry* entry,
        TrackerConvergenceType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load TrackerMeteringType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadTrackerMeteringType(
        ParameterFileSymbolTableEntry* entry,
        TrackerMeteringType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load TrackerMeteringType_trackerLumaWeightLuxIndexTriggerStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadTrackerMeteringType_trackerLumaWeightLuxIndexTriggerStruct(
        ParameterFileSymbolTableEntry* entry,
        TrackerMeteringType::trackerLumaWeightLuxIndexTriggerStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load TrackerMeteringType_trackerSizeWeightLuxIndexTriggerStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadTrackerMeteringType_trackerSizeWeightLuxIndexTriggerStruct(
        ParameterFileSymbolTableEntry* entry,
        TrackerMeteringType::trackerSizeWeightLuxIndexTriggerStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AECTrackerType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAECTrackerType(
        ParameterFileSymbolTableEntry* entry,
        AECTrackerType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECTrackerType::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        AECTrackerType::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load statsROIProcessStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadstatsROIProcessStruct(
        ParameterFileSymbolTableEntry* entry,
        AECTrackerType::statsROIProcessStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload TrackerMeteringType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadTrackerMeteringType(
        TrackerMeteringType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload TrackerMeteringType_trackerLumaWeightLuxIndexTriggerStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadTrackerMeteringType_trackerLumaWeightLuxIndexTriggerStruct(
        TrackerMeteringType::trackerLumaWeightLuxIndexTriggerStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload TrackerMeteringType_trackerSizeWeightLuxIndexTriggerStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadTrackerMeteringType_trackerSizeWeightLuxIndexTriggerStruct(
        TrackerMeteringType::trackerSizeWeightLuxIndexTriggerStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AECTrackerType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAECTrackerType(
        AECTrackerType* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        AECTrackerType::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload statsROIProcessStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadstatsROIProcessStruct(
        AECTrackerType::statsROIProcessStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class AECTrackerTypeClass

AECTRACKER_NAMESPACE_END
#endif // AECTRACKER_H

