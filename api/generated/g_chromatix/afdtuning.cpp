////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  afdtuning.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "afdtuning.h"
#include "parametersetmanager.h"

AFDTUNING_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatix_auto_flicker_detection_data_typeClass::chromatix_auto_flicker_detection_data_typeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(frame_ct_threshold);
    PARAMETER_INITIALIZE(frame_smooth_detection_thr);
    PARAMETER_INITIALIZE(frame_smooth_ct_threshold);
    PARAMETER_INITIALIZE(num_frames);
    PARAMETER_INITIALIZE(frame_skip);
    PARAMETER_INITIALIZE(num_rows);
    PARAMETER_INITIALIZE(num_cols);
    PARAMETER_INITIALIZE(switch_on_first_detection);
    PARAMETER_INITIALIZE(max_attempts_for_second_detection);
    PARAMETER_INITIALIZE(AFD_continuous_enable);
    PARAMETER_INITIALIZE(num_frames_settle);
    PARAMETER_INITIALIZE(start_antbanding_table);
    PARAMETER_INITIALIZE(max_exp_time_ms);
    PARAMETER_INITIALIZE(AFD_always_on_enable);
    PARAMETER_INITIALIZE(AFD_static_band_enable);
    PARAMETER_INITIALIZE(af_status_check);
    PARAMETER_INITIALIZE(frame_similarity_check_enable);
    PARAMETER_INITIALIZE(similarity_ratio_thresh);
    PARAMETER_INITIALIZE(similar_frame_count_thresh);
    PARAMETER_INITIALIZE(afd_bright_light_trigger);
    PARAMETER_INITIALIZE(afd_low_light_trigger);
    PARAMETER_INITIALIZE(afd_rolling_bright);
    PARAMETER_INITIALIZE(afd_rolling_normal);
    PARAMETER_INITIALIZE(afd_rolling_lowlight);
    PARAMETER_INITIALIZE(afd_static_bright);
    PARAMETER_INITIALIZE(afd_static_normal);
    PARAMETER_INITIALIZE(afd_static_lowlight);
    PARAMETER_INITIALIZE(afd_scd_bright);
    PARAMETER_INITIALIZE(afd_scd_normal);
    PARAMETER_INITIALIZE(afd_scd_lowlight);
    PARAMETER_INITIALIZE(afd_param_extension);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatix_auto_flicker_detection_data_typeClass::chromatix_auto_flicker_detection_data_typeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(frame_ct_threshold);
    PARAMETER_INITIALIZE(frame_smooth_detection_thr);
    PARAMETER_INITIALIZE(frame_smooth_ct_threshold);
    PARAMETER_INITIALIZE(num_frames);
    PARAMETER_INITIALIZE(frame_skip);
    PARAMETER_INITIALIZE(num_rows);
    PARAMETER_INITIALIZE(num_cols);
    PARAMETER_INITIALIZE(switch_on_first_detection);
    PARAMETER_INITIALIZE(max_attempts_for_second_detection);
    PARAMETER_INITIALIZE(AFD_continuous_enable);
    PARAMETER_INITIALIZE(num_frames_settle);
    PARAMETER_INITIALIZE(start_antbanding_table);
    PARAMETER_INITIALIZE(max_exp_time_ms);
    PARAMETER_INITIALIZE(AFD_always_on_enable);
    PARAMETER_INITIALIZE(AFD_static_band_enable);
    PARAMETER_INITIALIZE(af_status_check);
    PARAMETER_INITIALIZE(frame_similarity_check_enable);
    PARAMETER_INITIALIZE(similarity_ratio_thresh);
    PARAMETER_INITIALIZE(similar_frame_count_thresh);
    PARAMETER_INITIALIZE(afd_bright_light_trigger);
    PARAMETER_INITIALIZE(afd_low_light_trigger);
    PARAMETER_INITIALIZE(afd_rolling_bright);
    PARAMETER_INITIALIZE(afd_rolling_normal);
    PARAMETER_INITIALIZE(afd_rolling_lowlight);
    PARAMETER_INITIALIZE(afd_static_bright);
    PARAMETER_INITIALIZE(afd_static_normal);
    PARAMETER_INITIALIZE(afd_static_lowlight);
    PARAMETER_INITIALIZE(afd_scd_bright);
    PARAMETER_INITIALIZE(afd_scd_normal);
    PARAMETER_INITIALIZE(afd_scd_lowlight);
    PARAMETER_INITIALIZE(afd_param_extension);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chromatix_auto_flicker_detection_data_typeClass::~chromatix_auto_flicker_detection_data_typeClass()
{
    Unloadchromatix_auto_flicker_detection_data_type(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* chromatix_auto_flicker_detection_data_typeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "ChromatixAFDTuningData")) == 0)
    {
        name = "ChromatixAFDTuningData";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load afd_param_extension_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_auto_flicker_detection_data_typeClass::Loadafd_param_extension_type(
    ParameterFileSymbolTableEntry* entry,
    afd_param_extension_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array extension_param from symbol table
    {
        result = entry->Read(&structure->extension_paramCount, alignment);
        structure->extension_paramID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->extension_param = PARAMETER_NEW statsglobalelements::statsExtensionParamType[structure->extension_paramCount];
        }
        if (!result || structure->extension_param == NULL)
        {
            structure->extension_paramCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->extension_paramCount; i++)
        {
            result = statsglobalelements::statsglobalelementsClass::LoadstatsExtensionParamType(pointerEntry, &structure->extension_param[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load trigger_point_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_auto_flicker_detection_data_typeClass::Loadtrigger_point_type(
    ParameterFileSymbolTableEntry* entry,
    trigger_point_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->lux_index_start, alignment);
    result = result && entry->Read(&structure->lux_index_end, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load num_bands_dependent_downsampling_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_auto_flicker_detection_data_typeClass::Loadnum_bands_dependent_downsampling_type(
    ParameterFileSymbolTableEntry* entry,
    num_bands_dependent_downsampling_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->num_bands_start, alignment);
    result = result && entry->Read(&structure->num_bands_end, alignment);
    result = result && entry->Read(&structure->downsampling_factor, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load af_status_check_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_auto_flicker_detection_data_typeClass::Loadaf_status_check_type(
    ParameterFileSymbolTableEntry* entry,
    af_status_check_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->af_status_select = (af_status_select_type)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->stable_lens_pos_threshold, alignment);
    result = result && entry->Read(&structure->stable_lens_pos_frame_count, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_afd_rolling_data_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_auto_flicker_detection_data_typeClass::Loadchromatix_afd_rolling_data_type(
    ParameterFileSymbolTableEntry* entry,
    chromatix_afd_rolling_data_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->std_threshold, alignment);
    result = result && entry->Read(&structure->percent_threshold, alignment);
    result = result && entry->Read(&structure->diff_threshold, alignment);
    result = result && entry->Read(&structure->num_peaks_threshold, alignment);
    result = result && entry->Read(&structure->num_flicker_threshold, alignment);
    result = result && entry->Read(&structure->band_dist_comp, alignment);
    result = result && entry->Read(&structure->band_range_min, alignment);
    result = result && entry->Read(&structure->band_range_max, alignment);
    result = result && entry->Read(&structure->col_skip_enable, alignment);
    result = result && entry->ReadArray(structure->col_skip_pattern, 16, alignment);
    result = result && entry->Read(&structure->downsampling_enable, alignment);

    // Reading Array num_bands_dependent_downsampling from symbol table
    {
        result = result && entry->Read(&structure->num_bands_dependent_downsamplingCount, alignment);
        structure->num_bands_dependent_downsamplingID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->num_bands_dependent_downsampling = PARAMETER_NEW num_bands_dependent_downsampling_type[structure->num_bands_dependent_downsamplingCount];
        }
        if (!result || structure->num_bands_dependent_downsampling == NULL)
        {
            structure->num_bands_dependent_downsamplingCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->num_bands_dependent_downsamplingCount; i++)
        {
            result = Loadnum_bands_dependent_downsampling_type(pointerEntry, &structure->num_bands_dependent_downsampling[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_afd_scd_data_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_auto_flicker_detection_data_typeClass::Loadchromatix_afd_scd_data_type(
    ParameterFileSymbolTableEntry* entry,
    chromatix_afd_scd_data_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->sad_thr, alignment);
    result = result && entry->Read(&structure->sadr_thr, alignment);
    result = result && entry->Read(&structure->sad_max_frame, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_afd_static_data_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_auto_flicker_detection_data_typeClass::Loadchromatix_afd_static_data_type(
    ParameterFileSymbolTableEntry* entry,
    chromatix_afd_static_data_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->thldLevel2Ratio, alignment);
    result = result && entry->Read(&structure->thldLevel3Ratio, alignment);
    result = result && entry->Read(&structure->thldLevel2Col, alignment);
    result = result && entry->Read(&structure->thldLevel3Col, alignment);
    result = result && entry->Read(&structure->thldEkL, alignment);
    result = result && entry->Read(&structure->thldEkU, alignment);
    result = result && entry->Read(&structure->thldCounterL3, alignment);
    result = result && entry->Read(&structure->thldCounterL2, alignment);
    result = result && entry->Read(&structure->LevelDepth, alignment);
    result = result && entry->Read(&structure->static_step_size, alignment);
    result = result && entry->Read(&structure->static_down_size, alignment);
    result = result && entry->Read(&structure->col_skip_enable, alignment);
    result = result && entry->ReadArray(structure->col_skip_pattern, 16, alignment);
    result = result && entry->Read(&structure->static_k_step, alignment);
    result = result && entry->Read(&structure->static_slope_steep_thr, alignment);
    result = result && entry->Read(&structure->static_slope_not_steep_thr, alignment);
    result = result && entry->Read(&structure->static_confidence_level_slope_ratio, alignment);
    result = result && entry->Read(&structure->static_confidence_thr_h, alignment);
    result = result && entry->Read(&structure->static_confidence_thr_l, alignment);
    result = result && entry->Read(&structure->static_confidence_ratio_h, alignment);
    result = result && entry->Read(&structure->static_confidence_ratio_l, alignment);
    result = result && entry->Read(&structure->static_low_rowsum_thr, alignment);
    result = result && entry->Read(&structure->static_low_rowsum_comp, alignment);
    result = result && entry->Read(&structure->downsampling_enable, alignment);

    // Reading Array num_bands_dependent_downsampling from symbol table
    {
        result = result && entry->Read(&structure->num_bands_dependent_downsamplingCount, alignment);
        structure->num_bands_dependent_downsamplingID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->num_bands_dependent_downsampling = PARAMETER_NEW num_bands_dependent_downsampling_type[structure->num_bands_dependent_downsamplingCount];
        }
        if (!result || structure->num_bands_dependent_downsampling == NULL)
        {
            structure->num_bands_dependent_downsamplingCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->num_bands_dependent_downsamplingCount; i++)
        {
            result = Loadnum_bands_dependent_downsampling_type(pointerEntry, &structure->num_bands_dependent_downsampling[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load chromatix_auto_flicker_detection_data_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_auto_flicker_detection_data_typeClass::Loadchromatix_auto_flicker_detection_data_type(
    ParameterFileSymbolTableEntry* entry,
    chromatix_auto_flicker_detection_data_type* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && entry->Read(&structure->frame_ct_threshold, alignment);
    result = result && entry->Read(&structure->frame_smooth_detection_thr, alignment);
    result = result && entry->Read(&structure->frame_smooth_ct_threshold, alignment);
    result = result && entry->Read(&structure->num_frames, alignment);
    result = result && entry->Read(&structure->frame_skip, alignment);
    result = result && entry->Read(&structure->num_rows, alignment);
    result = result && entry->Read(&structure->num_cols, alignment);
    result = result && entry->Read(&structure->switch_on_first_detection, alignment);
    result = result && entry->Read(&structure->max_attempts_for_second_detection, alignment);
    result = result && entry->Read(&structure->AFD_continuous_enable, alignment);
    result = result && entry->Read(&structure->num_frames_settle, alignment);
    result = result && entry->Read(&structure->start_antbanding_table, alignment);
    result = result && entry->Read(&structure->max_exp_time_ms, alignment);
    result = result && entry->Read(&structure->AFD_always_on_enable, alignment);
    result = result && entry->Read(&structure->AFD_static_band_enable, alignment);
    result = result && Loadaf_status_check_type(entry, &structure->af_status_check, alignment);
    result = result && entry->Read(&structure->frame_similarity_check_enable, alignment);
    result = result && entry->Read(&structure->similarity_ratio_thresh, alignment);
    result = result && entry->Read(&structure->similar_frame_count_thresh, alignment);
    result = result && Loadtrigger_point_type(entry, &structure->afd_bright_light_trigger, alignment);
    result = result && Loadtrigger_point_type(entry, &structure->afd_low_light_trigger, alignment);
    result = result && Loadchromatix_afd_rolling_data_type(entry, &structure->afd_rolling_bright, alignment);
    result = result && Loadchromatix_afd_rolling_data_type(entry, &structure->afd_rolling_normal, alignment);
    result = result && Loadchromatix_afd_rolling_data_type(entry, &structure->afd_rolling_lowlight, alignment);
    result = result && Loadchromatix_afd_static_data_type(entry, &structure->afd_static_bright, alignment);
    result = result && Loadchromatix_afd_static_data_type(entry, &structure->afd_static_normal, alignment);
    result = result && Loadchromatix_afd_static_data_type(entry, &structure->afd_static_lowlight, alignment);
    result = result && Loadchromatix_afd_scd_data_type(entry, &structure->afd_scd_bright, alignment);
    result = result && Loadchromatix_afd_scd_data_type(entry, &structure->afd_scd_normal, alignment);
    result = result && Loadchromatix_afd_scd_data_type(entry, &structure->afd_scd_lowlight, alignment);
    result = result && Loadafd_param_extension_type(entry, &structure->afd_param_extension, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL chromatix_auto_flicker_detection_data_typeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    chromatix_auto_flicker_detection_data_type::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload afd_param_extension_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_auto_flicker_detection_data_typeClass::Unloadafd_param_extension_type(
    afd_param_extension_type* structure)
{
    for (UINT32 i = 0; i < structure->extension_paramCount; i++)
    {
        statsglobalelements::statsglobalelementsClass::UnloadstatsExtensionParamType(&structure->extension_param[i]);
    }
    PARAMETER_DELETE[] structure->extension_param;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatix_afd_rolling_data_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_auto_flicker_detection_data_typeClass::Unloadchromatix_afd_rolling_data_type(
    chromatix_afd_rolling_data_type* structure)
{
    PARAMETER_DELETE[] structure->num_bands_dependent_downsampling;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatix_afd_static_data_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_auto_flicker_detection_data_typeClass::Unloadchromatix_afd_static_data_type(
    chromatix_afd_static_data_type* structure)
{
    PARAMETER_DELETE[] structure->num_bands_dependent_downsampling;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload chromatix_auto_flicker_detection_data_type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chromatix_auto_flicker_detection_data_typeClass::Unloadchromatix_auto_flicker_detection_data_type(
    chromatix_auto_flicker_detection_data_type* structure)
{
    Unloadchromatix_afd_rolling_data_type(&structure->afd_rolling_bright);
    Unloadchromatix_afd_rolling_data_type(&structure->afd_rolling_normal);
    Unloadchromatix_afd_rolling_data_type(&structure->afd_rolling_lowlight);
    Unloadchromatix_afd_static_data_type(&structure->afd_static_bright);
    Unloadchromatix_afd_static_data_type(&structure->afd_static_normal);
    Unloadchromatix_afd_static_data_type(&structure->afd_static_lowlight);
    Unloadafd_param_extension_type(&structure->afd_param_extension);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* chromatix_auto_flicker_detection_data_typeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    chromatix_auto_flicker_detection_data_typeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW chromatix_auto_flicker_detection_data_typeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && Loadchromatix_auto_flicker_detection_data_type(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


AFDTUNING_NAMESPACE_END
