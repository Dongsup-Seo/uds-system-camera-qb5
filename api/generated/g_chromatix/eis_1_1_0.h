////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  eis_1_1_0.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef EIS_1_1_0_H
#define EIS_1_1_0_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "ispglobalelements.h"

#define EIS_1_1_0_NAMESPACE_BEGIN namespace eis_1_1_0 {
#define EIS_1_1_0_NAMESPACE_END }

EIS_1_1_0_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_eis11_reserveType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_eis11_reserveType
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// general
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct generalStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// minimal_total_margin_x
        ///
        /// Tuning Level:  often_tune
        /// Description:   Minimal total margins ratio for x axis (physical + virtual), regards input image size and represent sum
        ///                of both sides. If physical margins are not sufficient, virtual margins will be used to get to the
        ///                minimal_total_margin.
        /// Type:          float
        /// Default Value: 0.2
        /// Range:         [0.1, 0.6]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               minimal_total_margin_x;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// minimal_total_margin_y
        ///
        /// Tuning Level:  often_tune
        /// Description:   Minimal total margins ratio for y axis (physical + virtual), regards input image size and represent sum
        ///                of both sides. If physical margins are not sufficient, virtual margins will be used to get to the
        ///                minimal_total_margin.
        /// Type:          float
        /// Default Value: 0.2
        /// Range:         [0.1, 0.6]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               minimal_total_margin_y;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// focal_length
        ///
        /// Tuning Level:  must_tune
        /// Description:   Focal length in pixel units for horizontal size of 1920. This value is scaled for other resolutions.
        /// Type:          uint
        /// Default Value: 1600
        /// Range:         [0, 65535]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              focal_length;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// gyro_frequency
        ///
        /// Tuning Level:  must_tune
        /// Description:   Gyro sampling frequency in Hz. Has to match actual gyro sampling frequency.
        /// Type:          uint
        /// Default Value: 500
        /// Range:         [200, 2000]
        /// Bit Depth:     16u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32              gyro_frequency;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// gyro_noise_floor
        ///
        /// Tuning Level:  rarely_tune
        /// Description:   Gyro noise floor.
        /// Type:          float
        /// Default Value: 0.003
        /// Range:         [0, 0.1]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               gyro_noise_floor;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_1
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 1.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_1;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_2
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 2.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_2;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_3
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 3.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_3;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_4
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 4.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_4;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_5
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 5.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_5;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_6
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 6.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_6;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_7
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 7.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_7;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_8
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 8.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_8;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_9
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 9.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_9;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_param_10
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved parameter 10.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT               res_param_10;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_lut_param_1_tab
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved Lut parameter 1.
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Length:        32
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct res_lut_param_1_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// res_lut_param_1 - Array
            ///
            /// Tuning Level:  never_tune
            /// Default Value: 0.0
            /// Length:        32
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            FLOAT res_lut_param_1[32];
        } res_lut_param_1_tab;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_lut_param_2_tab
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved Lut parameter 2.
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Length:        32
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct res_lut_param_2_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// res_lut_param_2 - Array
            ///
            /// Tuning Level:  never_tune
            /// Default Value: 0.0
            /// Length:        32
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            FLOAT res_lut_param_2[32];
        } res_lut_param_2_tab;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// res_lut_param_3_tab
        ///
        /// Tuning Level:  never_tune
        /// Description:   Reserved Lut parameter 3.
        /// Default Value: 0
        /// Range:         [0, 4294967295]
        /// Bit Depth:     32u
        /// Length:        16
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct res_lut_param_3_tabStruct
        {

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// res_lut_param_3 - Array
            ///
            /// Tuning Level:  never_tune
            /// Default Value: 0
            /// Length:        16
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            UINT32 res_lut_param_3[16];
        } res_lut_param_3_tab;
    } general;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// timing
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct timingStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// s3d_offset_1
        ///
        /// Tuning Level:  must_tune
        /// Description:   offset to adjust the 3D shake gyro interval start/end times to better align with the frame. (Offset
        ///                between gyro timing and sof timing in ms).
        /// Type:          int
        /// Default Value: 0
        /// Range:         [-30000, 30000]
        /// Bit Depth:     32s
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 s3d_offset_1;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// s3d_offset_2
        ///
        /// Tuning Level:  must_tune
        /// Description:   offset to adjust the 3D shake gyro interval start/end times to better align with the frame. (Offset
        ///                between gyro timing and sof timing in ms).
        /// Type:          int
        /// Default Value: 0
        /// Range:         [-30000, 30000]
        /// Bit Depth:     32s
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 s3d_offset_2;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// s3d_offset_3
        ///
        /// Tuning Level:  must_tune
        /// Description:   offset to adjust the 3D shake gyro interval start/end times to better align with the frame. (Offset
        ///                between gyro timing and sof timing in ms).
        /// Type:          int
        /// Default Value: 0
        /// Range:         [-30000, 30000]
        /// Bit Depth:     32s
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 s3d_offset_3;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// s3d_offset_4
        ///
        /// Tuning Level:  must_tune
        /// Description:   offset to adjust the 3D shake gyro interval start/end times to better align with the frame. (Offset
        ///                between gyro timing and sof timing in ms).
        /// Type:          int
        /// Default Value: 0
        /// Range:         [-30000, 30000]
        /// Bit Depth:     32s
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        INT32 s3d_offset_4;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// s3d_threshold_1
        ///
        /// Tuning Level:  must_tune
        /// Description:   threshold whereby exposure times above and below this threshold results in a different offset getting
        ///                applied to the 3D shake gyro time interval. Thresholding for deciding s3d_offset based on integration
        ///                time in seconds).
        /// Type:          float
        /// Default Value: 0.005
        /// Range:         [0, 0.03]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT s3d_threshold_1;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// s3d_threshold_2
        ///
        /// Tuning Level:  must_tune
        /// Description:   threshold whereby exposure times above and below this threshold results in a different offset getting
        ///                applied to the 3D shake gyro time interval. Thresholding for deciding s3d_offset based on integration
        ///                time in seconds).
        /// Type:          float
        /// Default Value: 0.010
        /// Range:         [0, 0.03]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT s3d_threshold_2;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// s3d_threshold_3
        ///
        /// Tuning Level:  must_tune
        /// Description:   threshold whereby exposure times above and below this threshold results in a different offset getting
        ///                applied to the 3D shake gyro time interval. Thresholding for deciding s3d_offset based on integration
        ///                time in seconds).
        /// Type:          float
        /// Default Value: 0.020
        /// Range:         [0, 0.03]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT s3d_threshold_3;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// s3d_threshold_4_ext
        ///
        /// Tuning Level:  must_tune
        /// Description:   threshold whereby exposure times above and below this threshold results in a different offset getting
        ///                applied to the 3D shake gyro time interval. Thresholding for deciding s3d_offset based on integration
        ///                time in seconds).
        /// Type:          float
        /// Default Value: 0.030
        /// Range:         [0, 0.03]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT s3d_threshold_4_ext;
    } timing;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// blur_masking
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct blur_maskingStruct
    {

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// enable
        ///
        /// Tuning Level:  often_tune
        /// Description:   Enable blur masking mechanism.
        /// Type:          uint
        /// Default Value: 0
        /// Range:         [0, 1]
        /// Bit Depth:     1u
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 enable;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// min_strength
        ///
        /// Tuning Level:  often_tune
        /// Description:   Minimum strength EIS can go down to when estimating strong blur.
        /// Type:          float
        /// Default Value: 0.7
        /// Range:         [0, 1]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  min_strength;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// exposure_time_th
        ///
        /// Tuning Level:  often_tune
        /// Description:   if (exp_time is greater than exposure_time_th) then blur masking feature is enabled. Otherwise disabled.
        ///                Units are seconds.
        /// Type:          float
        /// Default Value: 0.015
        /// Range:         [0, 0.04]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  exposure_time_th;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// start_decrease_at_blur
        ///
        /// Tuning Level:  often_tune
        /// Description:   Blur below this point won't decrease strength. Units are pixels out of 1920 resolutions. Blur above this
        ///                point will cause min_strength stabilization (in between start/end interpolate) Units are pixels out of
        ///                1920 resolutions. If (end_decrease_at_bluris greater thanstart_decrease_at_blur) then feature will be
        ///                disabled.
        /// Type:          float
        /// Default Value: 15.0
        /// Range:         [5, 100]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  start_decrease_at_blur;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// end_decrease_at_blur
        ///
        /// Tuning Level:  often_tune
        /// Description:   Blur below this point won't decrease strength. Units are pixels out of 1920 resolutions. Blur above this
        ///                point will cause min_strength stabilization (in between start/end interpolate) Units are pixels out of
        ///                1920 resolutions. If (end_decrease_at_bluris greater thanstart_decrease_at_blur) then feature will be
        ///                disabled.
        /// Type:          float
        /// Default Value: 25.0
        /// Range:         [5, 100]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  end_decrease_at_blur;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// blur_masking_res1
        ///
        /// Tuning Level:  often_tune
        /// Description:   blur_masking_res1.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  blur_masking_res1;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// blur_masking_res2
        ///
        /// Tuning Level:  often_tune
        /// Description:   blur_masking_res2.
        /// Type:          float
        /// Default Value: 0.0
        /// Range:         [-99999999999, 99999999999]
        /// Bit Depth:     float
        /// Conversion:    No Conversion needed
        /// Notes:         Constant: no dynamic configuration even when control variable change.
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        FLOAT  blur_masking_res2;
    } blur_masking;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_eis11Type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct chromatix_eis11Type
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// parameter_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct parameter_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        CHAR* revision;
    } parameter_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chromatix_eis11_reserve
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_eis11_reserveType chromatix_eis11_reserve;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// chromatix_eis11TypeClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class chromatix_eis11TypeClass : public ParameterModule, public chromatix_eis11Type
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 1;
    static const UINT16 MINOR = 1;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_eis11TypeClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    chromatix_eis11TypeClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~chromatix_eis11TypeClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis11_reserveType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis11_reserveType(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis11_reserveType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis11_reserveType_generalStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis11_reserveType_generalStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis11_reserveType::generalStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis11_reserveType_generalStruct_res_lut_param_1_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis11_reserveType_generalStruct_res_lut_param_1_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis11_reserveType::generalStruct::res_lut_param_1_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis11_reserveType_generalStruct_res_lut_param_2_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis11_reserveType_generalStruct_res_lut_param_2_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis11_reserveType::generalStruct::res_lut_param_2_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis11_reserveType_generalStruct_res_lut_param_3_tabStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis11_reserveType_generalStruct_res_lut_param_3_tabStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis11_reserveType::generalStruct::res_lut_param_3_tabStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis11_reserveType_timingStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis11_reserveType_timingStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis11_reserveType::timingStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis11_reserveType_blur_maskingStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis11_reserveType_blur_maskingStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis11_reserveType::blur_maskingStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load chromatix_eis11Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadchromatix_eis11Type(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis11Type* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis11Type::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadparameter_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        chromatix_eis11Type::parameter_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload chromatix_eis11Type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadchromatix_eis11Type(
        chromatix_eis11Type* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload parameter_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void Unloadparameter_versionStruct(
        chromatix_eis11Type::parameter_versionStruct* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class chromatix_eis11TypeClass

EIS_1_1_0_NAMESPACE_END
#endif // EIS_1_1_0_H

