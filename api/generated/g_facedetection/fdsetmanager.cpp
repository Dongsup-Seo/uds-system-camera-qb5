////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  fdsetmanager.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#include "fdsetmanager.h"

fdSetManager::fdSetManager()
{
    UINT32 index = 0;
    m_defaultModules[index++] = (const ParameterModule*)PARAMETER_NEW camxfdconfig::FaceDetectionCtrlTypeClass("fdconfigdata");

    for (UINT32 i = 0; i < index; i++)
    {
        m_moduleMap[m_defaultModules[i]->Type] = (void*)m_defaultModules[i];
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// UpdateBinaryParameters
///
/// @brief Replaces exising parameters with the ones in a buffer. LoadBinaryParameters must be called first
///
/// @param buffer   Binary parameter buffer
/// @param length   Length of the binary parameter buffer
///
/// @return Node
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL fdSetManager::UpdateBinaryParameters(
    UINT8* buffer,
    UINT64 length)
{
    BOOL result = Valid;

    if (result)
    {
        fdSetManager* update = new fdSetManager();

        if (update->LoadBinaryParameters(buffer, length))
        {
            UpdateParameters(update);
            PARAMETER_DELETE update;
            result = TRUE;
        }
    }

    return result;
}

camxfdconfig::FaceDetectionCtrlType* fdSetManager::GetModule_fdconfigdata(
    TuningMode* modeBranch,
    UINT32 modeCount)
{
    ParameterModule* pModule = GetModule((const CHAR *)"fdconfigdata",
        modeBranch, modeCount);

    return (camxfdconfig::FaceDetectionCtrlType*)(camxfdconfig::FaceDetectionCtrlTypeClass*)pModule;
}

