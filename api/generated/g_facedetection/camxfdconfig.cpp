////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxfdconfig.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "camxfdconfig.h"
#include "parametersetmanager.h"

CAMXFDCONFIG_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FaceDetectionCtrlTypeClass::FaceDetectionCtrlTypeClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(maxNumberOfFaces);
    PARAMETER_INITIALIZE(maxFPSWithFaces);
    PARAMETER_INITIALIZE(maxFPSWithNoFaces);
    PARAMETER_INITIALIZE(multiCameraMaxFPSWithFaces);
    PARAMETER_INITIALIZE(multiCameraMaxFPSWithNoFaces);
    PARAMETER_INITIALIZE(lockDetectedFaces);
    PARAMETER_INITIALIZE(initialNoFrameSkipCount);
    PARAMETER_INITIALIZE(maxPendingFrames);
    PARAMETER_INITIALIZE(delayCount);
    PARAMETER_INITIALIZE(holdCount);
    PARAMETER_INITIALIZE(retryCount);
    PARAMETER_INITIALIZE(accuracy);
    PARAMETER_INITIALIZE(hwConfig);
    PARAMETER_INITIALIZE(swConfig);
    PARAMETER_INITIALIZE(FPFilter);
    PARAMETER_INITIALIZE(ROIGenerator);
    PARAMETER_INITIALIZE(managerConfig);
    PARAMETER_INITIALIZE(stabilization);
    PARAMETER_INITIALIZE(swPreprocess);
    PARAMETER_INITIALIZE(facialAttrConfig);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FaceDetectionCtrlTypeClass::FaceDetectionCtrlTypeClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(maxNumberOfFaces);
    PARAMETER_INITIALIZE(maxFPSWithFaces);
    PARAMETER_INITIALIZE(maxFPSWithNoFaces);
    PARAMETER_INITIALIZE(multiCameraMaxFPSWithFaces);
    PARAMETER_INITIALIZE(multiCameraMaxFPSWithNoFaces);
    PARAMETER_INITIALIZE(lockDetectedFaces);
    PARAMETER_INITIALIZE(initialNoFrameSkipCount);
    PARAMETER_INITIALIZE(maxPendingFrames);
    PARAMETER_INITIALIZE(delayCount);
    PARAMETER_INITIALIZE(holdCount);
    PARAMETER_INITIALIZE(retryCount);
    PARAMETER_INITIALIZE(accuracy);
    PARAMETER_INITIALIZE(hwConfig);
    PARAMETER_INITIALIZE(swConfig);
    PARAMETER_INITIALIZE(FPFilter);
    PARAMETER_INITIALIZE(ROIGenerator);
    PARAMETER_INITIALIZE(managerConfig);
    PARAMETER_INITIALIZE(stabilization);
    PARAMETER_INITIALIZE(swPreprocess);
    PARAMETER_INITIALIZE(facialAttrConfig);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FaceDetectionCtrlTypeClass::~FaceDetectionCtrlTypeClass()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* FaceDetectionCtrlTypeClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "fdconfigdata")) == 0)
    {
        name = "fdconfigdata";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDFacialAttributeConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDFacialAttributeConfig(
    ParameterFileSymbolTableEntry* entry,
    FDFacialAttributeConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->PTDMaxNumberOfFaces, alignment);
    result = result && entry->Read(&structure->SMDMaxNumberOfFaces, alignment);
    result = result && entry->Read(&structure->GBDMaxNumberOfFaces, alignment);
    result = result && entry->Read(&structure->CTDMaxNumberOfFaces, alignment);
    result = result && entry->Read(&structure->FDStabilizationOverride, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDSWPreprocessConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDSWPreprocessConfig(
    ParameterFileSymbolTableEntry* entry,
    FDSWPreprocessConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->exposureShortBySafeThreshold, alignment);
    result = result && entry->Read(&structure->deltaEVFromTargetThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDMedianFilter
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDMedianFilter(
    ParameterFileSymbolTableEntry* entry,
    FDMedianFilter* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->historyLength, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDAverageFilter
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDAverageFilter(
    ParameterFileSymbolTableEntry* entry,
    FDAverageFilter* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->historyLength, alignment);
    result = result && entry->Read(&structure->movingHistoryLength, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDHysteresisFilter
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDHysteresisFilter(
    ParameterFileSymbolTableEntry* entry,
    FDHysteresisFilter* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->startA, alignment);
    result = result && entry->Read(&structure->endA, alignment);
    result = result && entry->Read(&structure->startB, alignment);
    result = result && entry->Read(&structure->endB, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDTemporalFilter
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDTemporalFilter(
    ParameterFileSymbolTableEntry* entry,
    FDTemporalFilter* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->numerator, alignment);
    result = result && entry->Read(&structure->denominator, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDStabilizationAttributeConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDStabilizationAttributeConfig(
    ParameterFileSymbolTableEntry* entry,
    FDStabilizationAttributeConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    structure->mode = (FDStabilizationMode)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->minStableState, alignment);
    result = result && entry->Read(&structure->stableThreshold, alignment);
    result = result && entry->Read(&structure->threshold, alignment);
    result = result && entry->Read(&structure->stateCount, alignment);
    result = result && entry->Read(&structure->useReference, alignment);
    structure->filterType = (FDStabilizationFilter)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->movingThreshold, alignment);
    result = result && entry->Read(&structure->movingInitStateCount, alignment);
    result = result && entry->Read(&structure->movingLinkFactor, alignment);
    result = result && LoadFDStabilizationAttributeConfig_valueStruct(entry, &structure->value, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDStabilizationAttributeConfig_valueStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDStabilizationAttributeConfig_valueStruct(
    ParameterFileSymbolTableEntry* entry,
    FDStabilizationAttributeConfig::valueStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = LoadFDTemporalFilter(entry, &structure->temporalFilter, alignment);
    result = result && LoadFDHysteresisFilter(entry, &structure->hysteresisFilter, alignment);
    result = result && LoadFDAverageFilter(entry, &structure->averageFilter, alignment);
    result = result && LoadFDMedianFilter(entry, &structure->medianFilter, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDStabilizationConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDStabilizationConfig(
    ParameterFileSymbolTableEntry* entry,
    FDStabilizationConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->historyDepth, alignment);
    result = result && LoadFDStabilizationAttributeConfig(entry, &structure->position, alignment);
    result = result && LoadFDStabilizationAttributeConfig(entry, &structure->size, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDROIManagerConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDROIManagerConfig(
    ParameterFileSymbolTableEntry* entry,
    FDROIManagerConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->newGoodFaceConfidence, alignment);
    result = result && entry->Read(&structure->newNormalFaceConfidence, alignment);
    result = result && entry->Read(&structure->existingFaceConfidence, alignment);
    result = result && entry->Read(&structure->angleDiffForStrictConfidence, alignment);
    result = result && entry->Read(&structure->strictNewGoodFaceConfidence, alignment);
    result = result && entry->Read(&structure->strictNewNormalFaceConfidence, alignment);
    result = result && entry->Read(&structure->strictExistingFaceConfidence, alignment);
    result = result && entry->Read(&structure->faceLinkMoveDistanceRatio, alignment);
    result = result && entry->Read(&structure->faceLinkMinSizeRatio, alignment);
    result = result && entry->Read(&structure->faceLinkMaxSizeRatio, alignment);
    result = result && entry->Read(&structure->faceLinkRollAngleDifference, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDROIGeneratorConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDROIGeneratorConfig(
    ParameterFileSymbolTableEntry* entry,
    FDROIGeneratorConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->baseThreshold, alignment);
    result = result && entry->Read(&structure->innerThreshold, alignment);
    result = result && entry->Read(&structure->expandFaceSizePercentage, alignment);
    result = result && entry->Read(&structure->expandBoxBorderPercentage, alignment);
    result = result && entry->Read(&structure->faceSpreadTolerance, alignment);
    structure->searchDensity = (FDSearchDensity)entry->ReadEnum(&result, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDFPFilterConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDFPFilterConfig(
    ParameterFileSymbolTableEntry* entry,
    FDFPFilterConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && entry->Read(&structure->baseThreshold, alignment);
    result = result && entry->Read(&structure->innerThreshold, alignment);
    result = result && entry->Read(&structure->expandFaceSizePercentage, alignment);
    result = result && entry->Read(&structure->expandBoxBorderPercentage, alignment);
    result = result && entry->Read(&structure->faceSpreadTolerance, alignment);
    structure->searchDensity = (FDSearchDensity)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->maxNumOfFacesSecondCheck, alignment);
    result = result && entry->Read(&structure->maxFaceSizeSecondCheck, alignment);
    result = result && entry->Read(&structure->minFaceSizeSecondCheck, alignment);
    result = result && entry->Read(&structure->minHWConfidenceSecondCheck, alignment);
    result = result && entry->Read(&structure->minDLConfidenceSecondCheck, alignment);
    result = result && entry->Read(&structure->uprightFaceOnlySecondCheck, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDProfileConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDProfileConfig(
    ParameterFileSymbolTableEntry* entry,
    FDProfileConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->searchAngle = (FDSearchAngle)entry->ReadEnum(&result, alignment);
    structure->upFrontSearchAnggle = (FDSearchAngle)entry->ReadEnum(&result, alignment);
    structure->priorityAngleRange = (FDSearchAngle)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->priorityThreshold, alignment);
    result = result && entry->Read(&structure->nonPriorityThreshold, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDFaceSize
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDFaceSize(
    ParameterFileSymbolTableEntry* entry,
    FDFaceSize* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    structure->type = (FDFaceSizeType)entry->ReadEnum(&result, alignment);
    result = result && LoadFDFaceSize_valueStruct(entry, &structure->value, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDFaceSize_valueStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDFaceSize_valueStruct(
    ParameterFileSymbolTableEntry* entry,
    FDFaceSize::valueStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->size, alignment);
    result = result && entry->Read(&structure->ratio, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDSwConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDSwConfig(
    ParameterFileSymbolTableEntry* entry,
    FDSwConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && LoadFDFaceSize(entry, &structure->minFaceSize, alignment);
    result = result && LoadFDFaceSize(entry, &structure->maxFaceSize, alignment);
    result = result && LoadFDProfileConfig(entry, &structure->frontProfileConfig, alignment);
    result = result && LoadFDProfileConfig(entry, &structure->halfProfileConfig, alignment);
    result = result && LoadFDProfileConfig(entry, &structure->fullProfileConfig, alignment);
    result = result && entry->Read(&structure->enableUpFrontAngles, alignment);
    result = result && entry->Read(&structure->skipIfNoOrientation, alignment);
    structure->detectionMode = (FDDetectionMode)entry->ReadEnum(&result, alignment);
    structure->newFaceSearchDensity = (FDSearchDensity)entry->ReadEnum(&result, alignment);
    structure->existingFaceSearchDensity = (FDSearchDensity)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->detectNewFacesInExistingFaceDirection, alignment);
    result = result && entry->Read(&structure->noFaceSearchCycle, alignment);
    result = result && entry->Read(&structure->newFaceSearchCycle, alignment);
    result = result && entry->Read(&structure->newFaceSearchInterval, alignment);
    result = result && entry->Read(&structure->upFrontNoFaceSearchCycle, alignment);
    result = result && entry->Read(&structure->upFrontNewFaceSearchCycle, alignment);
    result = result && entry->Read(&structure->upFrontNewFaceSearchInterval, alignment);
    result = result && entry->Read(&structure->positionSteadiness, alignment);
    result = result && entry->Read(&structure->sizeSteadiness, alignment);
    result = result && entry->Read(&structure->rollAngleExtension, alignment);
    result = result && entry->Read(&structure->yawAngleExtension, alignment);
    result = result && entry->Read(&structure->noFaceFrameSkip, alignment);
    result = result && entry->Read(&structure->newFaceFrameSkip, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FDHwConfig
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFDHwConfig(
    ParameterFileSymbolTableEntry* entry,
    FDHwConfig* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->enable, alignment);
    result = result && LoadFDFaceSize(entry, &structure->minFaceSize, alignment);
    result = result && LoadFDFaceSize(entry, &structure->maxFaceSize, alignment);
    result = result && entry->Read(&structure->enableUpFrontAngles, alignment);
    structure->angle = (FDSearchAngle)entry->ReadEnum(&result, alignment);
    result = result && entry->Read(&structure->upFrontAngle, alignment);
    result = result && entry->Read(&structure->threshold, alignment);
    result = result && entry->Read(&structure->noFaceFrameSkip, alignment);
    result = result && entry->Read(&structure->newFaceFrameSkip, alignment);
    result = result && entry->Read(&structure->enableHWFP, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FaceDetectionCtrlType
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::LoadFaceDetectionCtrlType(
    ParameterFileSymbolTableEntry* entry,
    FaceDetectionCtrlType* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && entry->Read(&structure->maxNumberOfFaces, alignment);
    result = result && entry->Read(&structure->maxFPSWithFaces, alignment);
    result = result && entry->Read(&structure->maxFPSWithNoFaces, alignment);
    result = result && entry->Read(&structure->multiCameraMaxFPSWithFaces, alignment);
    result = result && entry->Read(&structure->multiCameraMaxFPSWithNoFaces, alignment);
    result = result && entry->Read(&structure->lockDetectedFaces, alignment);
    result = result && entry->Read(&structure->initialNoFrameSkipCount, alignment);
    result = result && entry->Read(&structure->maxPendingFrames, alignment);
    result = result && entry->Read(&structure->delayCount, alignment);
    result = result && entry->Read(&structure->holdCount, alignment);
    result = result && entry->Read(&structure->retryCount, alignment);
    structure->accuracy = (FDFaceAccuracy)entry->ReadEnum(&result, alignment);
    result = result && LoadFDHwConfig(entry, &structure->hwConfig, alignment);
    result = result && LoadFDSwConfig(entry, &structure->swConfig, alignment);
    result = result && LoadFDFPFilterConfig(entry, &structure->FPFilter, alignment);
    result = result && LoadFDROIGeneratorConfig(entry, &structure->ROIGenerator, alignment);
    result = result && LoadFDROIManagerConfig(entry, &structure->managerConfig, alignment);
    result = result && LoadFDStabilizationConfig(entry, &structure->stabilization, alignment);
    result = result && LoadFDSWPreprocessConfig(entry, &structure->swPreprocess, alignment);
    result = result && LoadFDFacialAttributeConfig(entry, &structure->facialAttrConfig, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FaceDetectionCtrlTypeClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    FaceDetectionCtrlType::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* FaceDetectionCtrlTypeClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    FaceDetectionCtrlTypeClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW FaceDetectionCtrlTypeClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadFaceDetectionCtrlType(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


CAMXFDCONFIG_NAMESPACE_END
