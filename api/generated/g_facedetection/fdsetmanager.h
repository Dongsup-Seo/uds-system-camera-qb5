////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  fdsetmanager.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#include "parametersetmanager.h"
#include "parametermodule.h"
#include "parametertypes.h"
#include "camxfdconfig.h"

#define FD_DEFAULT_MODULE_COUNT 1
#ifndef FDSETMANAGER_H
#define FDSETMANAGER_H

#include <iostream>
#include <unordered_map>

class fdSetManager : public ParameterSetManager
{
public:
    fdSetManager();
    virtual ~fdSetManager()
    {
        for (UINT32 i = 0; i < FD_DEFAULT_MODULE_COUNT; i++)
        {
            PARAMETER_DELETE m_defaultModules[i];
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// UpdateBinaryParameters
    ///
    /// @brief Replaces exising parameters with the ones in a buffer. LoadBinaryParameters must be called first
    /// @brief After calling UpdateBinaryParameters, call FreeReplacedParameter to free up any replaced parameter objects
    ///
    /// @param buffer   Binary parameter buffer
    /// @param length   Length of the binary parameter buffer
    ///
    /// @return Node
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BOOL UpdateBinaryParameters(
        UINT8* buffer,
        UINT64 length);

    camxfdconfig::FaceDetectionCtrlType* GetModule_fdconfigdata(
        TuningMode* modeBranch,
        UINT32 modeCount);


protected:
    virtual const ParameterModule* GetDefaultModule(
        char* type)
    {
        const ParameterModule* module = (const ParameterModule*)m_moduleMap[type];

        return module;
    }

    const ParameterModule* m_defaultModules[FD_DEFAULT_MODULE_COUNT];
    std::unordered_map<std::string, void*> m_moduleMap;
};

#endif
