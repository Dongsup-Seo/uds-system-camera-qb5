////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxeepromdriver.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXEEPROMDRIVER_H
#define CAMXEEPROMDRIVER_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "camxsensorcommon.h"

#define CAMX_NAMESPACE_BEGIN namespace CamX {
#define CAMX_NAMESPACE_END }

CAMX_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// EEPROMSlaveInformation
///
/// Description:   EEPROM Slave Information
/// Comments:      EEPROM slave information
///                 element for EEPROMName
///                 element for slaveAddress
///                 elemet for regAddrType
///                 element for regDataType
///                 element for I2CFrequencyMode
///                 element for power up sequence
///                 element for power down sequence
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct EEPROMSlaveInformation
{
    /// Name of the EEPROM device
    CHAR*                                EEPROMName;
    /// 8-bit or 10-bit I2C slave Write address
    UINT16                               slaveAddress;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// regAddrType
    ///
    /// Range:         [1,4]
    /// Comments:      Register address / data size in bytes
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    I2CRegAddrDataType regAddrType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// regDataType
    ///
    /// Range:         [1,4]
    /// Comments:      Register address / data size in bytes
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    I2CRegAddrDataType regDataType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// i2cFrequencyMode
    /// Default Value: FAST
    /// Comments:      I2C frequency mode of slave
    ///                Supported modes are: STANDARD (100 KHz), FAST (400 KHz), FAST_PLUS (1 MHz), CUSTOM (Custom frequency in
    ///                DTSI)
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    I2CFrequencyMode   i2cFrequencyMode;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// powerUpSequence
    /// Comments:      Sequence of power configuration type and configuration value required to control power to the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PowerSequenceInfo  powerUpSequence;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// powerDownSequence
    /// Comments:      Sequence of power configuration type and configuration value required to control power to the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PowerSequenceInfo  powerDownSequence;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// EndianType
/// Comments:      Type of the Endianness
///                Valid values are: BIG, LITTLE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class EndianType
{
    BIG    = 0,
    LITTLE = 1
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SignType
/// Comments:      Type of the Signedness
///                Valid values are: SIGNED, UNSIGNED
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class SignType
{
    SIGNED   = 0,
    UNSIGNED = 1
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// MemoryType
///
/// Description:   Memory Type
/// Comments:      Specifies the availability of the specified data and type of endianness
///                 element for endinanness
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct MemoryType
{
    /// Specifies whether a particular OTP data available or not
    BOOL       isAvailable;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// endianness
    /// Default Value: BIG
    /// Comments:      Type of the Endianness
    ///                Valid values are: BIG, LITTLE
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    EndianType endianness;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// MemoryInfo
/// Comments:      Specifies memory offset value and mask information
///                 element for signedness
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct MemoryInfo
{
    /// Offset value in the OTP memory
    UINT16   offset;
    /// mask value which will be applied to obtain required data bits
    UINT32   mask;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// signedness
    /// Default Value: SIGNED
    /// Comments:      Type of the Signedness
    ///                Valid values are: SIGNED, UNSIGNED
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SignType signedness;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AfLensSagType
/// Comments:      Type of the Lens sag when AF infinity and macro calibration
///                Supported values are
///                 DEFAULT : Deg 90, Default, face forward
///                 DEG0_OTP : Face up, OTP/EEPROM calibrated
///                 DEG0_AVG : Face up, Average value
///                 DEG180_OTP : Face down, OTP/EEPROM calibrated
///                 DEG180_AVG : Face down, Average value
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class AfLensSagType
{
    DEFAULT    = 0,
    DEG0_OTP   = 1,
    DEG0_AVG   = 2,
    DEG180_OTP = 3,
    DEG180_AVG = 4,
    MAX        = 5
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AFCalibrationInfo
/// Comments:      Specifies lens distance/DAC information for AF sync in dual camera
///                 element for chart distance in centimetre information
///                 element for DAC value information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AFCalibrationInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// chartDistanceCM
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo chartDistanceCM;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DACValue
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo DACValue;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AFInfo
/// Comments:      Specifies auto focus data information to format the OTP data
///                 element for AF data availablity and endian
///                 element for macro information
///                 element for infinity information
///                 element for AF sync information
///                 element for hall information
///                 element for hall bias information
///                 element for vertical macro information
///                 element for vertical infinity information
///                 element for horizontal macro information
///                 element for horizontal infinity
///                 element for macro margin value information
///                 element for infinity margin value
///                 element for lens sag in macro calibration
///                 element for lens sag in infinity calibration
///                 element for calibrated value of gravity offset from 0 to 90 in eeprom or otp
///                 element for calibrated value of gravity offset from 90 to 180 in eeprom or otp
///                 element for average value of gravity offset from 0 to 90
///                 element for average value of gravity offset from 90 to 180
///                 element for actuator ID to identify the actuator
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AFInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// autoFocusData
    ///
    /// Description:   Memory Type
    /// Comments:      Specifies the availability of the specified data and type of endianness
    ///                 element for endinanness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryType         autoFocusData;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// macro
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         macro;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// infinity
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         infinity;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// calibrationInfo - Array
    /// Min Length:    0
    /// Max Length:    Unbounded
    /// Comments:      Specifies lens distance/DAC information for AF sync in dual camera
    ///                 element for chart distance in centimetre information
    ///                 element for DAC value information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32             calibrationInfoCount;
    UINT32             calibrationInfoID;
    AFCalibrationInfo* calibrationInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hall
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         hall;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// hallBias
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         hallBias;
    /// Hall register address to update with calibrated data
    UINT32             hallRegisterAddr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// verticalMacro
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         verticalMacro;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// verticalInfinity
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         verticalInfinity;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// horizontalMacro
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         horizontalMacro;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// horizontalInfinity
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         horizontalInfinity;
    /// Margin value to extend towards macro region
    FLOAT              macroMargin;
    /// margin value to extend towards infinity region
    FLOAT              infinityMargin;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lensSagCalMac
    /// Comments:      Type of the Lens sag when AF infinity and macro calibration
    ///                Supported values are
    ///                 DEFAULT : Deg 90, Default, face forward
    ///                 DEG0_OTP : Face up, OTP/EEPROM calibrated
    ///                 DEG0_AVG : Face up, Average value
    ///                 DEG180_OTP : Face down, OTP/EEPROM calibrated
    ///                 DEG180_AVG : Face down, Average value
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AfLensSagType      lensSagCalMac;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lensSagCalInf
    /// Comments:      Type of the Lens sag when AF infinity and macro calibration
    ///                Supported values are
    ///                 DEFAULT : Deg 90, Default, face forward
    ///                 DEG0_OTP : Face up, OTP/EEPROM calibrated
    ///                 DEG0_AVG : Face up, Average value
    ///                 DEG180_OTP : Face down, OTP/EEPROM calibrated
    ///                 DEG180_AVG : Face down, Average value
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AfLensSagType      lensSagCalInf;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// otpGravityOfs0to90
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         otpGravityOfs0to90;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// otpGravityOfs90to180
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         otpGravityOfs90to180;
    /// average value of gravity offset from 0 to 90
    INT16              avgGravityOfs0to90;
    /// average value of gravity offset from 90 to 180
    INT16              avgGravityOfs90to180;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// actuatorID - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32             actuatorIDExists;
    UINT32             actuatorIDID;
    MemoryInfo         actuatorID;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// WBType
/// Comments:      Type of the white balance data
///                Valid values are: INDIVIDUAL, RATIO
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class WBType
{
    INDIVIDUAL = 0,
    RATIO      = 1
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// EEPROMIlluminantType
/// Comments:      Type of the illuminant
///                Supported illuminants are D65, TL84, A, D50 and H
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class EEPROMIlluminantType
{
    D65  = 0,
    TL84 = 1,
    A    = 2,
    D50  = 3,
    H    = 4,
    MAX  = 5
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SPCSettingsInfo
/// Comments:      SPC Info register settings
///                 element for SPC address information
///                 element for size of the SPC settings information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SPCSettingsInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dataOffset
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo dataOffset;
    /// register address value to write SPC data
    UINT16     SPCAddress;
    /// size of the SPC data settings
    UINT32     settingsSize;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// WBlightInfo
///
/// Description:   White balance light Information
/// Comments:      whitebalance information for a particular light type
///                 element for light type
///                 element for R value information
///                 element for gr Value information
///                 element for b Value information
///                 element for gb Value information
///                 element for rOverG Value information
///                 element for bOverG Value information
///                 element for grOverGB Value information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct WBlightInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// illuminantType
    /// Comments:      Type of the illuminant
    ///                Supported illuminants are D65, TL84, A, D50 and H
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    EEPROMIlluminantType illuminantType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// rValue
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           rValue;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// grValue
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           grValue;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bValue
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           bValue;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gbValue
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           gbValue;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// rOverGValue
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           rOverGValue;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bOverGValue
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           bOverGValue;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// grOverGBValue
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           grOverGBValue;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// WBInfo
/// Comments:      Specifies white balance data information to format the OTP data
///                 element for WB data availablity and endian
///                 element for WBType information
///                 element for WB light information
///                 element for mirror information
///                 element for flip information
///                 element for qValue information
///                 element for isInvertGROverGB information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct WBInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// WBData
    ///
    /// Description:   Memory Type
    /// Comments:      Specifies the availability of the specified data and type of endianness
    ///                 element for endinanness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryType   WBData;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// datatype
    /// Comments:      Type of the white balance data
    ///                Valid values are: INDIVIDUAL, RATIO
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    WBType       datatype;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lightInfo - Array
    ///
    /// Description:   White balance light Information
    /// Min Length:    1
    /// Max Length:    Unbounded
    /// Comments:      whitebalance information for a particular light type
    ///                 element for light type
    ///                 element for R value information
    ///                 element for gr Value information
    ///                 element for b Value information
    ///                 element for gb Value information
    ///                 element for rOverG Value information
    ///                 element for bOverG Value information
    ///                 element for grOverGB Value information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32       lightInfoCount;
    UINT32       lightInfoID;
    WBlightInfo* lightInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mirror
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo   mirror;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// flip
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo   flip;
    /// Q value
    FLOAT        qValue;
    /// Set to TRUE if GRoverGB needs to be inverted
    BOOL         isInvertGROverGB;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LSClightInfo
///
/// Description:   Lens shading light information
/// Comments:      Lens shading information for a particular rolloff light
///                 element for light type
///                 element for MSB part of the R gain value information
///                 element for LSB part of the R gain value information
///                 element for MSB part of the gr gain value information
///                 element for LSB part of the gr gain value information
///                 element for MSB part of the gb gain value information
///                 element for LSB part of the gb gain value information
///                 element for MSB part of the b gain value information
///                 element for LSB part of the b gain value information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LSClightInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// illuminantType
    /// Comments:      Type of the illuminant
    ///                Supported illuminants are D65, TL84, A, D50 and H
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    EEPROMIlluminantType illuminantType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// rGainMSB
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           rGainMSB;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// rGainLSB
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           rGainLSB;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// grGainMSB
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           grGainMSB;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// grGainLSB
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           grGainLSB;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gbGainMSB
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           gbGainMSB;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gbGainLSB
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           gbGainLSB;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bGainMSB
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           bGainMSB;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// bGainLSB
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo           bGainLSB;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LSCInfo
/// Comments:      Specifies LSC data information to format the OTP data
///                 element for LSC data availablity and endian
///                 element for LSC light information
///                 element for mesh HW roll off size information
///                 element for incrimenting value for obtaing R value information
///                 element for incrimenting value for obtaing GR value information
///                 element for incrimenting value for obtaing GB value information
///                 element for incrimenting value for obtaing B value information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LSCInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LSCData
    ///
    /// Description:   Memory Type
    /// Comments:      Specifies the availability of the specified data and type of endianness
    ///                 element for endinanness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryType    LSCData;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lightInfo - Array
    ///
    /// Description:   Lens shading light information
    /// Min Length:    1
    /// Max Length:    Unbounded
    /// Comments:      Lens shading information for a particular rolloff light
    ///                 element for light type
    ///                 element for MSB part of the R gain value information
    ///                 element for LSB part of the R gain value information
    ///                 element for MSB part of the gr gain value information
    ///                 element for LSB part of the gr gain value information
    ///                 element for MSB part of the gb gain value information
    ///                 element for LSB part of the gb gain value information
    ///                 element for MSB part of the b gain value information
    ///                 element for LSB part of the b gain value information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32        lightInfoCount;
    UINT32        lightInfoID;
    LSClightInfo* lightInfo;
    /// mesh HW rolloff size
    UINT16        meshHWRollOffSize;
    /// position of the next R value from the current R
    UINT16        rIncrement;
    /// position of the next GR value from the current GR
    UINT16        grIncrement;
    /// position of the next GB value from the current GB
    UINT16        gbIncrement;
    /// position of the next B value from the current B
    UINT16        bIncrement;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AbsoluteMethodAECSyncInfo
/// Comments:      Specifies AEC sync info to be used in Absolute Method for multi-camera sync
///                 element for AEC sync OTP format version number
///                 element for Average Luma
///                 element for focal length information
///                 element for focal length information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct AbsoluteMethodAECSyncInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// version
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ///                AEC sync OTP format version number
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// averageLuma
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ///                Average luma measured from the setup when the camera
    ///                is running AEC at D50 illuminant
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo averageLuma;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gain
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ///                Fixed point Q10 gain of the camera when AEC is converged at D50 illuminant
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo gain;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// exposureTimeUs
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ///                Exposure time in microseconds of the camera when AEC
    ///                is converted at D50 illuminant
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo exposureTimeUs;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DualCameraLensInfo
/// Comments:      Specifies lens information to format the dual camera data
///                 element for focal length information
///                 element for focal length ratio information
///                 element for native sensor resolution width information
///                 element for native sensor resolution height information
///                 element for calibration resolution width information
///                 element for incrimenting value for obtaing B value information
///                 element for AF sync information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DualCameraLensInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// focalLength
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         focalLength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// focalLengthRatio
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         focalLengthRatio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// nativeSensorResolutionWidth
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         nativeSensorResolutionWidth;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// nativeSensorResolutionHeight
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         nativeSensorResolutionHeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// calibrationResolutionWidth
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         calibrationResolutionWidth;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// calibrationResolutionHeight
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo         calibrationResolutionHeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// AFSyncInfo - Array
    /// Min Length:    0
    /// Max Length:    Unbounded
    /// Comments:      Specifies lens distance/DAC information for AF sync in dual camera
    ///                 element for chart distance in centimetre information
    ///                 element for DAC value information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32             AFSyncInfoCount;
    UINT32             AFSyncInfoID;
    AFCalibrationInfo* AFSyncInfo;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DualCameraSystemInfo
/// Comments:      Specifies dural camera system information to format the dual camera data
///                 element for calibration format version information
///                 element for rotation matrix size information
///                 element for relative rotation matrix offset information
///                 element for geometric matrix size information
///                 element for relative geometric surface parameters offset information
///                 element for relative principle point X information
///                 element for relative principle point Y information
///                 element for relative position flag information
///                 element for relative baseline distance information
///                 element for master sensor mirror flip setting information
///                 element for auxilary sensor mirror flip setting information
///                 element for module orientation flag information
///                 element for rotation flag information
///                 element for brightness ratio information
///                 element for slave gain information
///                 element for slave exposure time information
///                 element for master gain information
///                 element for master exposure time information
///                 element for master color temperature information
///                 element for qValue
///                 element for absolute method AEC sync information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DualCameraSystemInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// calibrationFormatVersion
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo                 calibrationFormatVersion;
    /// size of the rotation matrix
    UINT32                     rotationMatrixSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// relativeRotationMatrixOffset
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo                 relativeRotationMatrixOffset;
    /// size of the geometric matrix
    UINT32                     geometricMatrixSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// relativeGeometricSurfaceParametersOffset
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo                 relativeGeometricSurfaceParametersOffset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// relativePrinciplePointX
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo                 relativePrinciplePointX;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// relativePrinciplePointY
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo                 relativePrinciplePointY;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// relativePositionFlag
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo                 relativePositionFlag;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// relativeBaselineDistance
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo                 relativeBaselineDistance;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// masterSensorMirrorFlipSetting
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo                 masterSensorMirrorFlipSetting;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// auxSensorMirrorFlipSetting
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo                 auxSensorMirrorFlipSetting;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// moduleOrientationFlag
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo                 moduleOrientationFlag;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// rotationFlag
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo                 rotationFlag;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// brightnessRatio - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                     brightnessRatioExists;
    UINT32                     brightnessRatioID;
    MemoryInfo                 brightnessRatio;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// referenceSlaveGain - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                     referenceSlaveGainExists;
    UINT32                     referenceSlaveGainID;
    MemoryInfo                 referenceSlaveGain;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// referenceSlaveExpTime - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                     referenceSlaveExpTimeExists;
    UINT32                     referenceSlaveExpTimeID;
    MemoryInfo                 referenceSlaveExpTime;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// referenceMasterGain - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                     referenceMasterGainExists;
    UINT32                     referenceMasterGainID;
    MemoryInfo                 referenceMasterGain;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// referenceMasterExpTime - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                     referenceMasterExpTimeExists;
    UINT32                     referenceMasterExpTimeID;
    MemoryInfo                 referenceMasterExpTime;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// referenceMasterColorTemp - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                     referenceMasterColorTempExists;
    UINT32                     referenceMasterColorTempID;
    MemoryInfo                 referenceMasterColorTemp;
    UINT32                     qValueExists;
    UINT32                     qValueID;
    FLOAT                      qValue;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// absoluteMethodAECSyncInfo - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies AEC sync info to be used in Absolute Method for multi-camera sync
    ///                 element for AEC sync OTP format version number
    ///                 element for Average Luma
    ///                 element for focal length information
    ///                 element for focal length information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                     absoluteMethodAECSyncInfoExists;
    UINT32                     absoluteMethodAECSyncInfoID;
    AbsoluteMethodAECSyncInfo  absoluteMethodAECSyncInfo;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DualCameraInfo
/// Comments:      Specifies dual camera data information to format the OTP data
///                 element for dual camera data availablity and endian
///                 element for offset address of the dual camera data
///                 element for size of the dual camera data information
///                 element for master sensor information
///                 element for aux sensor information
///                 element for dual camera system information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DualCameraInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DualCameraData
    ///
    /// Description:   Memory Type
    /// Comments:      Specifies the availability of the specified data and type of endianness
    ///                 element for endinanness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryType           DualCameraData;
    /// offset value to locate dual camera data
    UINT32               offset;
    /// size of the dual camera settings
    UINT32               settingsize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// masterInfo
    /// Comments:      Specifies lens information to format the dual camera data
    ///                 element for focal length information
    ///                 element for focal length ratio information
    ///                 element for native sensor resolution width information
    ///                 element for native sensor resolution height information
    ///                 element for calibration resolution width information
    ///                 element for incrimenting value for obtaing B value information
    ///                 element for AF sync information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    DualCameraLensInfo   masterInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// auxInfo
    /// Comments:      Specifies lens information to format the dual camera data
    ///                 element for focal length information
    ///                 element for focal length ratio information
    ///                 element for native sensor resolution width information
    ///                 element for native sensor resolution height information
    ///                 element for calibration resolution width information
    ///                 element for incrimenting value for obtaing B value information
    ///                 element for AF sync information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    DualCameraLensInfo   auxInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// systemInfo
    /// Comments:      Specifies dural camera system information to format the dual camera data
    ///                 element for calibration format version information
    ///                 element for rotation matrix size information
    ///                 element for relative rotation matrix offset information
    ///                 element for geometric matrix size information
    ///                 element for relative geometric surface parameters offset information
    ///                 element for relative principle point X information
    ///                 element for relative principle point Y information
    ///                 element for relative position flag information
    ///                 element for relative baseline distance information
    ///                 element for master sensor mirror flip setting information
    ///                 element for auxilary sensor mirror flip setting information
    ///                 element for module orientation flag information
    ///                 element for rotation flag information
    ///                 element for brightness ratio information
    ///                 element for slave gain information
    ///                 element for slave exposure time information
    ///                 element for master gain information
    ///                 element for master exposure time information
    ///                 element for master color temperature information
    ///                 element for qValue
    ///                 element for absolute method AEC sync information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    DualCameraSystemInfo systemInfo;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SPCInfo
/// Comments:      Specifies shield pixel correction data information to format the OTP data
///                 element for SPC data availablity and endian
///                 element for offset address of the SPC data
///                 element for address type information
///                 element for data type information
///                 element for delay to write each registry entry information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SPCInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SPCData
    ///
    /// Description:   Memory Type
    /// Comments:      Specifies the availability of the specified data and type of endianness
    ///                 element for endinanness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryType                           SPCData;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SPCSettings - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    /// Comments:      SPC Info register settings
    ///                 element for SPC address information
    ///                 element for size of the SPC settings information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                               SPCSettingsCount;
    UINT32                               SPCSettingsID;
    SPCSettingsInfo*                     SPCSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// addressType
    ///
    /// Range:         [1,4]
    /// Comments:      Register address / data size in bytes
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    I2CRegAddrDataType addressType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dataType
    ///
    /// Range:         [1,4]
    /// Comments:      Register address / data size in bytes
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    I2CRegAddrDataType dataType;
    /// Delay in milli seconds. Delay is 0 if not explicitly provided
    UINT16                               delay;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// OISInfo
/// Comments:      Specifies ois calibration data information to format the OTP data
///                 element for OIS data availablity and endian
///                 element for offset address of the SPC data
///                 element for OIS address information
///                 element for size of the OIS settings information
///                 element for address type information
///                 element for data type information
///                 element for delay to write each registry entry information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct OISInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// OISData
    ///
    /// Description:   Memory Type
    /// Comments:      Specifies the availability of the specified data and type of endianness
    ///                 element for endinanness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryType                           OISData;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dataOffset
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo                           dataOffset;
    UINT32                               OISAddressArrayCount;
    UINT32                               OISAddressArrayID;
    UINT32*                              OISAddressArray;
    /// size of the OIS data settings
    UINT32                               settingsSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// addressType
    ///
    /// Range:         [1,4]
    /// Comments:      Register address / data size in bytes
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    I2CRegAddrDataType addressType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dataType
    ///
    /// Range:         [1,4]
    /// Comments:      Register address / data size in bytes
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    I2CRegAddrDataType dataType;
    /// Delay in milli seconds. Delay is 0 if not explicitly provided
    UINT16                               delay;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// PDAFDCCInfo
/// Comments:      Specifies PDAF defocus conversion coefficient data information to format the OTP data
///                 element for DCC data availablity and endian
///                 element for offset address of the slope data
///                 element for offset data offset information
///                 element for knot X information
///                 element for knot Y information
///                 element for offset X information
///                 element for offset Y information
///                 element for area X information
///                 element for area Y information
///                 element for Q value information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct PDAFDCCInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DCCData
    ///
    /// Description:   Memory Type
    /// Comments:      Specifies the availability of the specified data and type of endianness
    ///                 element for endinanness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryType DCCData;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// slopeDataOffset
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo slopeDataOffset;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// offsetDataOffset
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo offsetDataOffset;
    /// knot X value
    UINT16     knotX;
    /// knot Y value
    UINT16     knotY;
    /// offset X value
    UINT16     offsetX;
    /// offset Y value
    UINT16     offsetY;
    /// area X value
    UINT16     areaX;
    /// area Y value
    UINT16     areaY;
    /// Q value
    UINT16     qValue;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// PDAF2DInfo
/// Comments:      Specifies PDAF defocus conversion coefficient data information to format the OTP data
///                 element for PDAF 2D data availablity and endian
///                 element for version information
///                 element for map width information
///                 element for map height information
///                 element for gain width information
///                 element for gain height information
///                 element for left gain map information
///                 element for right gain map information
///                 element for up gain map information
///                 element for down gain map information
///                 element for conversion Coefficient Count information
///                 element for conversion Coefficient information
///                 element for DCC Q Format
///                 element for DCC map width information
///                 element for DCC map height information
///                 Offset for DCC Q Format
///                 Offset for DCC Map Widtht
///                 Offset for DCC map Height
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct PDAF2DInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDAF2DData
    ///
    /// Description:   Memory Type
    /// Comments:      Specifies the availability of the specified data and type of endianness
    ///                 element for endinanness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryType  PDAF2DData;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// version
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo  version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mapWidth
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo  mapWidth;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mapHeight
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo  mapHeight;
    /// gain width
    UINT16      gainWidth;
    /// gain height
    UINT16      gainHeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// leftGainMap
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo  leftGainMap;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// rightGainMap
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo  rightGainMap;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// upGainMap - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32      upGainMapExists;
    UINT32      upGainMapID;
    MemoryInfo  upGainMap;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// downGainMap - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32      downGainMapExists;
    UINT32      downGainMapID;
    MemoryInfo  downGainMap;
    /// count of the conversion coefficient
    UINT16      conversionCoefficientCount;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// conversionCoefficient
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo  conversionCoefficient;
    UINT32      DCCQFormatExists;
    UINT32      DCCQFormatID;
    UINT16      DCCQFormat;
    UINT32      DCCMapWidthExists;
    UINT32      DCCMapWidthID;
    UINT16      DCCMapWidth;
    UINT32      DCCMapHeightExists;
    UINT32      DCCMapHeightID;
    UINT16      DCCMapHeight;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DCCQFormatMemoryInfo - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32      DCCQFormatMemoryInfoExists;
    UINT32      DCCQFormatMemoryInfoID;
    MemoryInfo  DCCQFormatMemoryInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DCCMapWidthMemoryInfo - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32      DCCMapWidthMemoryInfoExists;
    UINT32      DCCMapWidthMemoryInfoID;
    MemoryInfo  DCCMapWidthMemoryInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DCCMapHeightMemoryInfo - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32      DCCMapHeightMemoryInfoExists;
    UINT32      DCCMapHeightMemoryInfoID;
    MemoryInfo  DCCMapHeightMemoryInfo;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// LensDistortionInfo
/// Comments:      Specifies lens distortion information to format the OTP data
///                 element for lens data availablity and endian
///                 element for lens info start offset
///                 element for lens info size
///                 intrinsic calibration horizontalFocalLength
///                 intrinsic calibration verticalFocalLength
///                 intrinsic calibration opticalAxisX
///                 intrinsic calibration opticalAxisY
///                 lens distortion kappa0
///                 lens distortion kappa1
///                 lens distortion kappa2
///                 lens distortion kappa3
///                 lens distortion kappa4
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct LensDistortionInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// lensData
    ///
    /// Description:   Memory Type
    /// Comments:      Specifies the availability of the specified data and type of endianness
    ///                 element for endinanness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryType lensData;
    UINT32     lensOffsetStart;
    UINT32     lensDistortionSize;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// horizontalFocalLength
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo horizontalFocalLength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// verticalFocalLength
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo verticalFocalLength;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// opticalAxisX
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo opticalAxisX;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// opticalAxisY
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo opticalAxisY;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// kappa0
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo kappa0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// kappa1
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo kappa1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// kappa2
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo kappa2;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// kappa3
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo kappa3;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// kappa4
    /// Comments:      Specifies memory offset value and mask information
    ///                 element for signedness
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    MemoryInfo kappa4;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// EEPROMDataFormatInformation
///
/// Description:   EEPROM Data Format Information
/// Comments:      EEPROM data format information
///                 element for auto focus information
///                 element for white balance information
///                 element for lens shading information
///                 element for dual camera information
///                 element for shield pixel information
///                 element for OIS calibration information
///                 element for PDAF DCC information
///                 element for pdaf 2D information
///                 element for lens distortion information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct EEPROMDataFormatInformation
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// AF
    /// Comments:      Specifies auto focus data information to format the OTP data
    ///                 element for AF data availablity and endian
    ///                 element for macro information
    ///                 element for infinity information
    ///                 element for AF sync information
    ///                 element for hall information
    ///                 element for hall bias information
    ///                 element for vertical macro information
    ///                 element for vertical infinity information
    ///                 element for horizontal macro information
    ///                 element for horizontal infinity
    ///                 element for macro margin value information
    ///                 element for infinity margin value
    ///                 element for lens sag in macro calibration
    ///                 element for lens sag in infinity calibration
    ///                 element for calibrated value of gravity offset from 0 to 90 in eeprom or otp
    ///                 element for calibrated value of gravity offset from 90 to 180 in eeprom or otp
    ///                 element for average value of gravity offset from 0 to 90
    ///                 element for average value of gravity offset from 90 to 180
    ///                 element for actuator ID to identify the actuator
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    AFInfo             AF;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// WB
    /// Comments:      Specifies white balance data information to format the OTP data
    ///                 element for WB data availablity and endian
    ///                 element for WBType information
    ///                 element for WB light information
    ///                 element for mirror information
    ///                 element for flip information
    ///                 element for qValue information
    ///                 element for isInvertGROverGB information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    WBInfo             WB;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// LSC
    /// Comments:      Specifies LSC data information to format the OTP data
    ///                 element for LSC data availablity and endian
    ///                 element for LSC light information
    ///                 element for mesh HW roll off size information
    ///                 element for incrimenting value for obtaing R value information
    ///                 element for incrimenting value for obtaing GR value information
    ///                 element for incrimenting value for obtaing GB value information
    ///                 element for incrimenting value for obtaing B value information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    LSCInfo            LSC;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dualCamera
    /// Comments:      Specifies dual camera data information to format the OTP data
    ///                 element for dual camera data availablity and endian
    ///                 element for offset address of the dual camera data
    ///                 element for size of the dual camera data information
    ///                 element for master sensor information
    ///                 element for aux sensor information
    ///                 element for dual camera system information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    DualCameraInfo     dualCamera;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SPC
    /// Comments:      Specifies shield pixel correction data information to format the OTP data
    ///                 element for SPC data availablity and endian
    ///                 element for offset address of the SPC data
    ///                 element for address type information
    ///                 element for data type information
    ///                 element for delay to write each registry entry information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SPCInfo            SPC;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// OIS
    /// Comments:      Specifies ois calibration data information to format the OTP data
    ///                 element for OIS data availablity and endian
    ///                 element for offset address of the SPC data
    ///                 element for OIS address information
    ///                 element for size of the OIS settings information
    ///                 element for address type information
    ///                 element for data type information
    ///                 element for delay to write each registry entry information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    OISInfo            OIS;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDAFDCC
    /// Comments:      Specifies PDAF defocus conversion coefficient data information to format the OTP data
    ///                 element for DCC data availablity and endian
    ///                 element for offset address of the slope data
    ///                 element for offset data offset information
    ///                 element for knot X information
    ///                 element for knot Y information
    ///                 element for offset X information
    ///                 element for offset Y information
    ///                 element for area X information
    ///                 element for area Y information
    ///                 element for Q value information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PDAFDCCInfo        PDAFDCC;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// PDAF2D
    /// Comments:      Specifies PDAF defocus conversion coefficient data information to format the OTP data
    ///                 element for PDAF 2D data availablity and endian
    ///                 element for version information
    ///                 element for map width information
    ///                 element for map height information
    ///                 element for gain width information
    ///                 element for gain height information
    ///                 element for left gain map information
    ///                 element for right gain map information
    ///                 element for up gain map information
    ///                 element for down gain map information
    ///                 element for conversion Coefficient Count information
    ///                 element for conversion Coefficient information
    ///                 element for DCC Q Format
    ///                 element for DCC map width information
    ///                 element for DCC map height information
    ///                 Offset for DCC Q Format
    ///                 Offset for DCC Map Widtht
    ///                 Offset for DCC map Height
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PDAF2DInfo         PDAF2D;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Lens
    /// Comments:      Specifies lens distortion information to format the OTP data
    ///                 element for lens data availablity and endian
    ///                 element for lens info start offset
    ///                 element for lens info size
    ///                 intrinsic calibration horizontalFocalLength
    ///                 intrinsic calibration verticalFocalLength
    ///                 intrinsic calibration opticalAxisX
    ///                 intrinsic calibration opticalAxisY
    ///                 lens distortion kappa0
    ///                 lens distortion kappa1
    ///                 lens distortion kappa2
    ///                 lens distortion kappa3
    ///                 lens distortion kappa4
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    LensDistortionInfo Lens;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// CustomInformation
/// Comments:      Custom Information for formating the OTP data or for any other purpose
///                 custom element name
///                 custom element value
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct CustomInformation
{
    /// Name of the custom element to identify what kind of information it is
    /// There are some fixed name for custom info:
    /// AFOffset, WBOffset, SensorVersionOffset, ModuleVersionOffset...
    CHAR* name;
    /// value of the custom element corresponding to the custom name
    INT32 value;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// EEPROMDriverData
/// Comments:      EEPROM driver data
///                 element for slaveInfo
///                 element for memoryMap
///                 element for slaveInfo
///                 element for customInfo
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct EEPROMDriverData
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// slaveInfo
    ///
    /// Description:   EEPROM Slave Information
    /// Comments:      EEPROM slave information
    ///                 element for EEPROMName
    ///                 element for slaveAddress
    ///                 elemet for regAddrType
    ///                 element for regDataType
    ///                 element for I2CFrequencyMode
    ///                 element for power up sequence
    ///                 element for power down sequence
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    EEPROMSlaveInformation         slaveInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// memoryMap
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SettingsInfo memoryMap;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// formatInfo
    ///
    /// Description:   EEPROM Data Format Information
    /// Comments:      EEPROM data format information
    ///                 element for auto focus information
    ///                 element for white balance information
    ///                 element for lens shading information
    ///                 element for dual camera information
    ///                 element for shield pixel information
    ///                 element for OIS calibration information
    ///                 element for PDAF DCC information
    ///                 element for pdaf 2D information
    ///                 element for lens distortion information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    EEPROMDataFormatInformation    formatInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// customInfo - Array
    /// Min Length:    0
    /// Max Length:    50
    /// Comments:      Custom Information for formating the OTP data or for any other purpose
    ///                 custom element name
    ///                 custom element value
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                         customInfoCount;
    UINT32                         customInfoID;
    CustomInformation*             customInfo;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// EEPROMDriverDataClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class EEPROMDriverDataClass : public ParameterModule, public EEPROMDriverData
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 1;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    EEPROMDriverDataClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    EEPROMDriverDataClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~EEPROMDriverDataClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load EEPROMSlaveInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadEEPROMSlaveInformation(
        ParameterFileSymbolTableEntry* entry,
        EEPROMSlaveInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load MemoryType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadMemoryType(
        ParameterFileSymbolTableEntry* entry,
        MemoryType* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load MemoryInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadMemoryInfo(
        ParameterFileSymbolTableEntry* entry,
        MemoryInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AFCalibrationInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAFCalibrationInfo(
        ParameterFileSymbolTableEntry* entry,
        AFCalibrationInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AFInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAFInfo(
        ParameterFileSymbolTableEntry* entry,
        AFInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SPCSettingsInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSPCSettingsInfo(
        ParameterFileSymbolTableEntry* entry,
        SPCSettingsInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load WBlightInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadWBlightInfo(
        ParameterFileSymbolTableEntry* entry,
        WBlightInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load WBInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadWBInfo(
        ParameterFileSymbolTableEntry* entry,
        WBInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LSClightInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLSClightInfo(
        ParameterFileSymbolTableEntry* entry,
        LSClightInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LSCInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLSCInfo(
        ParameterFileSymbolTableEntry* entry,
        LSCInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load AbsoluteMethodAECSyncInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadAbsoluteMethodAECSyncInfo(
        ParameterFileSymbolTableEntry* entry,
        AbsoluteMethodAECSyncInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load DualCameraLensInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadDualCameraLensInfo(
        ParameterFileSymbolTableEntry* entry,
        DualCameraLensInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load DualCameraSystemInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadDualCameraSystemInfo(
        ParameterFileSymbolTableEntry* entry,
        DualCameraSystemInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load DualCameraInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadDualCameraInfo(
        ParameterFileSymbolTableEntry* entry,
        DualCameraInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SPCInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSPCInfo(
        ParameterFileSymbolTableEntry* entry,
        SPCInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load OISInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadOISInfo(
        ParameterFileSymbolTableEntry* entry,
        OISInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load PDAFDCCInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadPDAFDCCInfo(
        ParameterFileSymbolTableEntry* entry,
        PDAFDCCInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load PDAF2DInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadPDAF2DInfo(
        ParameterFileSymbolTableEntry* entry,
        PDAF2DInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load LensDistortionInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadLensDistortionInfo(
        ParameterFileSymbolTableEntry* entry,
        LensDistortionInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load EEPROMDataFormatInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadEEPROMDataFormatInformation(
        ParameterFileSymbolTableEntry* entry,
        EEPROMDataFormatInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load CustomInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadCustomInformation(
        ParameterFileSymbolTableEntry* entry,
        CustomInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load EEPROMDriverData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadEEPROMDriverData(
        ParameterFileSymbolTableEntry* entry,
        EEPROMDriverData* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        EEPROMDriverData::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload EEPROMSlaveInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadEEPROMSlaveInformation(
        EEPROMSlaveInformation* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload AFInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadAFInfo(
        AFInfo* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload WBInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadWBInfo(
        WBInfo* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload LSCInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadLSCInfo(
        LSCInfo* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload DualCameraLensInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadDualCameraLensInfo(
        DualCameraLensInfo* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload DualCameraInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadDualCameraInfo(
        DualCameraInfo* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload SPCInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadSPCInfo(
        SPCInfo* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload OISInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadOISInfo(
        OISInfo* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload EEPROMDataFormatInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadEEPROMDataFormatInformation(
        EEPROMDataFormatInformation* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload CustomInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadCustomInformation(
        CustomInformation* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload EEPROMDriverData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadEEPROMDriverData(
        EEPROMDriverData* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class EEPROMDriverDataClass

CAMX_NAMESPACE_END
#endif // CAMXEEPROMDRIVER_H

