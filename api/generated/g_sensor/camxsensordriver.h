////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxsensordriver.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef CAMXSENSORDRIVER_H
#define CAMXSENSORDRIVER_H

#include "parametermodule.h"
#include "parameterfilesymboltable.h"
#include "parametertypes.h"
#include "camxsensorcommon.h"

#define CAMX_NAMESPACE_BEGIN namespace CamX {
#define CAMX_NAMESPACE_END }

CAMX_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SlaveInformation
/// Comments:      Sensor slave information
///                 element for sensorName
///                 element for slaveAddress
///                 element for regAddrType
///                 element for regDataType
///                 element for sensorIdRegAddr
///                 element for sensorId
///                 element for sensorIdMask
///                 element for i2cFrequencyMode
///                 element for powerUpSequence
///                 element for powerDownSequence
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SlaveInformation
{
    /// Name of the sensor
    CHAR*                                sensorName;
    /// 8-bit or 10-bit write slave address
    /// For External Sensors for which camx needs not probe the slave address shoule be as 0
    UINT32                               slaveAddress;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// regAddrType
    ///
    /// Range:         [1,4]
    /// Comments:      Register address / data size in bytes
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    I2CRegAddrDataType regAddrType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// regDataType
    ///
    /// Range:         [1,4]
    /// Comments:      Register address / data size in bytes
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    I2CRegAddrDataType regDataType;
    /// Register address for sensor Id
    UINT32                               sensorIdRegAddr;
    /// Sensor Id
    UINT32                               sensorId;
    /// Mask for sensor id. Sensor Id may only be few bits
    UINT32                               sensorIdMask;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// i2cFrequencyMode
    /// Default Value: FAST_PLUS
    /// Comments:      I2C frequency mode of slave
    ///                Supported modes are: STANDARD (100 KHz), FAST (400 KHz), FAST_PLUS (1 MHz), CUSTOM (Custom frequency in
    ///                DTSI)
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    I2CFrequencyMode   i2cFrequencyMode;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// powerUpSequence
    /// Comments:      Sequence of power configuration type and configuration value required to control power to the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PowerSequenceInfo  powerUpSequence;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// powerDownSequence
    /// Comments:      Sequence of power configuration type and configuration value required to control power to the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PowerSequenceInfo  powerDownSequence;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// RegAddrInformation
/// Comments:      Addresses for various sensor registers
///                 element for xOutput
///                 element for yOutput
///                 element for frameLengthLines
///                 element for lineLengthPixelClock
///                 element for coarseIntgTimeAddr
///                 element for shortCoarseIntgTimeAddr
///                 element for analog globalGainAddr
///                 element for analog shortGlobalGainAddr
///                 element for digitalGlobalGainAddr
///                 element for digitalGainRedAddr
///                 element for digitalGainGreenRedAddr
///                 element for digitalGainBlueAddr
///                 element for digitalGainGreenBlueAddr
///                 element for testPatternRAddr
///                 element for testPatternGRAddr
///                 element for testPatternBAddr
///                 element for testPatternGBAddr
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct RegAddrInformation
{
    /// Register address to program width
    UINT32  xOutput;
    /// Register address to program height
    UINT32  yOutput;
    /// Register address to program Frame length lines
    UINT32  frameLengthLines;
    /// Register address to program Line length pixel clock
    UINT32  lineLengthPixelClock;
    /// Register address to program coarse integration time
    UINT32  coarseIntgTimeAddr;
    /// Register address to program short coarse integration time
    /// This address is optional and must be provided if supported by sensor
    UINT32  shortCoarseIntgTimeAddrExists;
    UINT32  shortCoarseIntgTimeAddrID;
    UINT32  shortCoarseIntgTimeAddr;
    /// Register address to program analog global gain channel
    UINT32  globalGainAddr;
    /// Register address to program short global analog gain channel
    /// This address is optional and must be provided if supported by sensor
    UINT32  shortGlobalGainAddrExists;
    UINT32  shortGlobalGainAddrID;
    UINT32  shortGlobalGainAddr;
    /// Register address to program digital gloabl gain channel
    /// This address is optional and must be provided if supported by sensor
    UINT32  digitalGlobalGainAddrExists;
    UINT32  digitalGlobalGainAddrID;
    UINT32  digitalGlobalGainAddr;
    /// Register address to program digital gain for Red channel
    /// This address is optional and must be provided if supported by sensor
    UINT32  digitalGainRedAddrExists;
    UINT32  digitalGainRedAddrID;
    UINT32  digitalGainRedAddr;
    /// Register address to program digital gain for green red channel
    /// This address is optional and must be provided if supported by sensor
    UINT32  digitalGainGreenRedAddrExists;
    UINT32  digitalGainGreenRedAddrID;
    UINT32  digitalGainGreenRedAddr;
    /// Register address to program digital gain for blue channel
    /// This address is optional and must be provided if supported by sensor
    UINT32  digitalGainBlueAddrExists;
    UINT32  digitalGainBlueAddrID;
    UINT32  digitalGainBlueAddr;
    /// Register address to program digital gain for green blue channel
    /// This address is optional and must be provided if supported by sensor
    UINT32  digitalGainGreenBlueAddrExists;
    UINT32  digitalGainGreenBlueAddrID;
    UINT32  digitalGainGreenBlueAddr;
    /// Register address to program manual test pattern value for Red channel
    UINT32  testPatternRAddr;
    /// Register address to program manual test pattern value for Green Red channel
    UINT32  testPatternGRAddr;
    /// Register address to program manual test pattern value for Blue channel
    UINT32  testPatternBAddr;
    /// Register address to program manual test pattern value for Green Blue channel
    UINT32  testPatternGBAddr;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ColorFilterArrangement
/// Comments:      Color filter arrangement of the sensor
///                Supported filter arrangements are: BAYER_BGGR, BAYER_GBRG, BAYER_GRBG, BAYER_RGGB, BAYER_Y, YUV_UYVY,
///                YUV_YUYV
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class ColorFilterArrangement
{
    BAYER_BGGR = 0,
    BAYER_GBRG = 1,
    BAYER_GRBG = 2,
    BAYER_RGGB = 3,
    BAYER_Y    = 4,
    YUV_UYVY   = 5,
    YUV_YUYV   = 6
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// VirtualChannel
///
/// Range:         [0,3]
/// Comments:      Virtual Channel of the data
///                Valid values for virtual channel are: 0, 1, 2 and 3
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef UINT32 VirtualChannel;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// IntegrationInfo
/// Comments:      Integration related information for each resolution
///                 element for integrationTimeMin
///                 element for integrationTimeStep
///                 element for integrationTimeMargin
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct IntegrationInfo
{
    /// Minimum integration time
    UINT32 integrationTimeMin;
    /// The step of integration time
    UINT32 integrationTimeStep;
    /// Integration time margin
    UINT32 integrationTimeMargin;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// StreamType
/// Comments:      Type of the stream
///                Supported stream types are: BLOB, IMAGE, PDAF, HDR, META
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class StreamType
{
    BLOB  = 0,
    IMAGE = 1,
    PDAF  = 2,
    HDR   = 3,
    META  = 4
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// StreamConfiguration
/// Comments:      Information for a stream data
///                 element for vc
///                 element for dt
///                 element for dimension
///                 element for bitWidth
///                 element for type
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct StreamConfiguration
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// vc
    ///
    /// Default Value: 0
    /// Range:         [0,3]
    /// Comments:      Virtual Channel of the data
    ///                Valid values for virtual channel are: 0, 1, 2 and 3
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    VirtualChannel                   vc;
    /// Data type of the stream. Default value is 0x2B (10-bit RAW)
    UINT32                           dt;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// frameDimension
    /// Comments:      Frame dimension: contains xStart, yStart, width and height
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FrameDimension frameDimension;
    /// Bit width of the data
    UINT32                           bitWidth;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// type
    /// Default Value: IMAGE
    /// Comments:      Type of the stream
    ///                Supported stream types are: BLOB, IMAGE, PDAF, HDR, META
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    StreamType                       type;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// StreamInformation
/// Comments:      Stream information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct StreamInformation
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// streamConfiguration - Array
    /// Min Length:    1
    /// Max Length:    4
    /// Comments:      Information for a stream data
    ///                 element for vc
    ///                 element for dt
    ///                 element for dimension
    ///                 element for bitWidth
    ///                 element for type
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32               streamConfigurationCount;
    UINT32               streamConfigurationID;
    StreamConfiguration* streamConfiguration;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SensorCapability
/// Comments:      Capability / features supported in sensor
///                Supported features are: NORMAL, HFR, IHDR, PDAF, QUADCFA, ZZHDR, FASTAEC, DEPTH, SHDR, FS, INTERNAL
///                FS, typically, is a full size 120 fps mode and it's purpose is different from HFR
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class SensorCapability
{
    NORMAL   = 0,
    HFR      = 1,
    IHDR     = 2,
    PDAF     = 3,
    QUADCFA  = 4,
    ZZHDR    = 5,
    FASTAEC  = 6,
    DEPTH    = 7,
    SHDR     = 8,
    FS       = 9,
    INTERNAL = 10
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SensorCapabilityList - Array
/// Min Length:    1
/// Max Length:    Unbounded
/// Comments:      List of features / capabilities supported by sensor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef SensorCapability* SensorCapabilityList;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// HDR3ExposureTypeInfo
/// Comments:      This value represents 3-Exposure HDR sensor type
///                It indicates what types of sensor statistcs data output under 3-Exposure HDR mode
///                HDR3ExposureType1: split, merged statistics data
///                HDR3ExposureType2: split, merged and grid statistics data
///                HDR3ExposureType3: split, merged and ROI related statistics data
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class HDR3ExposureTypeInfo
{
    HDR3ExposureTypeUnknown = 0,
    HDR3ExposureType1       = 1,
    HDR3ExposureType2       = 2,
    HDR3ExposureType3       = 3
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ZZHDRFirstExposurePattern
/// Comments:      This value represents whether short exposure or long exposure field comes first
///                for the red or blue color pixel in the pattern.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class ZZHDRFirstExposurePattern
{
    SHORTEXPOSURE = 0,
    LONGEXPOSURE  = 1
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ZZHDRColorPattern
/// Comments:      This value represents the zzHDR pattern.
///                Valid patterns are: P0P1P0P0, P0P1P0P1, P0P0P1P0, P0P0P1P1, P0P0P0P1, P0P1P1P1, P0P1P1P0
///                Each pattern bit(P0 and P1) represents either long or short
///                exposure repeating pattern.
///                First bit of pattern would be interpreted based on ZZHDRFirstExposurePattern.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class ZZHDRColorPattern
{
    P0P1P0P0 = 0,
    P0P1P0P1 = 1,
    P0P0P1P0 = 2,
    P0P0P1P1 = 3,
    P0P0P0P1 = 4,
    P0P1P1P1 = 5,
    P0P1P1P0 = 6
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// BorderInformation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct BorderInformation
{
    UINT32 left;
    UINT32 right;
    UINT32 top;
    UINT32 bottom;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// RemosaicType
/// Comments:      This value represents Remosaic Type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class RemosaicType
{
    SWRemosaic = 0,
    HWRemosaic = 1
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// HDR3ExposureInformation
/// Comments:      Information of in-sensor HDR 3 exposure
///                HDR3ExposureType: exposure type for 3HDR non-seamless mode
///                numberOfLTCRatioRegCount: Number of LTC ratio registers
///                sensorLTCRatioAddr : Register address to program LTC ratio
///                InSensorHDR3ExpLineLengthPixelClock: LineLengthPixelClock for seamless in-sensor HDR 3 exp mode switching
///                InSensorHDR3ExpFrameLengthLines: FrameLengthLines for seamless in-sensor HDR 3 exp mode switching
///                InSensorHDR3ExpMaxAnalogGain: MaxAnalogGain for seamless in-sensor HDR 3 exp mode switching
///                InSensorHDR3ExpStartSettings: StartSetting sequence for seamless in-sensor HDR 3 exp mode switching
///                InSensorHDR3ExpStopSettings: StopSetting sequence for seamless in-sensor HDR 3 exp mode switching
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct HDR3ExposureInformation
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// HDR3ExposureType - Optional
    /// Default Value: 0
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      This value represents 3-Exposure HDR sensor type
    ///                It indicates what types of sensor statistcs data output under 3-Exposure HDR mode
    ///                HDR3ExposureType1: split, merged statistics data
    ///                HDR3ExposureType2: split, merged and grid statistics data
    ///                HDR3ExposureType3: split, merged and ROI related statistics data
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          HDR3ExposureTypeExists;
    UINT32                          HDR3ExposureTypeID;
    HDR3ExposureTypeInfo            HDR3ExposureType;
    UINT32                          sensorLTCRatioAddrExists;
    UINT32                          sensorLTCRatioAddrID;
    UINT32                          sensorLTCRatioAddr;
    UINT32                          numberOfLTCRatioRegCountExists;
    UINT32                          numberOfLTCRatioRegCountID;
    UINT32                          numberOfLTCRatioRegCount;
    UINT32                          InSensorHDR3ExpLineLengthPixelClockExists;
    UINT32                          InSensorHDR3ExpLineLengthPixelClockID;
    UINT32                          InSensorHDR3ExpLineLengthPixelClock;
    UINT32                          InSensorHDR3ExpFrameLengthLinesExists;
    UINT32                          InSensorHDR3ExpFrameLengthLinesID;
    UINT32                          InSensorHDR3ExpFrameLengthLines;
    UINT32                          InSensorHDR3ExpMaxAnalogGainExists;
    UINT32                          InSensorHDR3ExpMaxAnalogGainID;
    DOUBLE                          InSensorHDR3ExpMaxAnalogGain;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// InSensorHDR3ExpStartSettings - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          InSensorHDR3ExpStartSettingsExists;
    UINT32                          InSensorHDR3ExpStartSettingsID;
    SettingsInfo  InSensorHDR3ExpStartSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// InSensorHDR3ExpStopSettings - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          InSensorHDR3ExpStopSettingsExists;
    UINT32                          InSensorHDR3ExpStopSettingsID;
    SettingsInfo  InSensorHDR3ExpStopSettings;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ZZHDRInformation
/// Comments:      ZZHDR color pattern and first exposure information
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ZZHDRInformation
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ZZHDRPattern - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      This value represents the zzHDR pattern.
    ///                Valid patterns are: P0P1P0P0, P0P1P0P1, P0P0P1P0, P0P0P1P1, P0P0P0P1, P0P1P1P1, P0P1P1P0
    ///                Each pattern bit(P0 and P1) represents either long or short
    ///                exposure repeating pattern.
    ///                First bit of pattern would be interpreted based on ZZHDRFirstExposurePattern.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                     ZZHDRPatternExists;
    UINT32                     ZZHDRPatternID;
    ZZHDRColorPattern          ZZHDRPattern;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ZZHDRFirstExposure - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      This value represents whether short exposure or long exposure field comes first
    ///                for the red or blue color pixel in the pattern.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                     ZZHDRFirstExposureExists;
    UINT32                     ZZHDRFirstExposureID;
    ZZHDRFirstExposurePattern  ZZHDRFirstExposure;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ResolutionData
/// Comments:       element for colorFilterArrangement
///                 element for streamInfo
///                 element for lineLengthPixelClock
///                 element for frameLengthLines
///                 element for minHorizontalBlanking
///                 element for minVerticalBlanking
///                 element for outputPixelClock
///                 element for horizontalBinning
///                 element for verticalBinning
///                 element for frameRate
///                 element for laneCount
///                 element for downScaleFactor
///                 element for settleTimeNs
///                 element for is3Phase
///                 element for integrationInfo
///                 element for resSettings
///                 element for cropInfo
///                 element for ZZHDR Information
///                 element for 3-Exposure HDR Information
///                 element for RemosaicType Information
///                 element for capability
///                 element for ADCReadoutTime
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ResolutionData
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// colorFilterArrangement
    /// Comments:      Color filter arrangement of the sensor
    ///                Supported filter arrangements are: BAYER_BGGR, BAYER_GBRG, BAYER_GRBG, BAYER_RGGB, BAYER_Y, YUV_UYVY,
    ///                YUV_YUYV
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ColorFilterArrangement         colorFilterArrangement;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// streamInfo
    /// Comments:      Stream information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    StreamInformation              streamInfo;
    /// Line length pixel clock of frame
    /// Typically this value is the active width + blanking width
    UINT32                         lineLengthPixelClock;
    /// Frame length lines of frame
    /// Typically this value is the active height + blanking height
    UINT32                         frameLengthLines;
    /// Minimum horizontal blanking interval in pixels
    UINT32                         minHorizontalBlanking;
    /// Minimum horizontal blanking interval in lines
    UINT32                         minVerticalBlanking;
    /// Output pixel clock
    UINT32                         outputPixelClock;
    /// Horizontal binning value
    UINT32                         horizontalBinning;
    /// Vertical binning value
    UINT32                         verticalBinning;
    /// Maximum frame rate
    DOUBLE                         frameRate;
    /// Number of lanes in which the data is streamed
    UINT32                         laneCount;
    /// The value is a ratio, and the sensors are able only to downscale.
    /// It must be 1.00 or greater at all times.
    UINT32                         downScaleFactorExists;
    UINT32                         downScaleFactorID;
    FLOAT                          downScaleFactor;
    /// Settle time in nano seconds
    UINT32                         settleTimeNs;
    /// Flag to know if the sensor is a 3phase sensor
    UINT32                         is3Phase;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// integrationInfo - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Integration related information for each resolution
    ///                 element for integrationTimeMin
    ///                 element for integrationTimeStep
    ///                 element for integrationTimeMargin
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                         integrationInfoExists;
    UINT32                         integrationInfoID;
    IntegrationInfo                integrationInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// resSettings
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SettingsInfo resSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// cropInfo
    /// Comments:      Crop information for the frame
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BorderInformation              cropInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// ZZHDRInfo - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      ZZHDR color pattern and first exposure information
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                         ZZHDRInfoExists;
    UINT32                         ZZHDRInfoID;
    ZZHDRInformation               ZZHDRInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// HDR3ExposureInfo - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Information of in-sensor HDR 3 exposure
    ///                HDR3ExposureType: exposure type for 3HDR non-seamless mode
    ///                numberOfLTCRatioRegCount: Number of LTC ratio registers
    ///                sensorLTCRatioAddr : Register address to program LTC ratio
    ///                InSensorHDR3ExpLineLengthPixelClock: LineLengthPixelClock for seamless in-sensor HDR 3 exp mode switching
    ///                InSensorHDR3ExpFrameLengthLines: FrameLengthLines for seamless in-sensor HDR 3 exp mode switching
    ///                InSensorHDR3ExpMaxAnalogGain: MaxAnalogGain for seamless in-sensor HDR 3 exp mode switching
    ///                InSensorHDR3ExpStartSettings: StartSetting sequence for seamless in-sensor HDR 3 exp mode switching
    ///                InSensorHDR3ExpStopSettings: StopSetting sequence for seamless in-sensor HDR 3 exp mode switching
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                         HDR3ExposureInfoExists;
    UINT32                         HDR3ExposureInfoID;
    HDR3ExposureInformation        HDR3ExposureInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// RemosaicTypeInfo - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      This value represents Remosaic Type.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                         RemosaicTypeInfoExists;
    UINT32                         RemosaicTypeInfoID;
    RemosaicType                   RemosaicTypeInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// capability - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    /// Comments:      List of features / capabilities supported by sensor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                         capabilityCount;
    UINT32                         capabilityID;
    SensorCapabilityList           capability;
    /// Analog to digital conversion time for the sensor. Time specified in milliseconds
    UINT32                         ADCReadoutTimeExists;
    UINT32                         ADCReadoutTimeID;
    DOUBLE                         ADCReadoutTime;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ResolutionInformation
/// Comments:      Information of all the resolutions
///                Number of resolutions is detected from number of resolutionData nodes
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ResolutionInformation
{
    UINT32          sensorVersionExists;
    UINT32          sensorVersionID;
    UINT32          sensorVersion;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// resolutionData - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    /// Comments:       element for colorFilterArrangement
    ///                 element for streamInfo
    ///                 element for lineLengthPixelClock
    ///                 element for frameLengthLines
    ///                 element for minHorizontalBlanking
    ///                 element for minVerticalBlanking
    ///                 element for outputPixelClock
    ///                 element for horizontalBinning
    ///                 element for verticalBinning
    ///                 element for frameRate
    ///                 element for laneCount
    ///                 element for downScaleFactor
    ///                 element for settleTimeNs
    ///                 element for is3Phase
    ///                 element for integrationInfo
    ///                 element for resSettings
    ///                 element for cropInfo
    ///                 element for ZZHDR Information
    ///                 element for 3-Exposure HDR Information
    ///                 element for RemosaicType Information
    ///                 element for capability
    ///                 element for ADCReadoutTime
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32          resolutionDataCount;
    UINT32          resolutionDataID;
    ResolutionData* resolutionData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// InitSettings
/// Comments:      Information of the initial settings
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct InitSettings
{
    UINT32                         sensorVersion;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// initSetting
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SettingsInfo initSetting;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ExposureContorlInformation
/// Comments:      Exposure control information
///                 element for maxAnalogGain
///                 element for maxDigitalGain
///                 element for minAnalogGain
///                 element for verticalOffset
///                 element for verticalOffset
///                 element for maximum linecount
///                 element for minimum linecount
///                 element for realToRegDigitalGainConversionFactor
///                 element for analog realToRegGain
///                 element for analog regToRealGain
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ExposureContorlInformation
{
    /// Maximum analog again supported by sensor
    DOUBLE  maxAnalogGain;
    /// Maximum digital again supported by sensor
    DOUBLE  maxDigitalGain;
    /// Minimum analog again supported by sensor
    UINT32  minAnalogGainExists;
    UINT32  minAnalogGainID;
    DOUBLE  minAnalogGain;
    /// Minimum offset to be maintained between line count and frame length lines
    UINT32  verticalOffset;
    /// Minimum number of lines of duration difference needed to synchronize master/slave
    /// Will add/substract those many lines duration of corresponding sensor based on the value +ve/-ve
    UINT32  multiCamLineDeltaExists;
    UINT32  multiCamLineDeltaID;
    INT32   multiCamLineDelta;
    /// Maximum line count supported by sensor
    UINT32  maxLineCount;
    /// Minimum line count supported by sensor
    UINT32  minLineCountExists;
    UINT32  minLineCountID;
    UINT32  minLineCount;
    /// Conversion factor to convert real digital gain to register digital gain
    DOUBLE  realToRegDigitalGainConversionFactor;
    /// Real analog gain to register analog gain equation
    /// The equation must contain "realGain" in its equation
    /// Ex:= 512 - (512 / realGain)
    CHAR*   realToRegGain;
    /// analog Register gain to real gain equation
    /// The equation must contain "regGain" in its equation
    /// Ex:= 512 / (512 - regGain)
    CHAR*   regToRealGain;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// TestPatternMode
/// Comments:      Test pattern mode
///                Supported modes are: OFF, SOLID_COLOR, COLOR_BARS, COLOR_BARS_FADE_TO_GRAY, PN9, CUSTOM1
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class TestPatternMode
{
    OFF                     = 0,
    SOLID_COLOR             = 1,
    COLOR_BARS              = 2,
    COLOR_BARS_FADE_TO_GRAY = 3,
    PN9                     = 4,
    CUSTOM1                 = 5
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// TestPatternData
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct TestPatternData
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// mode
    /// Comments:      Test pattern mode
    ///                Supported modes are: OFF, SOLID_COLOR, COLOR_BARS, COLOR_BARS_FADE_TO_GRAY, PN9, CUSTOM1
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TestPatternMode                mode;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// settings
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SettingsInfo settings;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// TestPatternInformation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct TestPatternInformation
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// testPatternData - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32           testPatternDataCount;
    UINT32           testPatternDataID;
    TestPatternData* testPatternData;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GmslAliasInfo
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct GmslAliasInfo
{
    UINT32 sensorVersion;
    UINT32 aliasAddr;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GmslSettings
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct GmslSettings
{
    UINT32                         sensorVersion;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gmslSetting
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SettingsInfo gmslSetting;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GmslInformation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct GmslInformation
{
    UINT32         isGmslModule;
    UINT32         dualGmslVersion;
    UINT32         desSlaveAddr;
    UINT32         desRevAddr;
    UINT32         desChipIdAddr;
    UINT32         serSlaveAddr;
    UINT32         serBroadcastAddr;
    UINT32         serChipIdAddr;
    UINT32         sensorSlaveAddr;
    UINT32         sensorChipIdAddr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// desAliasInfo - Array
    /// Min Length:    0
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32         desAliasInfoCount;
    UINT32         desAliasInfoID;
    GmslAliasInfo* desAliasInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// serAliasInfo - Array
    /// Min Length:    0
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32         serAliasInfoCount;
    UINT32         serAliasInfoID;
    GmslAliasInfo* serAliasInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensorAliasInfo - Array
    /// Min Length:    0
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32         sensorAliasInfoCount;
    UINT32         sensorAliasInfoID;
    GmslAliasInfo* sensorAliasInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// enableForwardSettings - Array
    /// Min Length:    0
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32         enableForwardSettingsCount;
    UINT32         enableForwardSettingsID;
    GmslSettings*  enableForwardSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// disableForwardSettings - Array
    /// Min Length:    0
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32         disableForwardSettingsCount;
    UINT32         disableForwardSettingsID;
    GmslSettings*  disableForwardSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// remapSettings - Array
    /// Min Length:    0
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32         remapSettingsCount;
    UINT32         remapSettingsID;
    GmslSettings*  remapSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// streamOnSettings - Array
    /// Min Length:    0
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32         streamOnSettingsCount;
    UINT32         streamOnSettingsID;
    GmslSettings*  streamOnSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// streamOffSettings - Array
    /// Min Length:    0
    /// Max Length:    Unbounded
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32         streamOffSettingsCount;
    UINT32         streamOffSettingsID;
    GmslSettings*  streamOffSettings;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// TemperatureInformation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct TemperatureInformation
{
    UINT32                         temperatureSlaveAddr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// initSetting
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SettingsInfo initSetting;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// ColorLevelInformation
/// Comments:      Color level information
///                These are the default currents in various channels in complete dark light
///                 element for whiteLevel
///                 element for rPedestal
///                 element for grPedestal
///                 element for bPedestal
///                 element for gbPedestal
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ColorLevelInformation
{
    /// White level value
    UINT32 whiteLevel;
    /// Pedestal value for Red channel
    UINT32 rPedestal;
    /// Pedestal value for GreenRed channel
    UINT32 grPedestal;
    /// Pedestal value for Blue channel
    UINT32 bPedestal;
    /// Pedestal value for Green Blue channel
    UINT32 gbPedestal;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// OpticalBlackRegionInfo
/// Comments:      Information about black regions
///                Multiple black regions can be provided if applicable
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct OpticalBlackRegionInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dimension - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    /// Comments:      Frame dimension: contains xStart, yStart, width and height
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                            dimensionCount;
    UINT32                            dimensionID;
    FrameDimension* dimension;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// PixelArrayInfo
/// Comments:      Information about the pixel array
///                Active dimension and dummy pixels width are provided
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct PixelArrayInfo
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// activeDimension
    /// Comments:      Width and height of the frame or subframe
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    Dimension activeDimension;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// dummyInfo
    /// Comments:      Dummy pixels surrounding the active pixel array
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BorderInformation           dummyInfo;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DelayInfo
/// Comments:      Application delay information
///                 element for linecount
///                 element for gain
///                 element for frame length lines
///                 element for maxPipelineDelay
///                 element for frameSkip
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct DelayInfo
{
    /// Number of frames required to apply the linecount
    UINT32  linecountExists;
    UINT32  linecountID;
    UINT32  linecount;
    /// Number of frames required to apply the gain
    UINT32  gainExists;
    UINT32  gainID;
    UINT32  gain;
    /// Number of frames required to apply the frame length lines
    UINT32  frameLengthLinesExists;
    UINT32  frameLengthLinesID;
    UINT32  frameLengthLines;
    /// Maximum pipeline delay in number of frames
    UINT32  maxPipeline;
    /// Number of initial bad frames to skip
    UINT32  frameSkip;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SensingMethod
/// Comments:      Sensing method of senosor
///                Supported sensing methods: UNDEFINED, ONE_CHIP_COLOR_AREA, TWO_CHIP_COLOR_AREA
///                THREE_CHIP_COLOR_AREA, COLOR_SEQUENCE_AREA, TRILINEAR, COLOR_SEQUENCE_LINEAR
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class SensingMethod
{
    UNDEFINED             = 0,
    ONE_CHIP_COLOR_AREA   = 1,
    TWO_CHIP_COLOR_AREA   = 2,
    THREE_CHIP_COLOR_AREA = 3,
    COLOR_SEQUENCE_AREA   = 4,
    TRILINEAR             = 5,
    COLOR_SEQUENCE_LINEAR = 6
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SensorProperty
/// Comments:       element for pixelSize
///                 element for cropFactor
///                 element for sensingMethod
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SensorProperty
{
    /// Pixel size in micro meters
    DOUBLE        pixelSize;
    /// Crop factor
    DOUBLE        cropFactor;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensingMethod
    /// Comments:      Sensing method of senosor
    ///                Supported sensing methods: UNDEFINED, ONE_CHIP_COLOR_AREA, TWO_CHIP_COLOR_AREA
    ///                THREE_CHIP_COLOR_AREA, COLOR_SEQUENCE_AREA, TRILINEAR, COLOR_SEQUENCE_LINEAR
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SensingMethod sensingMethod;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NoiseCoefficent
/// Comments:       element for gradient_S
///                 element for offset_S
///                 element for gradient_O
///                 element for offset_O
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct NoiseCoefficent
{
    /// gradient_s Sensor amplification
    DOUBLE gradient_S;
    /// offset_S Sensor amplification
    DOUBLE offset_S;
    /// gradient_O sensor readout noise
    DOUBLE gradient_O;
    /// offset_O sensor readout noise
    DOUBLE offset_O;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NoiseCoefficientChannel
/// Comments:      Noise Coefficient Channels
///                Channel are in R=0, GR=1, GB=2, B=3 order
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
enum class NoiseCoefficientChannel
{
    BAYER_R  = 0,
    BAYER_Gr = 1,
    BAYER_Gb = 2,
    BAYER_B  = 3
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// NoiseCoefficientBayer
/// Comments:       Noise Coefficient Channel need to match the Bayer CFA in RGGB order
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct NoiseCoefficientBayer
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// R
    /// Comments:       element for gradient_S
    ///                 element for offset_S
    ///                 element for gradient_O
    ///                 element for offset_O
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    NoiseCoefficent R;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gr
    /// Comments:       element for gradient_S
    ///                 element for offset_S
    ///                 element for gradient_O
    ///                 element for offset_O
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    NoiseCoefficent Gr;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Gb
    /// Comments:       element for gradient_S
    ///                 element for offset_S
    ///                 element for gradient_O
    ///                 element for offset_O
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    NoiseCoefficent Gb;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// B
    /// Comments:       element for gradient_S
    ///                 element for offset_S
    ///                 element for gradient_O
    ///                 element for offset_O
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    NoiseCoefficent B;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// EnumDefinition
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct EnumDefinition
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// noiseCoefficientChannel - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Noise Coefficient Channels
    ///                Channel are in R=0, GR=1, GB=2, B=3 order
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                   noiseCoefficientChannelExists;
    UINT32                   noiseCoefficientChannelID;
    NoiseCoefficientChannel  noiseCoefficientChannel;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SensorDriverData
/// Comments:       Either noiseCoefficient or noiseCoefficientBayer, noiseCoefficientBayer will be used if both are defined
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct SensorDriverData
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Binary file symbol table entry ID
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32 SymbolTableID;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// module_version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct module_versionStruct
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// Binary file symbol table entry ID
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        UINT32 SymbolTableID;
        INT32 major_revision;
        INT32 minor_revision;
        INT32 incr_revision;
    } module_version;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// slaveInfo
    /// Comments:      Sensor slave information
    ///                 element for sensorName
    ///                 element for slaveAddress
    ///                 element for regAddrType
    ///                 element for regDataType
    ///                 element for sensorIdRegAddr
    ///                 element for sensorId
    ///                 element for sensorIdMask
    ///                 element for i2cFrequencyMode
    ///                 element for powerUpSequence
    ///                 element for powerDownSequence
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SlaveInformation                slaveInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// regAddrInfo
    /// Comments:      Addresses for various sensor registers
    ///                 element for xOutput
    ///                 element for yOutput
    ///                 element for frameLengthLines
    ///                 element for lineLengthPixelClock
    ///                 element for coarseIntgTimeAddr
    ///                 element for shortCoarseIntgTimeAddr
    ///                 element for analog globalGainAddr
    ///                 element for analog shortGlobalGainAddr
    ///                 element for digitalGlobalGainAddr
    ///                 element for digitalGainRedAddr
    ///                 element for digitalGainGreenRedAddr
    ///                 element for digitalGainBlueAddr
    ///                 element for digitalGainGreenBlueAddr
    ///                 element for testPatternRAddr
    ///                 element for testPatternGRAddr
    ///                 element for testPatternBAddr
    ///                 element for testPatternGBAddr
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    RegAddrInformation              regAddrInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// resolutionInfo - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    /// Comments:      Information of all the resolutions
    ///                Number of resolutions is detected from number of resolutionData nodes
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          resolutionInfoCount;
    UINT32                          resolutionInfoID;
    ResolutionInformation*          resolutionInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// exposureControlInfo
    /// Comments:      Exposure control information
    ///                 element for maxAnalogGain
    ///                 element for maxDigitalGain
    ///                 element for minAnalogGain
    ///                 element for verticalOffset
    ///                 element for verticalOffset
    ///                 element for maximum linecount
    ///                 element for minimum linecount
    ///                 element for realToRegDigitalGainConversionFactor
    ///                 element for analog realToRegGain
    ///                 element for analog regToRealGain
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ExposureContorlInformation      exposureControlInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// streamOnSettings
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SettingsInfo  streamOnSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// streamOffSettings
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SettingsInfo  streamOffSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// groupHoldOnSettings
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SettingsInfo  groupHoldOnSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// groupHoldOffSettings
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SettingsInfo  groupHoldOffSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// masterSettings - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          masterSettingsExists;
    UINT32                          masterSettingsID;
    SettingsInfo  masterSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// slaveSettings - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:      Sequence of register settings to configure the device
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          slaveSettingsExists;
    UINT32                          slaveSettingsID;
    SettingsInfo  slaveSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// initSettings - Array
    /// Min Length:    1
    /// Max Length:    Unbounded
    /// Comments:      Information of the initial settings
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          initSettingsCount;
    UINT32                          initSettingsID;
    InitSettings*                   initSettings;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// testPatternInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TestPatternInformation          testPatternInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// gmslInfo - Optional
    /// Min Length:    0
    /// Max Length:    1
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          gmslInfoExists;
    UINT32                          gmslInfoID;
    GmslInformation                 gmslInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TemperatureInfo - Optional
    /// Min Length:    0
    /// Max Length:    1
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          TemperatureInfoExists;
    UINT32                          TemperatureInfoID;
    TemperatureInformation          TemperatureInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// colorLevelInfo
    /// Comments:      Color level information
    ///                These are the default currents in various channels in complete dark light
    ///                 element for whiteLevel
    ///                 element for rPedestal
    ///                 element for grPedestal
    ///                 element for bPedestal
    ///                 element for gbPedestal
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ColorLevelInformation           colorLevelInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// opticalBlackRegionInfo
    /// Comments:      Information about black regions
    ///                Multiple black regions can be provided if applicable
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    OpticalBlackRegionInfo          opticalBlackRegionInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// pixelArrayInfo
    /// Comments:      Information about the pixel array
    ///                Active dimension and dummy pixels width are provided
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PixelArrayInfo                  pixelArrayInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// delayInfo
    /// Comments:      Application delay information
    ///                 element for linecount
    ///                 element for gain
    ///                 element for frame length lines
    ///                 element for maxPipelineDelay
    ///                 element for frameSkip
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    DelayInfo                       delayInfo;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// sensorProperty
    /// Comments:       element for pixelSize
    ///                 element for cropFactor
    ///                 element for sensingMethod
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SensorProperty                  sensorProperty;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// noiseCoefficent - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:       element for gradient_S
    ///                 element for offset_S
    ///                 element for gradient_O
    ///                 element for offset_O
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          noiseCoefficentExists;
    UINT32                          noiseCoefficentID;
    NoiseCoefficent                 noiseCoefficent;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// noiseCoefficientBayer - Optional
    /// Min Length:    0
    /// Max Length:    1
    /// Comments:       Noise Coefficient Channel need to match the Bayer CFA in RGGB order
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    UINT32                          noiseCoefficientBayerExists;
    UINT32                          noiseCoefficientBayerID;
    NoiseCoefficientBayer           noiseCoefficientBayer;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// SensorDriverDataClass
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class SensorDriverDataClass : public ParameterModule, public SensorDriverData
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Version
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const UINT16 MAJOR = 1;
    static const UINT16 MINOR = 0;
    static const UINT32 PATCH = 0;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Default Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SensorDriverDataClass(
        const CHAR* name);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Constructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    SensorDriverDataClass(
        const CHAR* name,
        UINT32      modeId,
        ModeUnion   mode);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Destructor
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ~SensorDriverDataClass();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// GetName
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static const CHAR* GetName(
        const CHAR* type);


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SlaveInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSlaveInformation(
        ParameterFileSymbolTableEntry* entry,
        SlaveInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load RegAddrInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadRegAddrInformation(
        ParameterFileSymbolTableEntry* entry,
        RegAddrInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load IntegrationInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadIntegrationInfo(
        ParameterFileSymbolTableEntry* entry,
        IntegrationInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load StreamConfiguration
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadStreamConfiguration(
        ParameterFileSymbolTableEntry* entry,
        StreamConfiguration* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load StreamInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadStreamInformation(
        ParameterFileSymbolTableEntry* entry,
        StreamInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load BorderInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadBorderInformation(
        ParameterFileSymbolTableEntry* entry,
        BorderInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load HDR3ExposureInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadHDR3ExposureInformation(
        ParameterFileSymbolTableEntry* entry,
        HDR3ExposureInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load ZZHDRInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadZZHDRInformation(
        ParameterFileSymbolTableEntry* entry,
        ZZHDRInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load ResolutionData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadResolutionData(
        ParameterFileSymbolTableEntry* entry,
        ResolutionData* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load ResolutionInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadResolutionInformation(
        ParameterFileSymbolTableEntry* entry,
        ResolutionInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load InitSettings
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadInitSettings(
        ParameterFileSymbolTableEntry* entry,
        InitSettings* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load ExposureContorlInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadExposureContorlInformation(
        ParameterFileSymbolTableEntry* entry,
        ExposureContorlInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load TestPatternData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadTestPatternData(
        ParameterFileSymbolTableEntry* entry,
        TestPatternData* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load TestPatternInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadTestPatternInformation(
        ParameterFileSymbolTableEntry* entry,
        TestPatternInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load GmslAliasInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadGmslAliasInfo(
        ParameterFileSymbolTableEntry* entry,
        GmslAliasInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load GmslSettings
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadGmslSettings(
        ParameterFileSymbolTableEntry* entry,
        GmslSettings* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load GmslInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadGmslInformation(
        ParameterFileSymbolTableEntry* entry,
        GmslInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load TemperatureInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadTemperatureInformation(
        ParameterFileSymbolTableEntry* entry,
        TemperatureInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load ColorLevelInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadColorLevelInformation(
        ParameterFileSymbolTableEntry* entry,
        ColorLevelInformation* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load OpticalBlackRegionInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadOpticalBlackRegionInfo(
        ParameterFileSymbolTableEntry* entry,
        OpticalBlackRegionInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load PixelArrayInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadPixelArrayInfo(
        ParameterFileSymbolTableEntry* entry,
        PixelArrayInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load DelayInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadDelayInfo(
        ParameterFileSymbolTableEntry* entry,
        DelayInfo* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SensorProperty
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSensorProperty(
        ParameterFileSymbolTableEntry* entry,
        SensorProperty* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load NoiseCoefficent
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadNoiseCoefficent(
        ParameterFileSymbolTableEntry* entry,
        NoiseCoefficent* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load NoiseCoefficientBayer
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadNoiseCoefficientBayer(
        ParameterFileSymbolTableEntry* entry,
        NoiseCoefficientBayer* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load EnumDefinition
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadEnumDefinition(
        ParameterFileSymbolTableEntry* entry,
        EnumDefinition* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load SensorDriverData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL LoadSensorDriverData(
        ParameterFileSymbolTableEntry* entry,
        SensorDriverData* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Load module_versionStruct
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static BOOL Loadmodule_versionStruct(
        ParameterFileSymbolTableEntry* entry,
        SensorDriverData::module_versionStruct* structure,
        UINT64 alignment);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload SlaveInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadSlaveInformation(
        SlaveInformation* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload StreamInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadStreamInformation(
        StreamInformation* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload HDR3ExposureInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadHDR3ExposureInformation(
        HDR3ExposureInformation* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload ResolutionData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadResolutionData(
        ResolutionData* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload ResolutionInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadResolutionInformation(
        ResolutionInformation* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload InitSettings
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadInitSettings(
        InitSettings* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload ExposureContorlInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadExposureContorlInformation(
        ExposureContorlInformation* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload TestPatternData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadTestPatternData(
        TestPatternData* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload TestPatternInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadTestPatternInformation(
        TestPatternInformation* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload GmslSettings
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadGmslSettings(
        GmslSettings* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload GmslInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadGmslInformation(
        GmslInformation* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload TemperatureInformation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadTemperatureInformation(
        TemperatureInformation* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload OpticalBlackRegionInfo
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadOpticalBlackRegionInfo(
        OpticalBlackRegionInfo* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Unload SensorDriverData
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void UnloadSensorDriverData(
        SensorDriverData* structure);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Parse symbol table entry, and return a new object
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual ParameterModule* Parse(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment) const;

}; // End class SensorDriverDataClass

CAMX_NAMESPACE_END
#endif // CAMXSENSORDRIVER_H

