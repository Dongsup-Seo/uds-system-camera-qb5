////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxflashdriver.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "camxflashdriver.h"
#include "parametersetmanager.h"

CAMX_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FlashDriverDataClass::FlashDriverDataClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(flashName);
    PARAMETER_INITIALIZE(flashDriverType);
    PARAMETER_INITIALIZE(powerUpSequenceExists);
    PARAMETER_INITIALIZE(powerUpSequenceID);
    PARAMETER_INITIALIZE(powerUpSequence);
    PARAMETER_INITIALIZE(powerDownSequenceExists);
    PARAMETER_INITIALIZE(powerDownSequenceID);
    PARAMETER_INITIALIZE(powerDownSequence);
    PARAMETER_INITIALIZE(i2cInfoExists);
    PARAMETER_INITIALIZE(i2cInfoID);
    PARAMETER_INITIALIZE(i2cInfo);
    PARAMETER_INITIALIZE(flashInformationExists);
    PARAMETER_INITIALIZE(flashInformationID);
    PARAMETER_INITIALIZE(flashInformation);
    PARAMETER_INITIALIZE(numberOfFlashs);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FlashDriverDataClass::FlashDriverDataClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(flashName);
    PARAMETER_INITIALIZE(flashDriverType);
    PARAMETER_INITIALIZE(powerUpSequence);
    PARAMETER_INITIALIZE(powerDownSequence);
    PARAMETER_INITIALIZE(i2cInfo);
    PARAMETER_INITIALIZE(flashInformation);
    PARAMETER_INITIALIZE(numberOfFlashs);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FlashDriverDataClass::~FlashDriverDataClass()
{
    UnloadFlashDriverData(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* FlashDriverDataClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "flashDriverData")) == 0)
    {
        name = "flashDriverData";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FlashI2CInformation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FlashDriverDataClass::LoadFlashI2CInformation(
    ParameterFileSymbolTableEntry* entry,
    FlashI2CInformation* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->slaveAddress, alignment);
    result = result && entry->Read(&structure->regAddrType, alignment);
    result = result && entry->Read(&structure->regDataType, alignment);
    structure->i2cFrequencyMode = (I2CFrequencyMode)entry->ReadEnum(&result, alignment);
    result = result && camxsensorcommonClass::LoadSettingsInfo(entry, &structure->flashInitSettings, alignment);
    result = result && camxsensorcommonClass::LoadSettingsInfo(entry, &structure->flashOffSettings, alignment);
    result = result && camxsensorcommonClass::LoadSettingsInfo(entry, &structure->flashLowSettings, alignment);
    result = result && camxsensorcommonClass::LoadSettingsInfo(entry, &structure->flashHighSettings, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load TriggerInformation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FlashDriverDataClass::LoadTriggerInformation(
    ParameterFileSymbolTableEntry* entry,
    TriggerInformation* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->maxFlashCurrent, alignment);
    result = result && entry->Read(&structure->maxTorchCurrent, alignment);
    result = result && entry->Read(&structure->maxFlashDuration, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FlashInformation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FlashDriverDataClass::LoadFlashInformation(
    ParameterFileSymbolTableEntry* entry,
    FlashInformation* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array triggerInfo from symbol table
    {
        result = entry->Read(&structure->triggerInfoCount, alignment);
        structure->triggerInfoID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->triggerInfo = PARAMETER_NEW TriggerInformation[structure->triggerInfoCount];
        }
        if (!result || structure->triggerInfo == NULL)
        {
            structure->triggerInfoCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->triggerInfoCount; i++)
        {
            result = LoadTriggerInformation(pointerEntry, &structure->triggerInfo[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load FlashDriverData
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FlashDriverDataClass::LoadFlashDriverData(
    ParameterFileSymbolTableEntry* entry,
    FlashDriverData* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);

    // Reading String flashName from symbol table
    {
        UINT32 count = 0;
        result = result && entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->flashName = NULL;
        result = result && stringPointerEntry->ReadString(&structure->flashName, count, alignment);
    }
    structure->flashDriverType = (FlashDriverType)entry->ReadEnum(&result, alignment);

    // Reading Optional parameter powerUpSequence from symbol table
    {
        result = result && entry->Read(&structure->powerUpSequenceExists, alignment);
        structure->powerUpSequenceID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->powerUpSequenceExists)
        {
            result = result && camxsensorcommonClass::LoadPowerSequenceInfo(pointerEntry, &structure->powerUpSequence, alignment);
        }
        else
        {
            PARAMETER_INITIALIZE(structure->powerUpSequence);
        }
    }

    // Reading Optional parameter powerDownSequence from symbol table
    {
        result = result && entry->Read(&structure->powerDownSequenceExists, alignment);
        structure->powerDownSequenceID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->powerDownSequenceExists)
        {
            result = result && camxsensorcommonClass::LoadPowerSequenceInfo(pointerEntry, &structure->powerDownSequence, alignment);
        }
        else
        {
            PARAMETER_INITIALIZE(structure->powerDownSequence);
        }
    }

    // Reading Optional parameter i2cInfo from symbol table
    {
        result = result && entry->Read(&structure->i2cInfoExists, alignment);
        structure->i2cInfoID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->i2cInfoExists)
        {
            result = result && LoadFlashI2CInformation(pointerEntry, &structure->i2cInfo, alignment);
        }
        else
        {
            PARAMETER_INITIALIZE(structure->i2cInfo);
        }
    }

    // Reading Optional parameter flashInformation from symbol table
    {
        result = result && entry->Read(&structure->flashInformationExists, alignment);
        structure->flashInformationID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->flashInformationExists)
        {
            result = result && LoadFlashInformation(pointerEntry, &structure->flashInformation, alignment);
        }
        else
        {
            PARAMETER_INITIALIZE(structure->flashInformation);
        }
    }
    result = result && entry->Read(&structure->numberOfFlashs, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL FlashDriverDataClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    FlashDriverData::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload FlashI2CInformation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FlashDriverDataClass::UnloadFlashI2CInformation(
    FlashI2CInformation* structure)
{
    camxsensorcommonClass::UnloadSettingsInfo(&structure->flashInitSettings);
    camxsensorcommonClass::UnloadSettingsInfo(&structure->flashOffSettings);
    camxsensorcommonClass::UnloadSettingsInfo(&structure->flashLowSettings);
    camxsensorcommonClass::UnloadSettingsInfo(&structure->flashHighSettings);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload FlashInformation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FlashDriverDataClass::UnloadFlashInformation(
    FlashInformation* structure)
{
    PARAMETER_DELETE[] structure->triggerInfo;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload FlashDriverData
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FlashDriverDataClass::UnloadFlashDriverData(
    FlashDriverData* structure)
{
    PARAMETER_DELETE[] structure->flashName;
    camxsensorcommonClass::UnloadPowerSequenceInfo(&structure->powerUpSequence);
    camxsensorcommonClass::UnloadPowerSequenceInfo(&structure->powerDownSequence);
    UnloadFlashI2CInformation(&structure->i2cInfo);
    UnloadFlashInformation(&structure->flashInformation);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* FlashDriverDataClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    FlashDriverDataClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW FlashDriverDataClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadFlashDriverData(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


CAMX_NAMESPACE_END
