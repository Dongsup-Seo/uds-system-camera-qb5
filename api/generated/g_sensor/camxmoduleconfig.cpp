////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  camxmoduleconfig.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "camxmoduleconfig.h"
#include "parametersetmanager.h"

CAMX_NAMESPACE_BEGIN

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Default Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CameraModuleDataClass::CameraModuleDataClass(
    const CHAR* name)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), 0, ModeUnion(0))
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(moduleGroup);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CameraModuleDataClass::CameraModuleDataClass(
    const CHAR* name,
    UINT32      modeId,
    ModeUnion   mode)
    : ParameterModule(name, VersionUnion(MAJOR, MINOR, PATCH), modeId, mode)
{
    PARAMETER_INITIALIZE(SymbolTableID);
    PARAMETER_INITIALIZE(module_version);
    PARAMETER_INITIALIZE(moduleGroup);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Destructor
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CameraModuleDataClass::~CameraModuleDataClass()
{
    UnloadCameraModuleData(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GetName
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CHAR* CameraModuleDataClass::GetName(
    const CHAR* type)
{
    const CHAR* name = type;
    CHAR temp[ParameterFileSymbolTableEntry::TYPE_LEN + 1];
    if (PARAMETER_STRCMP(type, ParameterFileSymbolTableEntry::GetType(temp, "cameraModuleData")) == 0)
    {
        name = "cameraModuleData";
    }
    return name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load CSIInformation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CameraModuleDataClass::LoadCSIInformation(
    ParameterFileSymbolTableEntry* entry,
    CSIInformation* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Optional parameter laneAssign from symbol table
    {
        result = entry->Read(&structure->laneAssignExists, alignment);
        structure->laneAssignID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->laneAssignExists)
        {
            result = pointerEntry->Read(&structure->laneAssign, alignment);
        }
        else
        {
            PARAMETER_INITIALIZE(structure->laneAssign);
        }
    }

    // Reading Optional parameter isComboMode from symbol table
    {
        result = result && entry->Read(&structure->isComboModeExists, alignment);
        structure->isComboModeID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->isComboModeExists)
        {
            result = result && pointerEntry->Read(&structure->isComboMode, alignment);
        }
        else
        {
            PARAMETER_INITIALIZE(structure->isComboMode);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load LensInformation
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CameraModuleDataClass::LoadLensInformation(
    ParameterFileSymbolTableEntry* entry,
    LensInformation* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->focalLength, alignment);
    result = result && entry->Read(&structure->fNumber, alignment);
    result = result && entry->Read(&structure->minFocusDistance, alignment);
    result = result && entry->Read(&structure->maxFocusDistance, alignment);
    result = result && entry->Read(&structure->horizontalViewAngle, alignment);
    result = result && entry->Read(&structure->verticalViewAngle, alignment);

    // Reading Optional parameter maxRollDegree from symbol table
    {
        result = result && entry->Read(&structure->maxRollDegreeExists, alignment);
        structure->maxRollDegreeID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->maxRollDegreeExists)
        {
            result = result && pointerEntry->Read(&structure->maxRollDegree, alignment);
        }
        else
        {
            PARAMETER_INITIALIZE(structure->maxRollDegree);
        }
    }

    // Reading Optional parameter maxPitchDegree from symbol table
    {
        result = result && entry->Read(&structure->maxPitchDegreeExists, alignment);
        structure->maxPitchDegreeID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->maxPitchDegreeExists)
        {
            result = result && pointerEntry->Read(&structure->maxPitchDegree, alignment);
        }
        else
        {
            PARAMETER_INITIALIZE(structure->maxPitchDegree);
        }
    }

    // Reading Optional parameter maxYawDegree from symbol table
    {
        result = result && entry->Read(&structure->maxYawDegreeExists, alignment);
        structure->maxYawDegreeID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->maxYawDegreeExists)
        {
            result = result && pointerEntry->Read(&structure->maxYawDegree, alignment);
        }
        else
        {
            PARAMETER_INITIALIZE(structure->maxYawDegree);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ModuleConfiguration
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CameraModuleDataClass::LoadModuleConfiguration(
    ParameterFileSymbolTableEntry* entry,
    ModuleConfiguration* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->cameraId, alignment);

    // Reading Optional parameter moduleName from symbol table
    {
        result = result && entry->Read(&structure->moduleNameExists, alignment);
        structure->moduleNameID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->moduleNameExists)
        {

            // Reading String moduleName from symbol table
            {
                UINT32 count = 0;
                result = result && pointerEntry->Read(&count, alignment);
                ParameterFileSymbolTableEntry* stringPointerEntry = pointerEntry->Table->ReadPointerEntry(pointerEntry, alignment);
                result = result && stringPointerEntry != NULL;
                structure->moduleName = NULL;
                result = result && stringPointerEntry->ReadString(&structure->moduleName, count, alignment);
            }
        }
        else
        {
            PARAMETER_INITIALIZE(structure->moduleName);
        }
    }

    // Reading String sensorName from symbol table
    {
        UINT32 count = 0;
        result = result && entry->Read(&count, alignment);
        ParameterFileSymbolTableEntry* stringPointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && stringPointerEntry != NULL;
        structure->sensorName = NULL;
        result = result && stringPointerEntry->ReadString(&structure->sensorName, count, alignment);
    }
    result = result && entry->Read(&structure->sensorVersion, alignment);

    // Reading Optional parameter sensorSlaveAddress from symbol table
    {
        result = result && entry->Read(&structure->sensorSlaveAddressExists, alignment);
        structure->sensorSlaveAddressID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->sensorSlaveAddressExists)
        {
            result = result && pointerEntry->Read(&structure->sensorSlaveAddress, alignment);
        }
        else
        {
            PARAMETER_INITIALIZE(structure->sensorSlaveAddress);
        }
    }

    // Reading Optional parameter sensorI2CFrequencyMode from symbol table
    {
        result = result && entry->Read(&structure->sensorI2CFrequencyModeExists, alignment);
        structure->sensorI2CFrequencyModeID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->sensorI2CFrequencyModeExists)
        {
            structure->sensorI2CFrequencyMode = (I2CFrequencyMode)pointerEntry->ReadEnum(&result, alignment);
        }
        else
        {
            PARAMETER_INITIALIZE(structure->sensorI2CFrequencyMode);
        }
    }

    // Reading Optional parameter actuatorName from symbol table
    {
        result = result && entry->Read(&structure->actuatorNameExists, alignment);
        structure->actuatorNameID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->actuatorNameExists)
        {

            // Reading String actuatorName from symbol table
            {
                UINT32 count = 0;
                result = result && pointerEntry->Read(&count, alignment);
                ParameterFileSymbolTableEntry* stringPointerEntry = pointerEntry->Table->ReadPointerEntry(pointerEntry, alignment);
                result = result && stringPointerEntry != NULL;
                structure->actuatorName = NULL;
                result = result && stringPointerEntry->ReadString(&structure->actuatorName, count, alignment);
            }
        }
        else
        {
            PARAMETER_INITIALIZE(structure->actuatorName);
        }
    }

    // Reading Optional parameter oisName from symbol table
    {
        result = result && entry->Read(&structure->oisNameExists, alignment);
        structure->oisNameID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->oisNameExists)
        {

            // Reading String oisName from symbol table
            {
                UINT32 count = 0;
                result = result && pointerEntry->Read(&count, alignment);
                ParameterFileSymbolTableEntry* stringPointerEntry = pointerEntry->Table->ReadPointerEntry(pointerEntry, alignment);
                result = result && stringPointerEntry != NULL;
                structure->oisName = NULL;
                result = result && stringPointerEntry->ReadString(&structure->oisName, count, alignment);
            }
        }
        else
        {
            PARAMETER_INITIALIZE(structure->oisName);
        }
    }

    // Reading Optional parameter eepromName from symbol table
    {
        result = result && entry->Read(&structure->eepromNameExists, alignment);
        structure->eepromNameID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->eepromNameExists)
        {

            // Reading String eepromName from symbol table
            {
                UINT32 count = 0;
                result = result && pointerEntry->Read(&count, alignment);
                ParameterFileSymbolTableEntry* stringPointerEntry = pointerEntry->Table->ReadPointerEntry(pointerEntry, alignment);
                result = result && stringPointerEntry != NULL;
                structure->eepromName = NULL;
                result = result && stringPointerEntry->ReadString(&structure->eepromName, count, alignment);
            }
        }
        else
        {
            PARAMETER_INITIALIZE(structure->eepromName);
        }
    }

    // Reading Optional parameter eepromSlaveAddress from symbol table
    {
        result = result && entry->Read(&structure->eepromSlaveAddressExists, alignment);
        structure->eepromSlaveAddressID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->eepromSlaveAddressExists)
        {
            result = result && pointerEntry->Read(&structure->eepromSlaveAddress, alignment);
        }
        else
        {
            PARAMETER_INITIALIZE(structure->eepromSlaveAddress);
        }
    }

    // Reading Optional parameter flashName from symbol table
    {
        result = result && entry->Read(&structure->flashNameExists, alignment);
        structure->flashNameID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->flashNameExists)
        {

            // Reading String flashName from symbol table
            {
                UINT32 count = 0;
                result = result && pointerEntry->Read(&count, alignment);
                ParameterFileSymbolTableEntry* stringPointerEntry = pointerEntry->Table->ReadPointerEntry(pointerEntry, alignment);
                result = result && stringPointerEntry != NULL;
                structure->flashName = NULL;
                result = result && stringPointerEntry->ReadString(&structure->flashName, count, alignment);
            }
        }
        else
        {
            PARAMETER_INITIALIZE(structure->flashName);
        }
    }

    // Reading Optional parameter chromatixName from symbol table
    {
        result = result && entry->Read(&structure->chromatixNameExists, alignment);
        structure->chromatixNameID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->chromatixNameExists)
        {

            // Reading String chromatixName from symbol table
            {
                UINT32 count = 0;
                result = result && pointerEntry->Read(&count, alignment);
                ParameterFileSymbolTableEntry* stringPointerEntry = pointerEntry->Table->ReadPointerEntry(pointerEntry, alignment);
                result = result && stringPointerEntry != NULL;
                structure->chromatixName = NULL;
                result = result && stringPointerEntry->ReadString(&structure->chromatixName, count, alignment);
            }
        }
        else
        {
            PARAMETER_INITIALIZE(structure->chromatixName);
        }
    }
    structure->position = (CameraPosition)entry->ReadEnum(&result, alignment);
    result = result && LoadCSIInformation(entry, &structure->CSIInfo, alignment);
    result = result && LoadLensInformation(entry, &structure->lensInfo, alignment);

    // Reading Optional parameter pdafName from symbol table
    {
        result = result && entry->Read(&structure->pdafNameExists, alignment);
        structure->pdafNameID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result && structure->pdafNameExists)
        {

            // Reading String pdafName from symbol table
            {
                UINT32 count = 0;
                result = result && pointerEntry->Read(&count, alignment);
                ParameterFileSymbolTableEntry* stringPointerEntry = pointerEntry->Table->ReadPointerEntry(pointerEntry, alignment);
                result = result && stringPointerEntry != NULL;
                structure->pdafName = NULL;
                result = result && stringPointerEntry->ReadString(&structure->pdafName, count, alignment);
            }
        }
        else
        {
            PARAMETER_INITIALIZE(structure->pdafName);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load ModuleGroup
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CameraModuleDataClass::LoadModuleGroup(
    ParameterFileSymbolTableEntry* entry,
    ModuleGroup* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;


    // Reading Array moduleConfiguration from symbol table
    {
        result = entry->Read(&structure->moduleConfigurationCount, alignment);
        structure->moduleConfigurationID = entry->ID;
        ParameterFileSymbolTableEntry* pointerEntry = entry->Table->ReadPointerEntry(entry, alignment);
        result = result && pointerEntry != NULL;
        if (result)
        {
            structure->moduleConfiguration = PARAMETER_NEW ModuleConfiguration[structure->moduleConfigurationCount];
        }
        if (!result || structure->moduleConfiguration == NULL)
        {
            structure->moduleConfigurationCount = 0;
        }
        for (UINT32 i = 0; result && i < structure->moduleConfigurationCount; i++)
        {
            result = LoadModuleConfiguration(pointerEntry, &structure->moduleConfiguration[i], alignment);
        }
    }

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load CameraModuleData
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CameraModuleDataClass::LoadCameraModuleData(
    ParameterFileSymbolTableEntry* entry,
    CameraModuleData* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = Loadmodule_versionStruct(entry, &structure->module_version, alignment);
    result = result && LoadModuleGroup(entry, &structure->moduleGroup, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Load module_versionStruct
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BOOL CameraModuleDataClass::Loadmodule_versionStruct(
    ParameterFileSymbolTableEntry* entry,
    CameraModuleData::module_versionStruct* structure,
    UINT64 alignment)
{
    BOOL result = TRUE;

    result = entry->Read(&structure->major_revision, alignment);
    result = result && entry->Read(&structure->minor_revision, alignment);
    result = result && entry->Read(&structure->incr_revision, alignment);

    return result;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload ModuleConfiguration
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CameraModuleDataClass::UnloadModuleConfiguration(
    ModuleConfiguration* structure)
{
    PARAMETER_DELETE[] structure->moduleName;
    PARAMETER_DELETE[] structure->sensorName;
    PARAMETER_DELETE[] structure->actuatorName;
    PARAMETER_DELETE[] structure->oisName;
    PARAMETER_DELETE[] structure->eepromName;
    PARAMETER_DELETE[] structure->flashName;
    PARAMETER_DELETE[] structure->chromatixName;
    PARAMETER_DELETE[] structure->pdafName;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload ModuleGroup
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CameraModuleDataClass::UnloadModuleGroup(
    ModuleGroup* structure)
{
    for (UINT32 i = 0; i < structure->moduleConfigurationCount; i++)
    {
        UnloadModuleConfiguration(&structure->moduleConfiguration[i]);
    }
    PARAMETER_DELETE[] structure->moduleConfiguration;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Unload CameraModuleData
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CameraModuleDataClass::UnloadCameraModuleData(
    CameraModuleData* structure)
{
    UnloadModuleGroup(&structure->moduleGroup);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Parse symbol table entry, and return a new object
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ParameterModule* CameraModuleDataClass::Parse(
    ParameterFileSymbolTableEntry* entry,
    UINT64 alignment) const
{
    CameraModuleDataClass* cls = NULL;

    if (PARAMETER_STRCMP(Type, entry->Type) == 0 && Version.Value == entry->Version.Value)
    {
        cls = PARAMETER_NEW CameraModuleDataClass(GetName(entry->Type), 
            entry->ModeId, entry->Mode);
        if (cls != NULL)
        {
            BOOL result = TRUE;

            cls->SymbolTableID = entry->ID;
            cls->ID            = entry->ID;

            result = result && LoadCameraModuleData(entry, cls, alignment);

            if (!result)
            {
                PARAMETER_DELETE cls;
                cls = NULL;
            }
        }
    }
    return (ParameterModule*)cls;
}


CAMX_NAMESPACE_END
