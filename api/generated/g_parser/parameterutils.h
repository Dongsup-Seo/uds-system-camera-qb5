////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  parameterutils.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef PARAMETERUTILS_H
#define PARAMETERUTILS_H

#include "parametertypes.h"

#define PARAMETER_MIN(lhs, rhs)     ( (lhs) < (rhs) ? (lhs) : (rhs) )
#define PARAMETER_MAX(lhs, rhs)     ( (lhs) > (rhs) ? (lhs) : (rhs) )
#define REMAINDER(bytes, alignment) ( (bytes % alignment) > 0 ? (alignment - (bytes % alignment)) : 0 )
#define IS_ALIGNED(value)           ( (UINT64)(value) % 8 == 0 )

// Reads buffer value in little-endian format
class ParameterUtils
{
public:
    static const INT32 UNLIMITED = -1;
    // Integer value read from little-endian binary
    static UINT64 Read(
        BYTE*   buffer,
        UINT64* pos,
        UINT64  size,
        UINT64  alignment);

    static BOOL Read(
        INT8*   value,
        BYTE*   buffer,
        UINT64  length,
        UINT64* pos,
        UINT64  alignment);

    static BOOL Read(
        UINT8*  value,
        BYTE*   buffer,
        UINT64  length,
        UINT64* pos,
        UINT64  alignment);

    static BOOL Read(
        BOOL*   value,
        BYTE*   buffer,
        UINT64  length,
        UINT64* pos,
        UINT64  alignment);

    template<typename T> static BOOL Read(
        T*      value,
        BYTE*   buffer,
        UINT64  length,
        UINT64* pos,
        UINT64  alignment)
    {
        const UINT64 OBJ_SIZE = sizeof(T);
        if ((*pos) + OBJ_SIZE <= length)
        {
            if (IS_ALIGNED(*pos) && IS_ALIGNED(buffer))
            {
                T* ptr = (T*)&buffer[*pos];
                *value = *ptr;
                *pos  += PARAMETER_MAX(OBJ_SIZE, alignment);
            }
            else
            {
                UINT64 temp = Read(buffer, pos, OBJ_SIZE, alignment);
                *value = *((T*)&temp);
            }
            return TRUE;
        }
        return FALSE;
    }

    template<typename T> static BOOL ReadArray(
        T*      value,
        BYTE*   buffer,
        UINT64  length,
        UINT64* pos,
        UINT64  count,
        UINT64  alignment)
    {
        return ReadBuffer((BYTE*)value, buffer, length, pos, count * sizeof(T), alignment);
    }

    template<typename T> static T* ReadArray(
        BYTE*   buffer,
        UINT64  length,
        UINT64* pos,
        UINT64  count,
        UINT64  alignment)
    {
        T* result = PARAMETER_NEW T[count];
        if (result != NULL)
        {
            if (!ReadBuffer((BYTE*)result, buffer, length, pos, count * sizeof(T), alignment))
            {
                PARAMETER_DELETE[] result;
                result = NULL;
            }
        }
        return result;
    }

    static BOOL ReadString(
        CHAR*   value,
        BYTE*   buffer,
        UINT64  length,
        UINT64* pos,
        UINT64  destStrSize,
        UINT64  maxChars,
        UINT64  alignment);

    static CHAR* ReadString(
        BYTE*   buffer,
        UINT64  length,
        UINT64* pos,
        UINT64  maxChars,
        UINT64  alignment);

    static BOOL ReadBuffer(
        BYTE*   value,
        BYTE*   buffer,
        UINT64  length,
        UINT64* pos,
        UINT64  count,
        UINT64  alignment);
};
#endif
