////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  parametertypes.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef PARAMETERTYPES_H
#define PARAMETERTYPES_H

#ifdef CAMX

#include <stdio.h>
#include <string.h>
#include "camxtypes.h"
#include "camxmem.h"
#include "camxosutils.h"
#include "camxutils.h"

#define PARAMETER_NEW     CAMX_NEW
#define PARAMETER_DELETE  CAMX_DELETE
#define PARAMETER_STRLEN  CamX::OsUtils::StrLen
#define PARAMETER_SPRINTF CamX::OsUtils::SNPrintF
#define PARAMETER_STRCMP  CamX::OsUtils::StrCmp
#define PARAMETER_STRCPY(dest, len, src)  CamX::OsUtils::StrLCpy(dest, src, len)
#define PARAMETER_STRCAT(dest, destLen, src)  CamX::OsUtils::StrLCat(dest, destLen, src)
#define PARAMETER_STRNICMP(str1, str2, nChars)  CamX::OsUtils::StrNICmp(str1, str2, nChars)
#define PARAMETER_MEMCPY(dest, len, src, count)  CamX::Utils::Memcpy(dest, src, count)
#define PARAMETER_INITIALIZE(var)  CamX::Utils::Memset(&var, 0, sizeof(var))
#else

#include <Windows.h>
#include <string.h>
#include <stdio.h>

#define PARAMETER_NEW     new
#define PARAMETER_DELETE  delete
#define PARAMETER_STRLEN  strlen
#define PARAMETER_SPRINTF sprintf_s
#define PARAMETER_STRCMP  strcmp
#define PARAMETER_STRCPY(dest, len, src)  strcpy_s(dest, len, src)
#define PARAMETER_STRCAT(dest, len, src)  strcat_s(dest, len, src)
#define PARAMETER_STRNICMP(str1, str2, nChars)  _strnicmp(str1, str2, nChars)
#define PARAMETER_MEMCPY(dest, len, src, count)  memcpy_s(dest, len, src, count)
#define PARAMETER_INITIALIZE(var)  memset(&var, 0, sizeof(var))

enum CamxResult
{
    CamxResultSuccess,
    CamxResultEFailed
};

#endif

#pragma pack(push, 1)
union VersionUnion
{
    VersionUnion();

    VersionUnion(
        UINT64 value);

    VersionUnion(
        UINT16 major,
        UINT16 minor,
        UINT32 patch);

    UINT64 Value;

    struct
    {
        UINT16 Major;
        UINT16 Minor;
        UINT32 Patch;
    }Version;

    bool operator ==(const VersionUnion& rhs);
    bool operator !=(const VersionUnion& rhs);
    bool operator >(const VersionUnion& rhs);
    bool operator >=(const VersionUnion& rhs);
    bool operator <(const VersionUnion& rhs);
    bool operator <=(const VersionUnion& rhs);
    INT32 Compare(const VersionUnion& rhs) const;
};

union ModeUnion
{
public:
    ModeUnion();

    ModeUnion(
        UINT64 value);

    ModeUnion(
        UINT16 mode,
        UINT16 subMode,
        UINT32 group);

    // The IsModeMatch function returns TRUE if Mode and SubMode are the same, ignoring Group.
    // For comparison including group, just use lhs.Value == rhs.Value
    inline BOOL IsModeMatch(ModeUnion rhs)
    {
        return Mode.Mode == rhs.Mode.Mode && Mode.SubMode == rhs.Mode.SubMode;
    }

    UINT64 Value;

    struct
    {
        UINT16 Mode;
        UINT16 SubMode;
        UINT32 Group;
    }Mode;
};
#pragma pack(pop)

class IModeTable
{
public:
    virtual BOOL GetModeEntry(UINT32 modeID, ModeUnion* mode) = 0;
    virtual ~IModeTable(){}
};

#endif
