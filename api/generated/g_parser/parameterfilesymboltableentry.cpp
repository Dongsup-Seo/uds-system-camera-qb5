////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  parameterfilesymboltableentry.cpp
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "parameterfilesymboltableentry.h"


ParameterFileSymbolTableEntry::ParameterFileSymbolTableEntry()
{
    Table      = NULL;
    m_position = 0;
    m_data     = NULL;
}

ParameterFileSymbolTableEntry::~ParameterFileSymbolTableEntry()
{
    m_data = NULL;
}

VOID ParameterFileSymbolTableEntry::Init(
    ParameterFileSymbolTable* table)
{
    Table      = table;
    m_position = 0;
    m_data     = NULL;
}

BOOL ParameterFileSymbolTableEntry::Load(
    BYTE*       buffer,
    UINT64      length,
    UINT64*     pos,
    UINT32      dataOffset,
    IModeTable* modeTable,
    UINT64      alignment)
{
    BOOL   result = true;
    UINT32 offset = 0;

    m_data = NULL;
    result = ParameterUtils::Read(&ID,            buffer, length, pos, alignment);
    ParameterUtils::ReadString(Type, buffer, length, pos, TYPE_LEN + 1, TYPE_LEN, alignment);
    result = result && ParameterUtils::Read(&Version.Value, buffer, length, pos, alignment);

    if (alignment == 1)
    {
        // Alignmet 1 is legacy (V 1.0.x) binary format, read mode, submode, and group
        result = result && ParameterUtils::Read(&Mode.Value, buffer, length, pos, alignment);
    }

    result = result && ParameterUtils::Read(&ModeId,     buffer, length, pos, alignment);
    result = result && ParameterUtils::Read(&offset,     buffer, length, pos, alignment);
    result = result && ParameterUtils::Read(&m_dataSize, buffer, length, pos, alignment);
    m_data = buffer + dataOffset + offset;

    if (alignment == 8)
    {
        // Alignmet 8 is current binary format, get mode/submode from mode ID and mode array
        modeTable->GetModeEntry(ModeId, &Mode);
    }

    return result;
}

CHAR* ParameterFileSymbolTableEntry::GetType(
    CHAR*       outputType,
    const CHAR* moduleName)
{
    const CHAR* prefixes[] = { "chromatix_", "chromatix" };
    const CHAR* type       = moduleName;

    for (UINT64 i = 0; i < PREFIX_COUNT; i++)
    {
        SIZE_T len = PARAMETER_STRLEN(prefixes[i]);
        if ((PARAMETER_STRNICMP(moduleName, prefixes[i], len) == 0) &&
             (len < PARAMETER_STRLEN(moduleName)))
        {
            type = &moduleName[len];
            break;
        }
    }

    UINT64 typeLen = (UINT64)PARAMETER_STRLEN(type);
    if (typeLen > TYPE_LEN)
    {
        for (UINT64 i = 0; i < TYPE_START_LEN; i++)
        {
            outputType[i] = type[i];
        }
        outputType[TYPE_START_LEN] = TYPE_SEPARATOR;
        UINT64 typePos = PARAMETER_STRLEN(type) - TYPE_END_LEN;
        UINT64 index   = TYPE_START_LEN + 1;
        while (typePos < typeLen)
        {
            outputType[index++] = type[typePos++];
        }

        outputType[TYPE_LEN] = '\0';
    }
    else
    {
        PARAMETER_STRCPY(outputType, TYPE_LEN + 1, type);
    }

    return outputType;
}
