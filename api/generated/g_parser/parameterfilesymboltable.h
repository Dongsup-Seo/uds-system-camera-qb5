////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// THIS IS AUTO-GENERATED CODE.  PLEASE DO NOT EDIT (File bug reports against tools).
///
/// Auto-generated by: Parameter Parser V2.0.0 (1907311625)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  parameterfilesymboltable.h
/// @brief Auto-generated Chromatix parameter file
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef PARAMETERSYMBOLTABLE_H
#define PARAMETERSYMBOLTABLE_H

#include "parametertypes.h"
#include "parameterfilesymboltableentry.h"
#include "parametermodule.h"

class ParameterFileSymbolTable
{
public:

    ParameterFileSymbolTable();

    ~ParameterFileSymbolTable();

    BOOL Load(
        BYTE*       buffer,
        UINT64      length,
        UINT32      tableSize,
        UINT64*     pos,
        UINT32      dataOffset,
        IModeTable* modeTable,
        UINT64      alignment);

    inline ParameterFileSymbolTableEntry* GetModule(
        UINT32 index)
    {
        if (index < m_moduleCount)
        {
            return m_modules[index];
        }
        else
        {
            return NULL;
        }
    }

    inline UINT32 Count()
    {
        return m_count;
    }

    inline UINT32 ModuleCount()
    {
        return m_moduleCount;
    }

    ParameterFileSymbolTableEntry* Find(
        UINT32 id);

    ParameterFileSymbolTableEntry* ReadPointerEntry(
        ParameterFileSymbolTableEntry* entry,
        UINT64 alignment);

private:
    UINT32                          m_count;
    UINT32                          m_moduleCount;
    ParameterFileSymbolTableEntry** m_modules;
    ParameterFileSymbolTableEntry*  m_entries;
};

#endif
